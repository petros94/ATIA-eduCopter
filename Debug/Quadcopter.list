
C:\Users\petros\Documents\Quadcopter\Debug\Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133a8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08013540  08013540  00023540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080135c0  080135c0  000235c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080135c4  080135c4  000235c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080135c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000248  20000004  080135cc  00030004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000024c  080135cc  0003024c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d733  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034bc  00000000  00000000  0004d767  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002e8  00000000  00000000  00050c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006dc3  00000000  00000000  00050f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000050e8  00000000  00000000  00057cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  0005cdbb  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00004900  00000000  00000000  0005ce38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00061738  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08013528 	.word	0x08013528

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08013528 	.word	0x08013528

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f002 fa5d 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f842 	bl	8000290 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f011 fdfc 	bl	8011e08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <HAL_DeInit+0x54>)
 8000222:	f04f 32ff 	mov.w	r2, #4294967295
 8000226:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <HAL_DeInit+0x54>)
 800022a:	2200      	movs	r2, #0
 800022c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <HAL_DeInit+0x54>)
 8000230:	f04f 32ff 	mov.w	r2, #4294967295
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <HAL_DeInit+0x54>)
 8000238:	2200      	movs	r2, #0
 800023a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <HAL_DeInit+0x54>)
 800023e:	f04f 32ff 	mov.w	r2, #4294967295
 8000242:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <HAL_DeInit+0x54>)
 8000246:	2200      	movs	r2, #0
 8000248:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <HAL_DeInit+0x54>)
 800024c:	f04f 32ff 	mov.w	r2, #4294967295
 8000250:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <HAL_DeInit+0x54>)
 8000254:	2200      	movs	r2, #0
 8000256:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_DeInit+0x54>)
 800025a:	f04f 32ff 	mov.w	r2, #4294967295
 800025e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <HAL_DeInit+0x54>)
 8000262:	2200      	movs	r2, #0
 8000264:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000266:	f000 f80c 	bl	8000282 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800026a:	2300      	movs	r3, #0
}
 800026c:	4618      	mov	r0, r3
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40023800 	.word	0x40023800
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <HAL_InitTick+0x30>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a09      	ldr	r2, [pc, #36]	; (80002c4 <HAL_InitTick+0x34>)
 800029e:	fba2 2303 	umull	r2, r3, r2, r3
 80002a2:	099b      	lsrs	r3, r3, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fa54 	bl	8002752 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002aa:	2200      	movs	r2, #0
 80002ac:	6879      	ldr	r1, [r7, #4]
 80002ae:	f04f 30ff 	mov.w	r0, #4294967295
 80002b2:	f002 fa10 	bl	80026d6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002b6:	2300      	movs	r3, #0
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000000 	.word	0x20000000
 80002c4:	10624dd3 	.word	0x10624dd3

080002c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  uwTick++;
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <HAL_IncTick+0x18>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <HAL_IncTick+0x18>)
 80002d4:	6013      	str	r3, [r2, #0]
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000020 	.word	0x20000020

080002e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  return uwTick;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <HAL_GetTick+0x14>)
 80002ea:	681b      	ldr	r3, [r3, #0]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000020 	.word	0x20000020

080002fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000304:	f7ff ffee 	bl	80002e4 <HAL_GetTick>
 8000308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000314:	d002      	beq.n	800031c <HAL_Delay+0x20>
  {
     wait++;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffe1 	bl	80002e4 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad2      	subs	r2, r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d3f7      	bcc.n	800031e <HAL_Delay+0x22>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <HAL_SuspendTick+0x1a>)
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <HAL_SuspendTick+0x1a>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f023 0302 	bic.w	r3, r3, #2
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000e010 	.word	0xe000e010

08000354 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000358:	4a05      	ldr	r2, [pc, #20]	; (8000370 <HAL_ResumeTick+0x1c>)
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_ResumeTick+0x1c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000e010 	.word	0xe000e010

08000374 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
 return __STM32F4xx_HAL_VERSION;
 8000378:	4b02      	ldr	r3, [pc, #8]	; (8000384 <HAL_GetHalVersion+0x10>)
}
 800037a:	4618      	mov	r0, r3
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	01070100 	.word	0x01070100

08000388 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <HAL_GetREVID+0x14>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	0c1b      	lsrs	r3, r3, #16
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e0042000 	.word	0xe0042000

080003a0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <HAL_GetDEVID+0x18>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e0042000 	.word	0xe0042000

080003bc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6053      	str	r3, [r2, #4]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e0042000 	.word	0xe0042000

080003dc <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f023 0301 	bic.w	r3, r3, #1
 80003ea:	6053      	str	r3, [r2, #4]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e0042000 	.word	0xe0042000

080003fc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6053      	str	r3, [r2, #4]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e0042000 	.word	0xe0042000

0800041c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f023 0302 	bic.w	r3, r3, #2
 800042a:	6053      	str	r3, [r2, #4]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e0042000 	.word	0xe0042000

0800043c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6053      	str	r3, [r2, #4]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e0042000 	.word	0xe0042000

0800045c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f023 0304 	bic.w	r3, r3, #4
 800046a:	6053      	str	r3, [r2, #4]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e0042000 	.word	0xe0042000

0800047c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	2301      	movs	r3, #1
 8000484:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	fa93 f3a3 	rbit	r3, r3
 800048c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800048e:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000490:	fab3 f383 	clz	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_EnableCompensationCell+0x34>)
 8000498:	4413      	add	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	461a      	mov	r2, r3
 800049e:	2301      	movs	r3, #1
 80004a0:	6013      	str	r3, [r2, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	1089c100 	.word	0x1089c100

080004b4 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	2301      	movs	r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	fa93 f3a3 	rbit	r3, r3
 80004c4:	603b      	str	r3, [r7, #0]
  return(result);
 80004c6:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 80004c8:	fab3 f383 	clz	r3, r3
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <HAL_DisableCompensationCell+0x34>)
 80004d0:	4413      	add	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	461a      	mov	r2, r3
 80004d6:	2300      	movs	r3, #0
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	1089c100 	.word	0x1089c100

080004ec <HAL_GetUID>:
  * @brief Return the unique device identifier (UID based on 96 bits)
  * @param UID: pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <HAL_GetUID+0x30>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	601a      	str	r2, [r3, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3304      	adds	r3, #4
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_GetUID+0x34>)
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	601a      	str	r2, [r3, #0]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3308      	adds	r3, #8
 800050a:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_GetUID+0x38>)
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	1fff7a10 	.word	0x1fff7a10
 8000520:	1fff7a14 	.word	0x1fff7a14
 8000524:	1fff7a18 	.word	0x1fff7a18

08000528 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d101      	bne.n	800053e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e033      	b.n	80005a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f011 fc88 	bl	8011e6a <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	f003 0310 	and.w	r3, r3, #16
 8000562:	2b00      	cmp	r3, #0
 8000564:	d118      	bne.n	8000598 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800056e:	f023 0302 	bic.w	r3, r3, #2
 8000572:	f043 0202 	orr.w	r2, r3, #2
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 ff23 	bl	80013c6 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	f023 0303 	bic.w	r3, r3, #3
 800058e:	f043 0201 	orr.w	r2, r3, #1
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	e001      	b.n	800059c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <HAL_ADC_DeInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b084      	sub	sp, #16
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d101      	bne.n	80005c4 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e022      	b.n	800060a <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f043 0202 	orr.w	r2, r3, #2
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	6812      	ldr	r2, [r2, #0]
 80005d8:	6892      	ldr	r2, [r2, #8]
 80005da:	f022 0201 	bic.w	r2, r2, #1
 80005de:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d108      	bne.n	8000600 <HAL_ADC_DeInit+0x52>
  {
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f011 fc72 	bl	8011ed8 <HAL_ADC_MspDeInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <HAL_ADC_Start+0x1a>
 8000650:	2302      	movs	r3, #2
 8000652:	e089      	b.n	8000768 <HAL_ADC_Start+0x12e>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b01      	cmp	r3, #1
 8000668:	d018      	beq.n	800069c <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	6892      	ldr	r2, [r2, #8]
 8000674:	f042 0201 	orr.w	r2, r2, #1
 8000678:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800067a:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <HAL_ADC_Start+0x13a>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <HAL_ADC_Start+0x13e>)
 8000680:	fba2 2303 	umull	r2, r3, r2, r3
 8000684:	0c9a      	lsrs	r2, r3, #18
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800068e:	e002      	b.n	8000696 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	3b01      	subs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f9      	bne.n	8000690 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d05d      	beq.n	8000766 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b2:	f023 0301 	bic.w	r3, r3, #1
 80006b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d007      	beq.n	80006dc <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d006      	beq.n	80006f6 <HAL_ADC_Start+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ec:	f023 0206 	bic.w	r2, r3, #6
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	645a      	str	r2, [r3, #68]	; 0x44
 80006f4:	e002      	b.n	80006fc <HAL_ADC_Start+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <HAL_ADC_Start+0x142>)
 8000706:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000710:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10f      	bne.n	800073e <HAL_ADC_Start+0x104>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d11c      	bne.n	8000766 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	6892      	ldr	r2, [r2, #8]
 8000736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	e013      	b.n	8000766 <HAL_ADC_Start+0x12c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_ADC_Start+0x146>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d10e      	bne.n	8000766 <HAL_ADC_Start+0x12c>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d107      	bne.n	8000766 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	6892      	ldr	r2, [r2, #8]
 8000760:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000764:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000000 	.word	0x20000000
 8000778:	431bde83 	.word	0x431bde83
 800077c:	40012300 	.word	0x40012300
 8000780:	40012000 	.word	0x40012000

08000784 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000792:	2b01      	cmp	r3, #1
 8000794:	d101      	bne.n	800079a <HAL_ADC_Stop+0x16>
 8000796:	2302      	movs	r3, #2
 8000798:	e021      	b.n	80007de <HAL_ADC_Stop+0x5a>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2201      	movs	r2, #1
 800079e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	6892      	ldr	r2, [r2, #8]
 80007ac:	f022 0201 	bic.w	r2, r2, #1
 80007b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d109      	bne.n	80007d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007c8:	f023 0301 	bic.w	r3, r3, #1
 80007cc:	f043 0201 	orr.w	r2, r3, #1
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000802:	2b00      	cmp	r3, #0
 8000804:	d012      	beq.n	800082c <HAL_ADC_PollForConversion+0x42>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00b      	beq.n	800082c <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f043 0220 	orr.w	r2, r3, #32
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	e05c      	b.n	80008e6 <HAL_ADC_PollForConversion+0xfc>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800082c:	f7ff fd5a 	bl	80002e4 <HAL_GetTick>
 8000830:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000832:	e01a      	b.n	800086a <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083a:	d016      	beq.n	800086a <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d007      	beq.n	8000852 <HAL_ADC_PollForConversion+0x68>
 8000842:	f7ff fd4f 	bl	80002e4 <HAL_GetTick>
 8000846:	4602      	mov	r2, r0
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	d90b      	bls.n	800086a <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f043 0204 	orr.w	r2, r3, #4
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000866:	2303      	movs	r3, #3
 8000868:	e03d      	b.n	80008e6 <HAL_ADC_PollForConversion+0xfc>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	2b02      	cmp	r3, #2
 8000876:	d1dd      	bne.n	8000834 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f06f 0212 	mvn.w	r2, #18
 8000880:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000898:	2b00      	cmp	r3, #0
 800089a:	d123      	bne.n	80008e4 <HAL_ADC_PollForConversion+0xfa>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d11f      	bne.n	80008e4 <HAL_ADC_PollForConversion+0xfa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d006      	beq.n	80008c0 <HAL_ADC_PollForConversion+0xd6>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d111      	bne.n	80008e4 <HAL_ADC_PollForConversion+0xfa>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d105      	bne.n	80008e4 <HAL_ADC_PollForConversion+0xfa>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f043 0201 	orr.w	r2, r3, #1
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_ADC_PollForEvent>:
  *            @arg ADC_OVR_EVENT: ADC Overrun event.
  * @param  Timeout: Timeout value in millisecond.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));

  /* Get tick */
  tickstart = HAL_GetTick();
 80008fe:	f7ff fcf1 	bl	80002e4 <HAL_GetTick>
 8000902:	6178      	str	r0, [r7, #20]

  /* Check selected event flag */
  while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 8000904:	e01a      	b.n	800093c <HAL_ADC_PollForEvent+0x4e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d016      	beq.n	800093c <HAL_ADC_PollForEvent+0x4e>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d007      	beq.n	8000924 <HAL_ADC_PollForEvent+0x36>
 8000914:	f7ff fce6 	bl	80002e4 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	1ad2      	subs	r2, r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	d90b      	bls.n	800093c <HAL_ADC_PollForEvent+0x4e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f043 0204 	orr.w	r2, r3, #4
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2200      	movs	r2, #0
 8000934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000938:	2303      	movs	r3, #3
 800093a:	e028      	b.n	800098e <HAL_ADC_PollForEvent+0xa0>
  while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	401a      	ands	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	429a      	cmp	r2, r3
 800094a:	d1dc      	bne.n	8000906 <HAL_ADC_PollForEvent+0x18>
      }
    }
  }
  
  /* Analog watchdog (level out of window) event */
  if(EventType == ADC_AWD_EVENT)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10b      	bne.n	800096a <HAL_ADC_PollForEvent+0x7c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	641a      	str	r2, [r3, #64]	; 0x40
      
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f06f 0201 	mvn.w	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	e010      	b.n	800098c <HAL_ADC_PollForEvent+0x9e>
  }
  /* Overrun event */
  else
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f043 0202 	orr.w	r2, r3, #2
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f06f 0220 	mvn.w	r2, #32
 800098a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_ADC_Start_IT>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000996:	b480      	push	{r7}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <HAL_ADC_Start_IT+0x1a>
 80009ac:	2302      	movs	r3, #2
 80009ae:	e093      	b.n	8000ad8 <HAL_ADC_Start_IT+0x142>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	6892      	ldr	r2, [r2, #8]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009d6:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <HAL_ADC_Start_IT+0x14e>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a43      	ldr	r2, [pc, #268]	; (8000ae8 <HAL_ADC_Start_IT+0x152>)
 80009dc:	fba2 2303 	umull	r2, r3, r2, r3
 80009e0:	0c9a      	lsrs	r2, r3, #18
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80009ea:	e002      	b.n	80009f2 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f9      	bne.n	80009ec <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d067      	beq.n	8000ad6 <HAL_ADC_Start_IT+0x140>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d007      	beq.n	8000a38 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_ADC_Start_IT+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	f023 0206 	bic.w	r2, r3, #6
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8000a50:	e002      	b.n	8000a58 <HAL_ADC_Start_IT+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_ADC_Start_IT+0x156>)
 8000a62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000a6c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 031f 	and.w	r3, r3, #31
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10f      	bne.n	8000aae <HAL_ADC_Start_IT+0x118>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d11c      	bne.n	8000ad6 <HAL_ADC_Start_IT+0x140>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	6892      	ldr	r2, [r2, #8]
 8000aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	e013      	b.n	8000ad6 <HAL_ADC_Start_IT+0x140>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_ADC_Start_IT+0x15a>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d10e      	bne.n	8000ad6 <HAL_ADC_Start_IT+0x140>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d107      	bne.n	8000ad6 <HAL_ADC_Start_IT+0x140>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	6892      	ldr	r2, [r2, #8]
 8000ad0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ad4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	40012300 	.word	0x40012300
 8000af0:	40012000 	.word	0x40012000

08000af4 <HAL_ADC_Stop_IT>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d101      	bne.n	8000b0a <HAL_ADC_Stop_IT+0x16>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e02b      	b.n	8000b62 <HAL_ADC_Stop_IT+0x6e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	6892      	ldr	r2, [r2, #8]
 8000b1c:	f022 0201 	bic.w	r2, r2, #1
 8000b20:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d113      	bne.n	8000b58 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000b3e:	f023 0320 	bic.w	r3, r3, #32
 8000b42:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	f043 0201 	orr.w	r2, r3, #1
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HAL_ADC_IRQHandler>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	bf0c      	ite	eq
 8000b8c:	2301      	moveq	r3, #1
 8000b8e:	2300      	movne	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0320 	and.w	r3, r3, #32
 8000b9e:	2b20      	cmp	r3, #32
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d049      	beq.n	8000c44 <HAL_ADC_IRQHandler+0xd6>
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d046      	beq.n	8000c44 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d105      	bne.n	8000bce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d12b      	bne.n	8000c34 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d127      	bne.n	8000c34 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d119      	bne.n	8000c34 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	6852      	ldr	r2, [r2, #4]
 8000c0a:	f022 0220 	bic.w	r2, r2, #32
 8000c0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fa04 	bl	8001042 <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f06f 0212 	mvn.w	r2, #18
 8000c42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf0c      	ite	eq
 8000c52:	2301      	moveq	r3, #1
 8000c54:	2300      	movne	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c64:	2b80      	cmp	r3, #128	; 0x80
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d057      	beq.n	8000d26 <HAL_ADC_IRQHandler+0x1b8>
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d054      	beq.n	8000d26 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d139      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d12b      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d124      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d11d      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d119      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	6852      	ldr	r2, [r2, #4]
 8000cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f043 0201 	orr.w	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f001 f8b6 	bl	8001e88 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f06f 020c 	mvn.w	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	bf0c      	ite	eq
 8000d34:	2301      	moveq	r3, #1
 8000d36:	2300      	movne	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	2b40      	cmp	r3, #64	; 0x40
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d017      	beq.n	8000d88 <HAL_ADC_IRQHandler+0x21a>
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d014      	beq.n	8000d88 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10d      	bne.n	8000d88 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f976 	bl	800106a <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f06f 0201 	mvn.w	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0320 	and.w	r3, r3, #32
 8000d92:	2b20      	cmp	r3, #32
 8000d94:	bf0c      	ite	eq
 8000d96:	2301      	moveq	r3, #1
 8000d98:	2300      	movne	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000da8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000dac:	bf0c      	ite	eq
 8000dae:	2301      	moveq	r3, #1
 8000db0:	2300      	movne	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d015      	beq.n	8000de8 <HAL_ADC_IRQHandler+0x27a>
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f043 0202 	orr.w	r2, r3, #2
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f06f 0220 	mvn.w	r2, #32
 8000dd6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f950 	bl	800107e <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f06f 0220 	mvn.w	r2, #32
 8000de6:	601a      	str	r2, [r3, #0]
  }
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <HAL_ADC_Start_DMA+0x1e>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e0b0      	b.n	8000f70 <HAL_ADC_Start_DMA+0x180>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d018      	beq.n	8000e56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	6892      	ldr	r2, [r2, #8]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e34:	4b50      	ldr	r3, [pc, #320]	; (8000f78 <HAL_ADC_Start_DMA+0x188>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a50      	ldr	r2, [pc, #320]	; (8000f7c <HAL_ADC_Start_DMA+0x18c>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9a      	lsrs	r2, r3, #18
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e48:	e002      	b.n	8000e50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f9      	bne.n	8000e4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 8084 	beq.w	8000f6e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e6e:	f023 0301 	bic.w	r3, r3, #1
 8000e72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_ADC_Start_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f023 0206 	bic.w	r2, r3, #6
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
 8000eb0:	e002      	b.n	8000eb8 <HAL_ADC_Start_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_ADC_Start_DMA+0x190>)
 8000ec2:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec8:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <HAL_ADC_Start_DMA+0x194>)
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed0:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <HAL_ADC_Start_DMA+0x198>)
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed8:	4a2c      	ldr	r2, [pc, #176]	; (8000f8c <HAL_ADC_Start_DMA+0x19c>)
 8000eda:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	6852      	ldr	r2, [r2, #4]
 8000ef0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ef4:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	6892      	ldr	r2, [r2, #8]
 8000f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f04:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	334c      	adds	r3, #76	; 0x4c
 8000f10:	4619      	mov	r1, r3
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f001 fe58 	bl	8002bca <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_ADC_Start_DMA+0x156>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d11c      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	6892      	ldr	r2, [r2, #8]
 8000f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e013      	b.n	8000f6e <HAL_ADC_Start_DMA+0x17e>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_ADC_Start_DMA+0x1a0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10e      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x17e>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	6892      	ldr	r2, [r2, #8]
 8000f68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f6c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	40012300 	.word	0x40012300
 8000f84:	080015d1 	.word	0x080015d1
 8000f88:	08001677 	.word	0x08001677
 8000f8c:	08001693 	.word	0x08001693
 8000f90:	40012000 	.word	0x40012000

08000f94 <HAL_ADC_Stop_DMA>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_Stop_DMA+0x1a>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e038      	b.n	8001020 <HAL_ADC_Stop_DMA+0x8c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	6892      	ldr	r2, [r2, #8]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d120      	bne.n	8001016 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	6892      	ldr	r2, [r2, #8]
 8000fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fe4e 	bl	8002c8a <HAL_DMA_Abort>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	6852      	ldr	r2, [r2, #4]
 8000ffc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001000:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001092:	b490      	push	{r4, r7}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x1c>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e107      	b.n	80012be <HAL_ADC_ConfigChannel+0x22c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b09      	cmp	r3, #9
 80010bc:	d926      	bls.n	800110c <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68d9      	ldr	r1, [r3, #12]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4403      	add	r3, r0
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	2007      	movs	r0, #7
 80010da:	fa00 f303 	lsl.w	r3, r0, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	400b      	ands	r3, r1
 80010e2:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6898      	ldr	r0, [r3, #8]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461c      	mov	r4, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4423      	add	r3, r4
 8001100:	3b1e      	subs	r3, #30
 8001102:	fa00 f303 	lsl.w	r3, r0, r3
 8001106:	430b      	orrs	r3, r1
 8001108:	60d3      	str	r3, [r2, #12]
 800110a:	e023      	b.n	8001154 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6919      	ldr	r1, [r3, #16]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	4603      	mov	r3, r0
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4403      	add	r3, r0
 8001124:	2007      	movs	r0, #7
 8001126:	fa00 f303 	lsl.w	r3, r0, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	400b      	ands	r3, r1
 800112e:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	6898      	ldr	r0, [r3, #8]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	461c      	mov	r4, r3
 8001146:	4623      	mov	r3, r4
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4423      	add	r3, r4
 800114c:	fa00 f303 	lsl.w	r3, r0, r3
 8001150:	430b      	orrs	r3, r1
 8001152:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b06      	cmp	r3, #6
 800115a:	d824      	bhi.n	80011a6 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	3b05      	subs	r3, #5
 8001172:	221f      	movs	r2, #31
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4003      	ands	r3, r0
 800117c:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	461c      	mov	r4, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	3b05      	subs	r3, #5
 800119c:	fa04 f303 	lsl.w	r3, r4, r3
 80011a0:	4303      	orrs	r3, r0
 80011a2:	634b      	str	r3, [r1, #52]	; 0x34
 80011a4:	e04c      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d824      	bhi.n	80011f8 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b23      	subs	r3, #35	; 0x23
 80011c4:	221f      	movs	r2, #31
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4003      	ands	r3, r0
 80011ce:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	461c      	mov	r4, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	; 0x23
 80011ee:	fa04 f303 	lsl.w	r3, r4, r3
 80011f2:	4303      	orrs	r3, r0
 80011f4:	630b      	str	r3, [r1, #48]	; 0x30
 80011f6:	e023      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b41      	subs	r3, #65	; 0x41
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	4003      	ands	r3, r0
 8001218:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	461c      	mov	r4, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	fa04 f303 	lsl.w	r3, r4, r3
 800123c:	4303      	orrs	r3, r0
 800123e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_ADC_ConfigChannel+0x236>)
 8001242:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a20      	ldr	r2, [pc, #128]	; (80012cc <HAL_ADC_ConfigChannel+0x23a>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d109      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x1d0>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b12      	cmp	r3, #18
 8001254:	d105      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_ADC_ConfigChannel+0x23a>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d123      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x222>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b10      	cmp	r3, #16
 8001272:	d003      	beq.n	800127c <HAL_ADC_ConfigChannel+0x1ea>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b11      	cmp	r3, #17
 800127a:	d11b      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b10      	cmp	r3, #16
 800128e:	d111      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_ADC_ConfigChannel+0x23e>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_ADC_ConfigChannel+0x242>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9a      	lsrs	r2, r3, #18
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012a6:	e002      	b.n	80012ae <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f9      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc90      	pop	{r4, r7}
 80012c6:	4770      	bx	lr
 80012c8:	40012300 	.word	0x40012300
 80012cc:	40012000 	.word	0x40012000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig : pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_AnalogWDGConfig+0x18>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e04c      	b.n	800138a <HAL_ADC_AnalogWDGConfig+0xb2>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d108      	bne.n	8001312 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	6852      	ldr	r2, [r2, #4]
 800130a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	e007      	b.n	8001322 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	6852      	ldr	r2, [r2, #4]
 800131c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001320:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001334:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	6851      	ldr	r1, [r2, #4]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	6852      	ldr	r2, [r2, #4]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	6892      	ldr	r2, [r2, #8]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	6852      	ldr	r2, [r2, #4]
 8001366:	f022 021f 	bic.w	r2, r2, #31
 800136a:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	6852      	ldr	r2, [r2, #4]
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	68c9      	ldr	r1, [r1, #12]
 800137a:	b289      	uxth	r1, r1
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_ADC_GetState>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_ADC_GetError>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ce:	4b7e      	ldr	r3, [pc, #504]	; (80015c8 <ADC_Init+0x202>)
 80013d0:	617b      	str	r3, [r7, #20]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	6852      	ldr	r2, [r2, #4]
 80013f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	6851      	ldr	r1, [r2, #4]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6912      	ldr	r2, [r2, #16]
 800140a:	0212      	lsls	r2, r2, #8
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	6852      	ldr	r2, [r2, #4]
 800141a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800141e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	6851      	ldr	r1, [r2, #4]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6892      	ldr	r2, [r2, #8]
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	6892      	ldr	r2, [r2, #8]
 800143c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	6891      	ldr	r1, [r2, #8]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68d2      	ldr	r2, [r2, #12]
 8001450:	430a      	orrs	r2, r1
 8001452:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <ADC_Init+0x206>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d022      	beq.n	80014a4 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	6892      	ldr	r2, [r2, #8]
 8001468:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800146c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	6891      	ldr	r1, [r2, #8]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	6892      	ldr	r2, [r2, #8]
 800148a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800148e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	6891      	ldr	r1, [r2, #8]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800149e:	430a      	orrs	r2, r1
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	e00f      	b.n	80014c4 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	6892      	ldr	r2, [r2, #8]
 80014ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	6892      	ldr	r2, [r2, #8]
 80014be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014c2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	6892      	ldr	r2, [r2, #8]
 80014ce:	f022 0202 	bic.w	r2, r2, #2
 80014d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	6891      	ldr	r1, [r2, #8]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6992      	ldr	r2, [r2, #24]
 80014e2:	0052      	lsls	r2, r2, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d025      	beq.n	800153c <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6852      	ldr	r2, [r2, #4]
 80014fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	6852      	ldr	r2, [r2, #4]
 800150a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800150e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800151a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	60fb      	str	r3, [r7, #12]
  return(result);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	409a      	lsls	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	6809      	ldr	r1, [r1, #0]
 8001534:	6849      	ldr	r1, [r1, #4]
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	e007      	b.n	800154c <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	6852      	ldr	r2, [r2, #4]
 8001546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001556:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	69d2      	ldr	r2, [r2, #28]
 800156a:	3a01      	subs	r2, #1
 800156c:	0512      	lsls	r2, r2, #20
 800156e:	430a      	orrs	r2, r1
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	6892      	ldr	r2, [r2, #8]
 800157c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	6891      	ldr	r1, [r2, #8]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001590:	0252      	lsls	r2, r2, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	6892      	ldr	r2, [r2, #8]
 80015a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	6891      	ldr	r1, [r2, #8]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6952      	ldr	r2, [r2, #20]
 80015b4:	0292      	lsls	r2, r2, #10
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40012300 	.word	0x40012300
 80015cc:	0f000001 	.word	0x0f000001

080015d0 <ADC_DMAConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d13c      	bne.n	8001664 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d12b      	bne.n	800165c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001608:	2b00      	cmp	r3, #0
 800160a:	d127      	bne.n	800165c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001624:	2b00      	cmp	r3, #0
 8001626:	d119      	bne.n	800165c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	6852      	ldr	r2, [r2, #4]
 8001632:	f022 0220 	bic.w	r2, r2, #32
 8001636:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fcf0 	bl	8001042 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001662:	e004      	b.n	800166e <ADC_DMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fce6 	bl	8001056 <HAL_ADC_ConvHalfCpltCallback>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f043 0204 	orr.w	r2, r3, #4
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff fce3 	bl	800107e <HAL_ADC_ErrorCallback>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_ADCEx_InjectedStart>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADCEx_InjectedStart+0x22>
 80016de:	2302      	movs	r3, #2
 80016e0:	e09d      	b.n	800181e <HAL_ADCEx_InjectedStart+0x15e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d018      	beq.n	800172a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	6892      	ldr	r2, [r2, #8]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_ADCEx_InjectedStart+0x16c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_ADCEx_InjectedStart+0x170>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9a      	lsrs	r2, r3, #18
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800171c:	e002      	b.n	8001724 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3b01      	subs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d071      	beq.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f06f 0204 	mvn.w	r2, #4
 800176e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_ADCEx_InjectedStart+0x174>)
 8001772:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2b00      	cmp	r3, #0
 800177e:	d124      	bne.n	80017ca <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d034      	beq.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d031      	beq.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	6892      	ldr	r2, [r2, #8]
 80017c2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e028      	b.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf0c      	ite	eq
 80017ee:	2301      	moveq	r3, #1
 80017f0:	2300      	movne	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_ADCEx_InjectedStart+0x178>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10d      	bne.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00a      	beq.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	6892      	ldr	r2, [r2, #8]
 8001816:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800181a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000
 8001830:	431bde83 	.word	0x431bde83
 8001834:	40012300 	.word	0x40012300
 8001838:	40012000 	.word	0x40012000

0800183c <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADCEx_InjectedStart_IT+0x22>
 800185a:	2302      	movs	r3, #2
 800185c:	e0a5      	b.n	80019aa <HAL_ADCEx_InjectedStart_IT+0x16e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d018      	beq.n	80018a6 <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	6892      	ldr	r2, [r2, #8]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_ADCEx_InjectedStart_IT+0x17c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_ADCEx_InjectedStart_IT+0x180>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0c9a      	lsrs	r2, r3, #18
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001898:	e002      	b.n	80018a0 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d079      	beq.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f06f 0204 	mvn.w	r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	6852      	ldr	r2, [r2, #4]
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_ADCEx_InjectedStart_IT+0x184>)
 80018fe:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2b00      	cmp	r3, #0
 800190a:	d124      	bne.n	8001956 <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d034      	beq.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d031      	beq.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	6892      	ldr	r2, [r2, #8]
 800194e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e028      	b.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_ADCEx_InjectedStart_IT+0x188>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10d      	bne.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	6892      	ldr	r2, [r2, #8]
 80019a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019a6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	431bde83 	.word	0x431bde83
 80019c0:	40012300 	.word	0x40012300
 80019c4:	40012000 	.word	0x40012000

080019c8 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADCEx_InjectedStop+0x1a>
 80019de:	2302      	movs	r3, #2
 80019e0:	e037      	b.n	8001a52 <HAL_ADCEx_InjectedStop+0x8a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d120      	bne.n	8001a38 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d119      	bne.n	8001a38 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	6892      	ldr	r2, [r2, #8]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d112      	bne.n	8001a48 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a36:	e007      	b.n	8001a48 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0220 	orr.w	r2, r3, #32
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_ADCEx_InjectedPollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a6c:	f7fe fc3a 	bl	80002e4 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8001a72:	e017      	b.n	8001aa4 <HAL_ADCEx_InjectedPollForConversion+0x46>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d013      	beq.n	8001aa4 <HAL_ADCEx_InjectedPollForConversion+0x46>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_ADCEx_InjectedPollForConversion+0x34>
 8001a82:	f7fe fc2f 	bl	80002e4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d908      	bls.n	8001aa4 <HAL_ADCEx_InjectedPollForConversion+0x46>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2204      	movs	r2, #4
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e04b      	b.n	8001b3c <HAL_ADCEx_InjectedPollForConversion+0xde>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d1e0      	bne.n	8001a74 <HAL_ADCEx_InjectedPollForConversion+0x16>
      }
    }
  }
  
  /* Clear injected group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 020c 	mvn.w	r2, #12
 8001aba:	601a      	str	r2, [r3, #0]
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d131      	bne.n	8001b3a <HAL_ADCEx_InjectedPollForConversion+0xdc>
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_ADCEx_InjectedPollForConversion+0x94>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d123      	bne.n	8001b3a <HAL_ADCEx_InjectedPollForConversion+0xdc>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11c      	bne.n	8001b3a <HAL_ADCEx_InjectedPollForConversion+0xdc>
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_ADCEx_InjectedPollForConversion+0xdc>
      (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d111      	bne.n	8001b3a <HAL_ADCEx_InjectedPollForConversion+0xdc>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_ADCEx_InjectedPollForConversion+0xdc>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}      
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADCEx_InjectedStop_IT+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e03f      	b.n	8001bde <HAL_ADCEx_InjectedStop_IT+0x9a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d128      	bne.n	8001bc4 <HAL_ADCEx_InjectedStop_IT+0x80>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d121      	bne.n	8001bc4 <HAL_ADCEx_InjectedStop_IT+0x80>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	6892      	ldr	r2, [r2, #8]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d11a      	bne.n	8001bd4 <HAL_ADCEx_InjectedStop_IT+0x90>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	6852      	ldr	r2, [r2, #4]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADCEx_InjectedStop_IT+0x90>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f043 0220 	orr.w	r2, r3, #32
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0204 	mvn.w	r2, #4
 8001c00:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d81e      	bhi.n	8001c48 <HAL_ADCEx_InjectedGetValue+0x5e>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <HAL_ADCEx_InjectedGetValue+0x26>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c3f 	.word	0x08001c3f
 8001c14:	08001c35 	.word	0x08001c35
 8001c18:	08001c2b 	.word	0x08001c2b
 8001c1c:	08001c21 	.word	0x08001c21
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c28:	e00f      	b.n	8001c4a <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c32:	e00a      	b.n	8001c4a <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001c3c:	e005      	b.n	8001c4a <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001c46:	e000      	b.n	8001c4a <HAL_ADCEx_InjectedGetValue+0x60>
    default:
    break;  
 8001c48:	bf00      	nop
  }
  return tmp;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData:   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length:  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e09c      	b.n	8001db0 <HAL_ADCEx_MultiModeStart_DMA+0x158>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d018      	beq.n	8001cbe <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6892      	ldr	r2, [r2, #8]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9a      	lsrs	r2, r3, #18
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d070      	beq.n	8001dae <HAL_ADCEx_MultiModeStart_DMA+0x156>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <HAL_ADCEx_MultiModeStart_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f023 0206 	bic.w	r2, r3, #6
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
 8001d16:	e002      	b.n	8001d1e <HAL_ADCEx_MultiModeStart_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8001d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8001d3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0202 	mvn.w	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	6852      	ldr	r2, [r2, #4]
 8001d52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d56:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8001d5a:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	e005      	b.n	8001d7e <HAL_ADCEx_MultiModeStart_DMA+0x126>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3308      	adds	r3, #8
 8001d86:	4619      	mov	r1, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f000 ff1d 	bl	8002bca <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_ADCEx_MultiModeStart_DMA+0x156>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	6892      	ldr	r2, [r2, #8]
 8001da8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dac:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	08002251 	.word	0x08002251
 8001dc4:	080022f7 	.word	0x080022f7
 8001dc8:	08002313 	.word	0x08002313
 8001dcc:	40012300 	.word	0x40012300

08001dd0 <HAL_ADCEx_MultiModeStop_DMA>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADCEx_MultiModeStop_DMA+0x1a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e038      	b.n	8001e5c <HAL_ADCEx_MultiModeStop_DMA+0x8c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	6892      	ldr	r2, [r2, #8]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	609a      	str	r2, [r3, #8]

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_ADCEx_MultiModeStop_DMA+0x94>)
 8001e04:	60bb      	str	r3, [r7, #8]

  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11e      	bne.n	8001e52 <HAL_ADCEx_MultiModeStop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode for multimode */
    tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	605a      	str	r2, [r3, #4]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 ff30 	bl	8002c8a <HAL_DMA_Abort>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	6852      	ldr	r2, [r2, #4]
 8001e38:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001e3c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40012300 	.word	0x40012300

08001e68 <HAL_ADCEx_MultiModeGetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval The converted data value.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_ADCEx_MultiModeGetValue+0x1c>)
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300

08001e88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected: ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001e9c:	b490      	push	{r4, r7}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e17c      	b.n	80021ae <HAL_ADCEx_InjectedConfigChannel+0x312>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d926      	bls.n	8001f12 <HAL_ADCEx_InjectedConfigChannel+0x76>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4403      	add	r3, r0
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	2007      	movs	r0, #7
 8001ee0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461c      	mov	r4, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4423      	add	r3, r4
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f303 	lsl.w	r3, r0, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e023      	b.n	8001f5a <HAL_ADCEx_InjectedConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	400b      	ands	r3, r1
 8001f34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	fa00 f303 	lsl.w	r3, r0, r3
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6912      	ldr	r2, [r2, #16]
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	0512      	lsls	r2, r2, #20
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	b2d8      	uxtb	r0, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	1ac3      	subs	r3, r0, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4403      	add	r3, r0
 8001fa6:	201f      	movs	r0, #31
 8001fa8:	fa00 f303 	lsl.w	r3, r0, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	400b      	ands	r3, r1
 8001fb0:	6393      	str	r3, [r2, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	b2d8      	uxtb	r0, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	1ac3      	subs	r3, r0, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3303      	adds	r3, #3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4403      	add	r3, r0
 8001fe0:	fa04 f303 	lsl.w	r3, r4, r3
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6393      	str	r3, [r2, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d022      	beq.n	8002038 <HAL_ADCEx_InjectedConfigChannel+0x19c>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	6892      	ldr	r2, [r2, #8]
 8001ffc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	6891      	ldr	r1, [r2, #8]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	69d2      	ldr	r2, [r2, #28]
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	6892      	ldr	r2, [r2, #8]
 800201e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	6891      	ldr	r1, [r2, #8]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6a12      	ldr	r2, [r2, #32]
 8002032:	430a      	orrs	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	e00f      	b.n	8002058 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	6892      	ldr	r2, [r2, #8]
 8002042:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002046:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002056:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_ADCEx_InjectedConfigChannel+0x1d6>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	6852      	ldr	r2, [r2, #4]
 800206a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	e007      	b.n	8002082 <HAL_ADCEx_InjectedConfigChannel+0x1e6>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	6852      	ldr	r2, [r2, #4]
 800207c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002080:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_ADCEx_InjectedConfigChannel+0x200>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	6852      	ldr	r2, [r2, #4]
 8002094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	e007      	b.n	80020ac <HAL_ADCEx_InjectedConfigChannel+0x210>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	6852      	ldr	r2, [r2, #4]
 80020a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020aa:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d017      	beq.n	80020e4 <HAL_ADCEx_InjectedConfigChannel+0x248>
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d029      	beq.n	800210c <HAL_ADCEx_InjectedConfigChannel+0x270>
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d13b      	bne.n	8002134 <HAL_ADCEx_InjectedConfigChannel+0x298>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80020ca:	f023 030f 	bic.w	r3, r3, #15
 80020ce:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	6951      	ldr	r1, [r2, #20]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	430a      	orrs	r2, r1
 80020e0:	615a      	str	r2, [r3, #20]
      break;
 80020e2:	e03b      	b.n	800215c <HAL_ADCEx_InjectedConfigChannel+0x2c0>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80020f2:	f023 030f 	bic.w	r3, r3, #15
 80020f6:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	6991      	ldr	r1, [r2, #24]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	430a      	orrs	r2, r1
 8002108:	619a      	str	r2, [r3, #24]
      break;
 800210a:	e027      	b.n	800215c <HAL_ADCEx_InjectedConfigChannel+0x2c0>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800211a:	f023 030f 	bic.w	r3, r3, #15
 800211e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	69d1      	ldr	r1, [r2, #28]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	430a      	orrs	r2, r1
 8002130:	61da      	str	r2, [r3, #28]
      break;
 8002132:	e013      	b.n	800215c <HAL_ADCEx_InjectedConfigChannel+0x2c0>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002142:	f023 030f 	bic.w	r3, r3, #15
 8002146:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	6a11      	ldr	r1, [r2, #32]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	430a      	orrs	r2, r1
 8002158:	621a      	str	r2, [r3, #32]
      break;
 800215a:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800215e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d109      	bne.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b12      	cmp	r3, #18
 8002170:	d105      	bne.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x2e2>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10d      	bne.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x308>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b10      	cmp	r3, #16
 800218e:	d003      	beq.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b11      	cmp	r3, #17
 8002196:	d105      	bne.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x308>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc90      	pop	{r4, r7}
 80021b6:	4770      	bx	lr
 80021b8:	000f0001 	.word	0x000f0001
 80021bc:	40012300 	.word	0x40012300
 80021c0:	40012000 	.word	0x40012000

080021c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode : pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80021d8:	2302      	movs	r3, #2
 80021da:	e031      	b.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 021f 	bic.w	r2, r3, #31
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	431a      	orrs	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40012300 	.word	0x40012300

08002250 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	d13c      	bne.n	80022e4 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d12b      	bne.n	80022dc <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d127      	bne.n	80022dc <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d119      	bne.n	80022dc <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	f022 0220 	bic.w	r2, r2, #32
 80022b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7fe feb0 	bl	8001042 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022e2:	e004      	b.n	80022ee <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7fe fea6 	bl	8001056 <HAL_ADC_ConvHalfCpltCallback>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <ADC_MultiModeDMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f043 0204 	orr.w	r2, r3, #4
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7fe fea3 	bl	800107e <HAL_ADC_ErrorCallback>
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023ae:	4909      	ldr	r1, [pc, #36]	; (80023d4 <NVIC_EnableIRQ+0x30>)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	f002 021f 	and.w	r2, r2, #31
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023e2:	4909      	ldr	r1, [pc, #36]	; (8002408 <NVIC_DisableIRQ+0x30>)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	79fa      	ldrb	r2, [r7, #7]
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	3320      	adds	r3, #32
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100

0800240c <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <NVIC_GetPendingIRQ+0x34>)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	3340      	adds	r3, #64	; 0x40
 8002420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	f003 0301 	and.w	r3, r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800244e:	4909      	ldr	r1, [pc, #36]	; (8002474 <NVIC_SetPendingIRQ+0x30>)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	f002 021f 	and.w	r2, r2, #31
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	3340      	adds	r3, #64	; 0x40
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100

08002478 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002482:	4909      	ldr	r1, [pc, #36]	; (80024a8 <NVIC_ClearPendingIRQ+0x30>)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	3360      	adds	r3, #96	; 0x60
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100

080024ac <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <NVIC_GetActive+0x34>)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	3380      	adds	r3, #128	; 0x80
 80024c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	f003 0301 	and.w	r3, r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da0b      	bge.n	8002510 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	490d      	ldr	r1, [pc, #52]	; (8002530 <NVIC_SetPriority+0x4c>)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	3b04      	subs	r3, #4
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250e:	e009      	b.n	8002524 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	4908      	ldr	r1, [pc, #32]	; (8002534 <NVIC_SetPriority+0x50>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	e000e100 	.word	0xe000e100

08002538 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da0a      	bge.n	8002560 <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800254a:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <NVIC_GetPriority+0x48>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	4413      	add	r3, r2
 8002556:	7e1b      	ldrb	r3, [r3, #24]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e008      	b.n	8002572 <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <NVIC_GetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	4413      	add	r3, r2
 8002568:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800256c:	b2db      	uxtb	r3, r3
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	b2db      	uxtb	r3, r3
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00
 8002584:	e000e100 	.word	0xe000e100

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	2201      	movs	r2, #1
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	401a      	ands	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ce:	2101      	movs	r1, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	1e59      	subs	r1, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b089      	sub	sp, #36	; 0x24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_DecodePriority+0x32>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_DecodePriority+0x34>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	40da      	lsrs	r2, r3
 8002626:	2101      	movs	r1, #1
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	401a      	ands	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	401a      	ands	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	3724      	adds	r7, #36	; 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800265c:	4905      	ldr	r1, [pc, #20]	; (8002674 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <NVIC_SystemReset+0x20>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <NVIC_SystemReset+0x24>)
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
 800266c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002670:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002672:	e7fd      	b.n	8002670 <NVIC_SystemReset+0x1c>
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	05fa0004 	.word	0x05fa0004

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff20 	bl	80024e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fe39 	bl	8002340 <NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff fe4e 	bl	8002388 <NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff48 	bl	8002588 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff feef 	bl	80024e4 <NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fe41 	bl	80023a4 <NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe4d 	bl	80023d8 <NVIC_DisableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800274a:	f7ff ff83 	bl	8002654 <NVIC_SystemReset>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff8e 	bl	800267c <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800276e:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <HAL_MPU_Disable+0x26>)
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_MPU_Disable+0x26>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_MPU_Disable+0x2a>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00
 8002794:	e000ed90 	.word	0xe000ed90

08002798 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_MPU_Enable+0x34>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_MPU_Enable+0x38>)
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_MPU_Enable+0x38>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027ba:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed90 	.word	0xe000ed90
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_MPU_ConfigRegion+0x84>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d028      	beq.n	800283e <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_MPU_ConfigRegion+0x84>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <HAL_MPU_ConfigRegion+0x84>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7b1b      	ldrb	r3, [r3, #12]
 80027fa:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7adb      	ldrb	r3, [r3, #11]
 8002800:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002802:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7a9b      	ldrb	r3, [r3, #10]
 8002808:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800280a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7b5b      	ldrb	r3, [r3, #13]
 8002810:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002812:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7b9b      	ldrb	r3, [r3, #14]
 8002818:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800281a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7bdb      	ldrb	r3, [r3, #15]
 8002820:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002822:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7a5b      	ldrb	r3, [r3, #9]
 8002828:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800282a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7a1b      	ldrb	r3, [r3, #8]
 8002830:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002832:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002838:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800283a:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800283c:	e005      	b.n	800284a <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00U;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_MPU_ConfigRegion+0x84>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_MPU_ConfigRegion+0x84>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed90 	.word	0xe000ed90

0800285c <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8002860:	f7ff fd92 	bl	8002388 <NVIC_GetPriorityGrouping>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4603      	mov	r3, r0
 8002878:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fe5a 	bl	8002538 <NVIC_GetPriority>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	f7ff feae 	bl	80025ea <NVIC_DecodePriority>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fdcd 	bl	8002444 <NVIC_SetPendingIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fda3 	bl	800240c <NVIC_GetPendingIRQ>
 80028c6:	4603      	mov	r3, r0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fdca 	bl	8002478 <NVIC_ClearPendingIRQ>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fdd6 	bl	80024ac <NVIC_GetActive>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d106      	bne.n	8002926 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002918:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002924:	e005      	b.n	8002932 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002926:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	6013      	str	r3, [r2, #0]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002948:	f000 f802 	bl	8002950 <HAL_SYSTICK_Callback>
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7fd fcba 	bl	80002e4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e099      	b.n	8002ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299c:	e00f      	b.n	80029be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299e:	f7fd fca1 	bl	80002e4 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d908      	bls.n	80029be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e078      	b.n	8002ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e8      	bne.n	800299e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <HAL_DMA_Init+0x158>)
 80029d8:	4013      	ands	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4313      	orrs	r3, r2
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 0307 	bic.w	r3, r3, #7
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d117      	bne.n	8002a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00e      	beq.n	8002a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fd4f 	bl	8003508 <DMA_CheckFifoParam>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e016      	b.n	8002ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fd06 	bl	800349c <DMA_CalcBaseAndBitshift>
 8002a90:	4603      	mov	r3, r0
 8002a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	223f      	movs	r2, #63	; 0x3f
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	f010803f 	.word	0xf010803f

08002abc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e03e      	b.n	8002b4c <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	e036      	b.n	8002b4c <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2221      	movs	r2, #33	; 0x21
 8002b1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fcbc 	bl	800349c <DMA_CalcBaseAndBitshift>
 8002b24:	4603      	mov	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	223f      	movs	r2, #63	; 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Start+0x20>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e026      	b.n	8002bc2 <HAL_DMA_Start+0x6e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d115      	bne.n	8002bb4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fc4f 	bl	8003440 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e005      	b.n	8002bc0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Start_IT+0x26>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e048      	b.n	8002c82 <HAL_DMA_Start_IT+0xb8>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d137      	bne.n	8002c74 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fc11 	bl	8003440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	223f      	movs	r2, #63	; 0x3f
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	f042 0216 	orr.w	r2, r2, #22
 8002c38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	6952      	ldr	r2, [r2, #20]
 8002c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c48:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f042 0208 	orr.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e005      	b.n	8002c80 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7fd fb24 	bl	80002e4 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d008      	beq.n	8002cbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e052      	b.n	8002d62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	f022 0216 	bic.w	r2, r2, #22
 8002cca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	6952      	ldr	r2, [r2, #20]
 8002cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_DMA_Abort+0x62>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	f022 0208 	bic.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0c:	e013      	b.n	8002d36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d0e:	f7fd fae9 	bl	80002e4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d90c      	bls.n	8002d36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e015      	b.n	8002d62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e4      	bne.n	8002d0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	223f      	movs	r2, #63	; 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d004      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e00c      	b.n	8002da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b08a      	sub	sp, #40	; 0x28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	460b      	mov	r3, r1
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8002dc0:	f7fd fa90 	bl	80002e4 <HAL_GetTick>
 8002dc4:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d008      	beq.n	8002de4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0bf      	b.n	8002f64 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0b2      	b.n	8002f64 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2220      	movs	r2, #32
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	e005      	b.n	8002e1e <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	2210      	movs	r2, #16
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002e2a:	e05a      	b.n	8002ee2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d017      	beq.n	8002e64 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_DMA_PollForTransfer+0x9c>
 8002e3a:	f7fd fa53 	bl	80002e4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90c      	bls.n	8002e64 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e07f      	b.n	8002f64 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2208      	movs	r2, #8
 8002e70:	409a      	lsls	r2, r3
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <HAL_DMA_PollForTransfer+0x1be>)
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f043 0202 	orr.w	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	4a2e      	ldr	r2, [pc, #184]	; (8002f6c <HAL_DMA_PollForTransfer+0x1be>)
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <HAL_DMA_PollForTransfer+0x1c2>)
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_DMA_PollForTransfer+0x1c2>)
 8002edc:	409a      	lsls	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002ee2:	6a3a      	ldr	r2, [r7, #32]
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_DMA_PollForTransfer+0x14a>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d099      	beq.n	8002e2c <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff febc 	bl	8002c8a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2230      	movs	r2, #48	; 0x30
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e018      	b.n	8002f64 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10e      	bne.n	8002f56 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2230      	movs	r2, #48	; 0x30
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002f54:	e005      	b.n	8002f62 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	00800001 	.word	0x00800001
 8002f70:	00800004 	.word	0x00800004

08002f74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f80:	4b93      	ldr	r3, [pc, #588]	; (80031d0 <HAL_DMA_IRQHandler+0x25c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a93      	ldr	r2, [pc, #588]	; (80031d4 <HAL_DMA_IRQHandler+0x260>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0a9b      	lsrs	r3, r3, #10
 8002f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01a      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2208      	movs	r2, #8
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	4a7c      	ldr	r2, [pc, #496]	; (80031d8 <HAL_DMA_IRQHandler+0x264>)
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	4a75      	ldr	r2, [pc, #468]	; (80031d8 <HAL_DMA_IRQHandler+0x264>)
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0202 	orr.w	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	4a70      	ldr	r2, [pc, #448]	; (80031dc <HAL_DMA_IRQHandler+0x268>)
 800301c:	409a      	lsls	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d012      	beq.n	800304c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	4a68      	ldr	r2, [pc, #416]	; (80031dc <HAL_DMA_IRQHandler+0x268>)
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0204 	orr.w	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	2210      	movs	r2, #16
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d043      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d03c      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2210      	movs	r2, #16
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d018      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d024      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
 80030a2:	e01f      	b.n	80030e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
 80030b4:	e016      	b.n	80030e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f022 0208 	bic.w	r2, r2, #8
 80030d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	2220      	movs	r2, #32
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8094 	beq.w	800321e <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 808c 	beq.w	800321e <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2220      	movs	r2, #32
 800310c:	409a      	lsls	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b05      	cmp	r3, #5
 800311c:	d137      	bne.n	800318e <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	f022 0216 	bic.w	r2, r2, #22
 800312c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	6952      	ldr	r2, [r2, #20]
 8003138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800313c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HAL_DMA_IRQHandler+0x1da>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	f022 0208 	bic.w	r2, r2, #8
 800315c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	223f      	movs	r2, #63	; 0x3f
 8003164:	409a      	lsls	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8083 	beq.w	800328a <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
        }
        return;
 800318c:	e07d      	b.n	800328a <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d021      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d035      	beq.n	800321e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
 80031ba:	e030      	b.n	800321e <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e027      	b.n	800321e <HAL_DMA_IRQHandler+0x2aa>
 80031ce:	bf00      	nop
 80031d0:	20000000 	.word	0x20000000
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
 80031d8:	00800001 	.word	0x00800001
 80031dc:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f022 0210 	bic.w	r2, r2, #16
 80031fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	2b00      	cmp	r3, #0
 8003224:	d032      	beq.n	800328c <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d022      	beq.n	8003278 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2205      	movs	r2, #5
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4293      	cmp	r3, r2
 8003254:	d807      	bhi.n	8003266 <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f2      	bne.n	800324a <HAL_DMA_IRQHandler+0x2d6>
 8003264:	e000      	b.n	8003268 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8003266:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	e000      	b.n	800328c <HAL_DMA_IRQHandler+0x318>
        return;
 800328a:	bf00      	nop
    }
  }
}
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	460b      	mov	r3, r1
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_DMA_RegisterCallback+0x20>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e03d      	b.n	800332e <HAL_DMA_RegisterCallback+0x9c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12a      	bne.n	800331c <HAL_DMA_RegisterCallback+0x8a>
  {
    switch (CallbackID)
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d82a      	bhi.n	8003322 <HAL_DMA_RegisterCallback+0x90>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <HAL_DMA_RegisterCallback+0x42>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032ed 	.word	0x080032ed
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	080032fd 	.word	0x080032fd
 80032e0:	08003305 	.word	0x08003305
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003315 	.word	0x08003315
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80032f2:	e017      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80032fa:	e013      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8003302:	e00f      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800330a:	e00b      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8003312:	e007      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800331a:	e003      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
 8003320:	e000      	b.n	8003324 <HAL_DMA_RegisterCallback+0x92>
      break;
 8003322:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_DMA_UnRegisterCallback+0x1e>
 8003354:	2302      	movs	r3, #2
 8003356:	e053      	b.n	8003400 <HAL_DMA_UnRegisterCallback+0xc6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d142      	bne.n	80033f2 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d83b      	bhi.n	80033ea <HAL_DMA_UnRegisterCallback+0xb0>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_DMA_UnRegisterCallback+0x3e>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003395 	.word	0x08003395
 800337c:	0800339d 	.word	0x0800339d
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033b5 	.word	0x080033b5
 800338c:	080033bd 	.word	0x080033bd
 8003390:	080033c5 	.word	0x080033c5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800339a:	e02c      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80033a2:	e028      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80033aa:	e024      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80033b2:	e020      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80033ba:	e01c      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80033c2:	e018      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80033e8:	e005      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
      break;
 80033ee:	bf00      	nop
 80033f0:	e001      	b.n	80033f6 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341a:	b2db      	uxtb	r3, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800345c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <DMA_CalcBaseAndBitshift+0x64>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d909      	bls.n	80034de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	; 0x58
 80034dc:	e007      	b.n	80034ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	aaaaaaab 	.word	0xaaaaaaab
 8003504:	08013540 	.word	0x08013540

08003508 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d855      	bhi.n	80035d4 <DMA_CheckFifoParam+0xcc>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <DMA_CheckFifoParam+0x28>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003541 	.word	0x08003541
 800353c:	080035d5 	.word	0x080035d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d045      	beq.n	80035d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e042      	b.n	80035d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800355a:	d13f      	bne.n	80035dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e03c      	b.n	80035dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356a:	d121      	bne.n	80035b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d836      	bhi.n	80035e0 <DMA_CheckFifoParam+0xd8>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <DMA_CheckFifoParam+0x70>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003589 	.word	0x08003589
 800357c:	0800358f 	.word	0x0800358f
 8003580:	08003589 	.word	0x08003589
 8003584:	080035a1 	.word	0x080035a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e02f      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d024      	beq.n	80035e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e021      	b.n	80035e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a8:	d11e      	bne.n	80035e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ae:	e01b      	b.n	80035e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d902      	bls.n	80035bc <DMA_CheckFifoParam+0xb4>
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d003      	beq.n	80035c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035ba:	e018      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	e015      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00e      	beq.n	80035ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      break;
 80035d2:	e00b      	b.n	80035ec <DMA_CheckFifoParam+0xe4>
      break;
 80035d4:	bf00      	nop
 80035d6:	e00a      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035d8:	bf00      	nop
 80035da:	e008      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035dc:	bf00      	nop
 80035de:	e006      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035e0:	bf00      	nop
 80035e2:	e004      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035e4:	bf00      	nop
 80035e6:	e002      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;   
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035ec:	bf00      	nop
    }
  } 
  
  return status; 
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e159      	b.n	80038cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003618:	2201      	movs	r2, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	f040 8148 	bne.w	80038c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x4a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b12      	cmp	r3, #18
 8003644:	d123      	bne.n	800368e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	08da      	lsrs	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3208      	adds	r2, #8
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00b      	beq.n	80036e2 <HAL_GPIO_Init+0xe6>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036d6:	2b11      	cmp	r3, #17
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b12      	cmp	r3, #18
 80036e0:	d130      	bne.n	8003744 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 0201 	and.w	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a2 	beq.w	80038c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4a56      	ldr	r2, [pc, #344]	; (80038e0 <HAL_GPIO_Init+0x2e4>)
 8003788:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <HAL_GPIO_Init+0x2e4>)
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003790:	6453      	str	r3, [r2, #68]	; 0x44
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_GPIO_Init+0x2e4>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800379e:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a48      	ldr	r2, [pc, #288]	; (80038e8 <HAL_GPIO_Init+0x2ec>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x202>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a47      	ldr	r2, [pc, #284]	; (80038ec <HAL_GPIO_Init+0x2f0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x1fe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a46      	ldr	r2, [pc, #280]	; (80038f0 <HAL_GPIO_Init+0x2f4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a45      	ldr	r2, [pc, #276]	; (80038f4 <HAL_GPIO_Init+0x2f8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x1f6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <HAL_GPIO_Init+0x2fc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x1f2>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e008      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e004      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e002      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fe:	2300      	movs	r3, #0
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f002 0203 	and.w	r2, r2, #3
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	4093      	lsls	r3, r2
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003810:	4934      	ldr	r1, [pc, #208]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_GPIO_Init+0x300>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003842:	4a2e      	ldr	r2, [pc, #184]	; (80038fc <HAL_GPIO_Init+0x300>)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_GPIO_Init+0x300>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386c:	4a23      	ldr	r2, [pc, #140]	; (80038fc <HAL_GPIO_Init+0x300>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_GPIO_Init+0x300>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003896:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_GPIO_Init+0x300>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_GPIO_Init+0x300>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038c0:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_GPIO_Init+0x300>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	f67f aea2 	bls.w	8003618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d4:	bf00      	nop
 80038d6:	3724      	adds	r7, #36	; 0x24
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40013800 	.word	0x40013800
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40013c00 	.word	0x40013c00

08003900 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e0bc      	b.n	8003a96 <HAL_GPIO_DeInit+0x196>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800391c:	2201      	movs	r2, #1
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	f040 80ac 	bne.w	8003a90 <HAL_GPIO_DeInit+0x190>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2103      	movs	r1, #3
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	401a      	ands	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	08d9      	lsrs	r1, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3108      	adds	r1, #8
 800395a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	200f      	movs	r0, #15
 8003968:	fa00 f303 	lsl.w	r3, r0, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	4019      	ands	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3208      	adds	r2, #8
 8003974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2103      	movs	r1, #3
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	2101      	movs	r1, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	401a      	ands	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2103      	movs	r1, #3
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_GPIO_DeInit+0x1ac>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <HAL_GPIO_DeInit+0x1b0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d019      	beq.n	8003a16 <HAL_GPIO_DeInit+0x116>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a33      	ldr	r2, [pc, #204]	; (8003ab4 <HAL_GPIO_DeInit+0x1b4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_DeInit+0x112>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <HAL_GPIO_DeInit+0x1b8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_DeInit+0x10e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a31      	ldr	r2, [pc, #196]	; (8003abc <HAL_GPIO_DeInit+0x1bc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_DeInit+0x10a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_GPIO_DeInit+0x1c0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_DeInit+0x106>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e008      	b.n	8003a18 <HAL_GPIO_DeInit+0x118>
 8003a06:	2307      	movs	r3, #7
 8003a08:	e006      	b.n	8003a18 <HAL_GPIO_DeInit+0x118>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e004      	b.n	8003a18 <HAL_GPIO_DeInit+0x118>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_DeInit+0x118>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_DeInit+0x118>
 8003a16:	2300      	movs	r3, #0
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	f002 0203 	and.w	r2, r2, #3
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	fa03 f202 	lsl.w	r2, r3, r2
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d132      	bne.n	8003a90 <HAL_GPIO_DeInit+0x190>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	220f      	movs	r2, #15
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a3a:	481c      	ldr	r0, [pc, #112]	; (8003aac <HAL_GPIO_DeInit+0x1ac>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	491a      	ldr	r1, [pc, #104]	; (8003aac <HAL_GPIO_DeInit+0x1ac>)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	0892      	lsrs	r2, r2, #2
 8003a46:	3202      	adds	r2, #2
 8003a48:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	43d2      	mvns	r2, r2
 8003a50:	400a      	ands	r2, r1
 8003a52:	3302      	adds	r3, #2
 8003a54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a58:	491a      	ldr	r1, [pc, #104]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	4013      	ands	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a66:	4917      	ldr	r1, [pc, #92]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	4013      	ands	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a74:	4913      	ldr	r1, [pc, #76]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4013      	ands	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a82:	4910      	ldr	r1, [pc, #64]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	3301      	adds	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	f67f af3f 	bls.w	800391c <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e001      	b.n	8003aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	405a      	eors	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	615a      	str	r2, [r3, #20]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8003b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8003b60:	887a      	ldrh	r2, [r7, #2]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bb4:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f807 	bl	8003bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop

08003be8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0c8      	b.n	8003d94 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f00e f97c 	bl	8011f14 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c34:	f005 fb72 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 8003c38:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_I2C_Init+0x1b4>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9b      	lsrs	r3, r3, #18
 8003c44:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4952      	ldr	r1, [pc, #328]	; (8003da0 <HAL_I2C_Init+0x1b8>)
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	d802      	bhi.n	8003c62 <HAL_I2C_Init+0x7a>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	e009      	b.n	8003c76 <HAL_I2C_Init+0x8e>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	494d      	ldr	r1, [pc, #308]	; (8003da4 <HAL_I2C_Init+0x1bc>)
 8003c6e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	3301      	adds	r3, #1
 8003c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a47      	ldr	r2, [pc, #284]	; (8003da0 <HAL_I2C_Init+0x1b8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d812      	bhi.n	8003cac <HAL_I2C_Init+0xc4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d906      	bls.n	8003ca8 <HAL_I2C_Init+0xc0>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	e045      	b.n	8003d34 <HAL_I2C_Init+0x14c>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	e043      	b.n	8003d34 <HAL_I2C_Init+0x14c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10f      	bne.n	8003cd4 <HAL_I2C_Init+0xec>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e010      	b.n	8003cf6 <HAL_I2C_Init+0x10e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009a      	lsls	r2, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Init+0x116>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e01a      	b.n	8003d34 <HAL_I2C_Init+0x14c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_I2C_Init+0x134>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1a:	e00b      	b.n	8003d34 <HAL_I2C_Init+0x14c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d34:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	69d1      	ldr	r1, [r2, #28]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6a12      	ldr	r2, [r2, #32]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6911      	ldr	r1, [r2, #16]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68d2      	ldr	r2, [r2, #12]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6951      	ldr	r1, [r2, #20]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6992      	ldr	r2, [r2, #24]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	431bde83 	.word	0x431bde83
 8003da0:	000186a0 	.word	0x000186a0
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_I2C_DeInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e021      	b.n	8003dfe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2224      	movs	r2, #36	; 0x24
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f00e f8d0 	bl	8011f78 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b088      	sub	sp, #32
 8003e32:	af02      	add	r7, sp, #8
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	817b      	strh	r3, [r7, #10]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e46:	f7fc fa4d 	bl	80002e4 <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	f040 80ee 	bne.w	8004036 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2319      	movs	r3, #25
 8003e60:	2201      	movs	r2, #1
 8003e62:	4977      	ldr	r1, [pc, #476]	; (8004040 <HAL_I2C_Master_Transmit+0x212>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f004 fbf6 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0e1      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2C_Master_Transmit+0x54>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0da      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d007      	beq.n	8003ea8 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2221      	movs	r2, #33	; 0x21
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	893a      	ldrh	r2, [r7, #8]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a59      	ldr	r2, [pc, #356]	; (8004044 <HAL_I2C_Master_Transmit+0x216>)
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eea:	8979      	ldrh	r1, [r7, #10]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f004 f801 	bl	8007ef8 <I2C_MasterRequestWrite>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00f      	beq.n	8003f1c <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d105      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e093      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e08d      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8003f32:	e066      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f004 fc4b 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d109      	bne.n	8003f60 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e06b      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e069      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	1c58      	adds	r0, r3, #1
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	6248      	str	r0, [r1, #36]	; 0x24
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d119      	bne.n	8003fd2 <HAL_I2C_Master_Transmit+0x1a4>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	1c58      	adds	r0, r3, #1
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	6248      	str	r0, [r1, #36]	; 0x24
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f004 fc39 	bl	800884e <I2C_WaitOnBTFFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00f      	beq.n	8004002 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d109      	bne.n	8003ffe <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e01c      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e01a      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d194      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	00100002 	.word	0x00100002
 8004044:	ffff0000 	.word	0xffff0000

08004048 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
 8004058:	4613      	mov	r3, r2
 800405a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004060:	f7fc f940 	bl	80002e4 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	f040 8215 	bne.w	800449e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2319      	movs	r3, #25
 800407a:	2201      	movs	r2, #1
 800407c:	4985      	ldr	r1, [pc, #532]	; (8004294 <HAL_I2C_Master_Receive+0x24c>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f004 fae9 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	e208      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_I2C_Master_Receive+0x54>
 8004098:	2302      	movs	r3, #2
 800409a:	e201      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d007      	beq.n	80040c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2222      	movs	r2, #34	; 0x22
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2210      	movs	r2, #16
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	893a      	ldrh	r2, [r7, #8]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a68      	ldr	r2, [pc, #416]	; (8004298 <HAL_I2C_Master_Receive+0x250>)
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f003 ff76 	bl	8007ffc <I2C_MasterRequestRead>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00f      	beq.n	8004136 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d105      	bne.n	800412a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e1ba      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1b4      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d113      	bne.n	8004166 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e188      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11b      	bne.n	80041a6 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e168      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d11b      	bne.n	80041e6 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	e148      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 800420c:	e134      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	2b03      	cmp	r3, #3
 8004214:	f200 80eb 	bhi.w	80043ee <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b01      	cmp	r3, #1
 800421e:	d127      	bne.n	8004270 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f004 fb88 	bl	800893a <I2C_WaitOnRXNEFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2b20      	cmp	r3, #32
 8004236:	d101      	bne.n	800423c <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e131      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e12f      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c59      	adds	r1, r3, #1
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	6251      	str	r1, [r2, #36]	; 0x24
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	6912      	ldr	r2, [r2, #16]
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426e:	e103      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b02      	cmp	r3, #2
 8004276:	d14a      	bne.n	800430e <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	4906      	ldr	r1, [pc, #24]	; (800429c <HAL_I2C_Master_Receive+0x254>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f004 f9e7 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e106      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
 8004292:	bf00      	nop
 8004294:	00100002 	.word	0x00100002
 8004298:	ffff0000 	.word	0xffff0000
 800429c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c59      	adds	r1, r3, #1
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	6251      	str	r1, [r2, #36]	; 0x24
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	6912      	ldr	r2, [r2, #16]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c59      	adds	r1, r3, #1
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6251      	str	r1, [r2, #36]	; 0x24
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	6912      	ldr	r2, [r2, #16]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800430c:	e0b4      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	2200      	movs	r2, #0
 8004316:	4964      	ldr	r1, [pc, #400]	; (80044a8 <HAL_I2C_Master_Receive+0x460>)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f004 f99c 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0bb      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	6251      	str	r1, [r2, #36]	; 0x24
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	6912      	ldr	r2, [r2, #16]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2200      	movs	r2, #0
 800436e:	494e      	ldr	r1, [pc, #312]	; (80044a8 <HAL_I2C_Master_Receive+0x460>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f004 f970 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e08f      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	6251      	str	r1, [r2, #36]	; 0x24
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	6912      	ldr	r2, [r2, #16]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	6251      	str	r1, [r2, #36]	; 0x24
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	6912      	ldr	r2, [r2, #16]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ec:	e044      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80043ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f004 faa1 	bl	800893a <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b20      	cmp	r3, #32
 8004404:	d101      	bne.n	800440a <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04a      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e048      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	6251      	str	r1, [r2, #36]	; 0x24
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	6912      	ldr	r2, [r2, #16]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d116      	bne.n	8004478 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	6251      	str	r1, [r2, #36]	; 0x24
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	6912      	ldr	r2, [r2, #16]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f aec6 	bne.w	800420e <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00010004 	.word	0x00010004

080044ac <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
  
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c0:	f7fb ff10 	bl	80002e4 <HAL_GetTick>
 80044c4:	61f8      	str	r0, [r7, #28]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	f040 80fd 	bne.w	80046ce <HAL_I2C_Slave_Transmit+0x222>
  {
    if((pData == NULL) || (Size == 0U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_I2C_Slave_Transmit+0x34>
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_I2C_Slave_Transmit+0x38>
    {
      return  HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0f5      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Slave_Transmit+0x46>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0ee      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d007      	beq.n	8004518 <HAL_I2C_Slave_Transmit+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004526:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2221      	movs	r2, #33	; 0x21
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a62      	ldr	r2, [pc, #392]	; (80046d8 <HAL_I2C_Slave_Transmit+0x22c>)
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004568:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2200      	movs	r2, #0
 8004572:	495a      	ldr	r1, [pc, #360]	; (80046dc <HAL_I2C_Slave_Transmit+0x230>)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f004 f86e 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Slave_Transmit+0xd8>
    {
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0a5      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045a2:	d167      	bne.n	8004674 <HAL_I2C_Slave_Transmit+0x1c8>
    {
      /* Wait until ADDR flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	494b      	ldr	r1, [pc, #300]	; (80046dc <HAL_I2C_Slave_Transmit+0x230>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f004 f851 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Slave_Transmit+0x112>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e088      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 80045d4:	e04e      	b.n	8004674 <HAL_I2C_Slave_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f004 f8fa 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00f      	beq.n	8004606 <HAL_I2C_Slave_Transmit+0x15a>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d101      	bne.n	8004602 <HAL_I2C_Slave_Transmit+0x156>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e066      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
        }
        else
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e064      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c58      	adds	r0, r3, #1
 8004610:	68f9      	ldr	r1, [r7, #12]
 8004612:	6248      	str	r0, [r1, #36]	; 0x24
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d119      	bne.n	8004674 <HAL_I2C_Slave_Transmit+0x1c8>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_I2C_Slave_Transmit+0x1c8>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c58      	adds	r0, r3, #1
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6248      	str	r0, [r1, #36]	; 0x24
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
    while(hi2c->XferSize > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ac      	bne.n	80045d6 <HAL_I2C_Slave_Transmit+0x12a>
      }
    }

    /* Wait until AF flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f003 ffe4 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_I2C_Slave_Transmit+0x1ec>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e01b      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046a0:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <HAL_I2C_Slave_Transmit+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	ffff0000 	.word	0xffff0000
 80046dc:	00010002 	.word	0x00010002

080046e0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f4:	f7fb fdf6 	bl	80002e4 <HAL_GetTick>
 80046f8:	61f8      	str	r0, [r7, #28]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	f040 80f5 	bne.w	80048f2 <HAL_I2C_Slave_Receive+0x212>
  {
    if((pData == NULL) || (Size == 0))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_I2C_Slave_Receive+0x34>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_I2C_Slave_Receive+0x38>
    {
      return  HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0ed      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Slave_Receive+0x46>
 8004722:	2302      	movs	r3, #2
 8004724:	e0e6      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Slave_Receive+0x6c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a5e      	ldr	r2, [pc, #376]	; (80048fc <HAL_I2C_Slave_Receive+0x21c>)
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800479c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	4956      	ldr	r1, [pc, #344]	; (8004900 <HAL_I2C_Slave_Receive+0x220>)
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f003 ff54 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Slave_Receive+0xd8>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e09d      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	69bb      	ldr	r3, [r7, #24]

    while(hi2c->XferSize > 0U)
 80047ce:	e04f      	b.n	8004870 <HAL_I2C_Slave_Receive+0x190>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f004 f8b0 	bl	800893a <I2C_WaitOnRXNEFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00f      	beq.n	8004800 <HAL_I2C_Slave_Receive+0x120>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]

        if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d101      	bne.n	80047fc <HAL_I2C_Slave_Receive+0x11c>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e07b      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
        }
        else
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e079      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
        }
      }

      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6251      	str	r1, [r2, #36]	; 0x24
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	6912      	ldr	r2, [r2, #16]
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d119      	bne.n	8004870 <HAL_I2C_Slave_Receive+0x190>
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_I2C_Slave_Receive+0x190>
      {
        /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	6251      	str	r1, [r2, #36]	; 0x24
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	6912      	ldr	r2, [r2, #16]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ab      	bne.n	80047d0 <HAL_I2C_Slave_Receive+0xf0>
      }
    }

    /* Wait until STOP flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f004 f823 	bl	80088c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004896:	601a      	str	r2, [r3, #0]

      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b04      	cmp	r3, #4
 800489e:	d101      	bne.n	80048a4 <HAL_I2C_Slave_Receive+0x1c4>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e027      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
      }
      else
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e025      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_I2C_Slave_Receive+0x214>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	ffff0000 	.word	0xffff0000
 8004900:	00010002 	.word	0x00010002

08004904 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
 8004914:	4613      	mov	r3, r2
 8004916:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	d179      	bne.n	8004a1c <HAL_I2C_Master_Transmit_IT+0x118>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004928:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <HAL_I2C_Master_Transmit_IT+0x128>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	4a40      	ldr	r2, [pc, #256]	; (8004a30 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	0a1a      	lsrs	r2, r3, #8
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009a      	lsls	r2, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	617a      	str	r2, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10c      	bne.n	8004966 <HAL_I2C_Master_Transmit_IT+0x62>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e05b      	b.n	8004a1e <HAL_I2C_Master_Transmit_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d0e6      	beq.n	8004942 <HAL_I2C_Master_Transmit_IT+0x3e>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_I2C_Master_Transmit_IT+0x7e>
 800497e:	2302      	movs	r3, #2
 8004980:	e04d      	b.n	8004a1e <HAL_I2C_Master_Transmit_IT+0x11a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d007      	beq.n	80049a8 <HAL_I2C_Master_Transmit_IT+0xa4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2221      	movs	r2, #33	; 0x21
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2210      	movs	r2, #16
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	893a      	ldrh	r2, [r7, #8]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_I2C_Master_Transmit_IT+0x130>)
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80049ea:	897a      	ldrh	r2, [r7, #10]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	6852      	ldr	r2, [r2, #4]
 8004a12:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a16:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_I2C_Master_Transmit_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000000 	.word	0x20000000
 8004a30:	14f8b589 	.word	0x14f8b589
 8004a34:	ffff0000 	.word	0xffff0000

08004a38 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	461a      	mov	r2, r3
 8004a44:	460b      	mov	r3, r1
 8004a46:	817b      	strh	r3, [r7, #10]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	f040 8082 	bne.w	8004b62 <HAL_I2C_Master_Receive_IT+0x12a>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004a5e:	4b44      	ldr	r3, [pc, #272]	; (8004b70 <HAL_I2C_Master_Receive_IT+0x138>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	4a43      	ldr	r2, [pc, #268]	; (8004b74 <HAL_I2C_Master_Receive_IT+0x13c>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	0a1a      	lsrs	r2, r3, #8
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009a      	lsls	r2, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	617a      	str	r2, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10c      	bne.n	8004a9c <HAL_I2C_Master_Receive_IT+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e063      	b.n	8004b64 <HAL_I2C_Master_Receive_IT+0x12c>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d0e6      	beq.n	8004a78 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2C_Master_Receive_IT+0x80>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e055      	b.n	8004b64 <HAL_I2C_Master_Receive_IT+0x12c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d007      	beq.n	8004ade <HAL_I2C_Master_Receive_IT+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aec:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2222      	movs	r2, #34	; 0x22
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2210      	movs	r2, #16
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	893a      	ldrh	r2, [r7, #8]
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <HAL_I2C_Master_Receive_IT+0x140>)
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8004b20:	897a      	ldrh	r2, [r7, #10]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b34:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b44:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004b5c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_I2C_Master_Receive_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000000 	.word	0x20000000
 8004b74:	14f8b589 	.word	0x14f8b589
 8004b78:	ffff0000 	.word	0xffff0000

08004b7c <HAL_I2C_Master_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	461a      	mov	r2, r3
 8004b88:	460b      	mov	r3, r1
 8004b8a:	817b      	strh	r3, [r7, #10]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	f040 8098 	bne.w	8004cd6 <HAL_I2C_Master_Sequential_Transmit_IT+0x15a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d002      	beq.n	8004bb2 <HAL_I2C_Master_Sequential_Transmit_IT+0x36>
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d125      	bne.n	8004bfe <HAL_I2C_Master_Sequential_Transmit_IT+0x82>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004bb2:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_I2C_Master_Sequential_Transmit_IT+0x168>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	08db      	lsrs	r3, r3, #3
 8004bb8:	4a4b      	ldr	r2, [pc, #300]	; (8004ce8 <HAL_I2C_Master_Sequential_Transmit_IT+0x16c>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	0a1a      	lsrs	r2, r3, #8
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009a      	lsls	r2, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
      do
      {
        if(count-- == 0U)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	613a      	str	r2, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_I2C_Master_Sequential_Transmit_IT+0x74>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT; 
 8004bec:	2303      	movs	r3, #3
 8004bee:	e073      	b.n	8004cd8 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d0e6      	beq.n	8004bcc <HAL_I2C_Master_Sequential_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_I2C_Master_Sequential_Transmit_IT+0x90>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e065      	b.n	8004cd8 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d007      	beq.n	8004c32 <HAL_I2C_Master_Sequential_Transmit_IT+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c40:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2221      	movs	r2, #33	; 0x21
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	893a      	ldrh	r2, [r7, #8]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8004c74:	897a      	ldrh	r2, [r7, #10]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	617b      	str	r3, [r7, #20]
    
    /* Generate Start */    
    if((Prev_State == I2C_STATE_MASTER_BUSY_RX) || (Prev_State == I2C_STATE_NONE))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b12      	cmp	r3, #18
 8004c84:	d002      	beq.n	8004c8c <HAL_I2C_Master_Sequential_Transmit_IT+0x110>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <HAL_I2C_Master_Sequential_Transmit_IT+0x13e>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d002      	beq.n	8004c98 <HAL_I2C_Master_Sequential_Transmit_IT+0x11c>
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d108      	bne.n	8004caa <HAL_I2C_Master_Sequential_Transmit_IT+0x12e>
      {
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e007      	b.n	8004cba <HAL_I2C_Master_Sequential_Transmit_IT+0x13e>
      }
      else
      {
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb8:	601a      	str	r2, [r3, #0]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6852      	ldr	r2, [r2, #4]
 8004ccc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004cd0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <HAL_I2C_Master_Sequential_Transmit_IT+0x15c>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	14f8b589 	.word	0x14f8b589

08004cec <HAL_I2C_Master_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	817b      	strh	r3, [r7, #10]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
    
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	f040 80af 	bne.w	8004e70 <HAL_I2C_Master_Sequential_Receive_IT+0x184>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d002      	beq.n	8004d1e <HAL_I2C_Master_Sequential_Receive_IT+0x32>
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d125      	bne.n	8004d6a <HAL_I2C_Master_Sequential_Receive_IT+0x7e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004d1e:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_I2C_Master_Sequential_Receive_IT+0x194>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	4a57      	ldr	r2, [pc, #348]	; (8004e84 <HAL_I2C_Master_Sequential_Receive_IT+0x198>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a1a      	lsrs	r2, r3, #8
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
      do
      {
        if(count-- == 0U)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1e5a      	subs	r2, r3, #1
 8004d3c:	617a      	str	r2, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <HAL_I2C_Master_Sequential_Receive_IT+0x70>
        {
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State= HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT; 
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e08a      	b.n	8004e72 <HAL_I2C_Master_Sequential_Receive_IT+0x186>
        }
      }
      while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d0e6      	beq.n	8004d38 <HAL_I2C_Master_Sequential_Receive_IT+0x4c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_I2C_Master_Sequential_Receive_IT+0x8c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e07c      	b.n	8004e72 <HAL_I2C_Master_Sequential_Receive_IT+0x186>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d007      	beq.n	8004d9e <HAL_I2C_Master_Sequential_Receive_IT+0xb2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2222      	movs	r2, #34	; 0x22
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2210      	movs	r2, #16
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	893a      	ldrh	r2, [r7, #8]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a3a      	ldr	r2, [r7, #32]
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress = DevAddress;
 8004de0:	897a      	ldrh	r2, [r7, #10]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    if((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) || (hi2c->PreviousState == I2C_STATE_NONE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	2b11      	cmp	r3, #17
 8004dec:	d003      	beq.n	8004df6 <HAL_I2C_Master_Sequential_Receive_IT+0x10a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d12e      	bne.n	8004e54 <HAL_I2C_Master_Sequential_Receive_IT+0x168>
    {
      /* Generate Start condition if first transfer */
      if((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME)  || (XferOptions == I2C_NO_OPTION_FRAME))
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d006      	beq.n	8004e0a <HAL_I2C_Master_Sequential_Receive_IT+0x11e>
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d003      	beq.n	8004e0a <HAL_I2C_Master_Sequential_Receive_IT+0x11e>
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e08:	d110      	bne.n	8004e2c <HAL_I2C_Master_Sequential_Receive_IT+0x140>
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e18:	601a      	str	r2, [r3, #0]
        
        /* Generate Start */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e013      	b.n	8004e54 <HAL_I2C_Master_Sequential_Receive_IT+0x168>
      }
      else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	2b11      	cmp	r3, #17
 8004e32:	d10f      	bne.n	8004e54 <HAL_I2C_Master_Sequential_Receive_IT+0x168>
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e42:	601a      	str	r2, [r3, #0]
        
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	6852      	ldr	r2, [r2, #4]
 8004e66:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004e6a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <HAL_I2C_Master_Sequential_Receive_IT+0x186>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000000 	.word	0x20000000
 8004e84:	14f8b589 	.word	0x14f8b589

08004e88 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d17e      	bne.n	8004fa4 <HAL_I2C_Slave_Transmit_IT+0x11c>
  {
    if((pData == NULL) || (Size == 0U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_I2C_Slave_Transmit_IT+0x2a>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Slave_Transmit_IT+0x2e>
    {
      return  HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e077      	b.n	8004fa6 <HAL_I2C_Slave_Transmit_IT+0x11e>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <HAL_I2C_Slave_Transmit_IT+0x12c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	08db      	lsrs	r3, r3, #3
 8004ebc:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <HAL_I2C_Slave_Transmit_IT+0x130>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	0a1a      	lsrs	r2, r3, #8
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009a      	lsls	r2, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1e5a      	subs	r2, r3, #1
 8004ed4:	617a      	str	r2, [r7, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_I2C_Slave_Transmit_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e058      	b.n	8004fa6 <HAL_I2C_Slave_Transmit_IT+0x11e>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d0e6      	beq.n	8004ed0 <HAL_I2C_Slave_Transmit_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_I2C_Slave_Transmit_IT+0x88>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e04a      	b.n	8004fa6 <HAL_I2C_Slave_Transmit_IT+0x11e>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d007      	beq.n	8004f36 <HAL_I2C_Slave_Transmit_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f44:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2221      	movs	r2, #33	; 0x21
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <HAL_I2C_Slave_Transmit_IT+0x134>)
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f86:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	6852      	ldr	r2, [r2, #4]
 8004f9a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f9e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <HAL_I2C_Slave_Transmit_IT+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000000 	.word	0x20000000
 8004fb8:	14f8b589 	.word	0x14f8b589
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d17c      	bne.n	80050d8 <HAL_I2C_Slave_Receive_IT+0x118>
  {
    if((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_I2C_Slave_Receive_IT+0x2a>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Slave_Receive_IT+0x2e>
    {
      return  HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e075      	b.n	80050da <HAL_I2C_Slave_Receive_IT+0x11a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <HAL_I2C_Slave_Receive_IT+0x128>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	4a3d      	ldr	r2, [pc, #244]	; (80050ec <HAL_I2C_Slave_Receive_IT+0x12c>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	0a1a      	lsrs	r2, r3, #8
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	617a      	str	r2, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10c      	bne.n	800502c <HAL_I2C_Slave_Receive_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8005028:	2303      	movs	r3, #3
 800502a:	e056      	b.n	80050da <HAL_I2C_Slave_Receive_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b02      	cmp	r3, #2
 8005038:	d0e6      	beq.n	8005008 <HAL_I2C_Slave_Receive_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_I2C_Slave_Receive_IT+0x88>
 8005044:	2302      	movs	r3, #2
 8005046:	e048      	b.n	80050da <HAL_I2C_Slave_Receive_IT+0x11a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d007      	beq.n	800506e <HAL_I2C_Slave_Receive_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2222      	movs	r2, #34	; 0x22
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_I2C_Slave_Receive_IT+0x130>)
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ba:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	6852      	ldr	r2, [r2, #4]
 80050ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80050d2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_I2C_Slave_Receive_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000000 	.word	0x20000000
 80050ec:	14f8b589 	.word	0x14f8b589
 80050f0:	ffff0000 	.word	0xffff0000

080050f4 <HAL_I2C_Slave_Sequential_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b28      	cmp	r3, #40	; 0x28
 800510e:	d15b      	bne.n	80051c8 <HAL_I2C_Slave_Sequential_Transmit_IT+0xd4>
  {
    if((pData == NULL) || (Size == 0U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_I2C_Slave_Sequential_Transmit_IT+0x28>
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_I2C_Slave_Sequential_Transmit_IT+0x2c>
    {
      return  HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e054      	b.n	80051ca <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_I2C_Slave_Sequential_Transmit_IT+0x3a>
 800512a:	2302      	movs	r3, #2
 800512c:	e04d      	b.n	80051ca <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d007      	beq.n	8005154 <HAL_I2C_Slave_Sequential_Transmit_IT+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005162:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2229      	movs	r2, #41	; 0x29
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	6852      	ldr	r2, [r2, #4]
 80051be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80051c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2C_Slave_Sequential_Transmit_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_I2C_Slave_Sequential_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b28      	cmp	r3, #40	; 0x28
 80051f0:	d15b      	bne.n	80052aa <HAL_I2C_Slave_Sequential_Receive_IT+0xd4>
  {
    if((pData == NULL) || (Size == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_I2C_Slave_Sequential_Receive_IT+0x28>
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_I2C_Slave_Sequential_Receive_IT+0x2c>
    {
      return  HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e054      	b.n	80052ac <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_I2C_Slave_Sequential_Receive_IT+0x3a>
 800520c:	2302      	movs	r3, #2
 800520e:	e04d      	b.n	80052ac <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d007      	beq.n	8005236 <HAL_I2C_Slave_Sequential_Receive_IT+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005244:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	222a      	movs	r2, #42	; 0x2a
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr   = pData;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	6852      	ldr	r2, [r2, #4]
 80052a0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80052a4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <HAL_I2C_Slave_Sequential_Receive_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d124      	bne.n	8005316 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2228      	movs	r2, #40	; 0x28
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d007      	beq.n	80052f2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005300:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	6852      	ldr	r2, [r2, #4]
 800530c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005310:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	e000      	b.n	8005318 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005316:	2302      	movs	r3, #2
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if(hi2c->State == HAL_I2C_STATE_LISTEN)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b28      	cmp	r3, #40	; 0x28
 8005336:	d129      	bne.n	800538c <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005376:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	6852      	ldr	r2, [r2, #4]
 8005382:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005386:	605a      	str	r2, [r3, #4]
  
    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	461a      	mov	r2, r3
 80053a6:	460b      	mov	r3, r1
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	4613      	mov	r3, r2
 80053ac:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	f040 80d0 	bne.w	8005560 <HAL_I2C_Master_Transmit_DMA+0x1c6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80053c0:	4b6a      	ldr	r3, [pc, #424]	; (800556c <HAL_I2C_Master_Transmit_DMA+0x1d2>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	08db      	lsrs	r3, r3, #3
 80053c6:	4a6a      	ldr	r2, [pc, #424]	; (8005570 <HAL_I2C_Master_Transmit_DMA+0x1d6>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	0a1a      	lsrs	r2, r3, #8
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009a      	lsls	r2, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	1e5a      	subs	r2, r3, #1
 80053de:	617a      	str	r2, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10c      	bne.n	80053fe <HAL_I2C_Master_Transmit_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80053fa:	2303      	movs	r3, #3
 80053fc:	e0b1      	b.n	8005562 <HAL_I2C_Master_Transmit_DMA+0x1c8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d0e6      	beq.n	80053da <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_I2C_Master_Transmit_DMA+0x80>
 8005416:	2302      	movs	r3, #2
 8005418:	e0a3      	b.n	8005562 <HAL_I2C_Master_Transmit_DMA+0x1c8>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d007      	beq.n	8005440 <HAL_I2C_Master_Transmit_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2221      	movs	r2, #33	; 0x21
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2210      	movs	r2, #16
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	893a      	ldrh	r2, [r7, #8]
 8005470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a3f      	ldr	r2, [pc, #252]	; (8005574 <HAL_I2C_Master_Transmit_DMA+0x1da>)
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8005482:	897a      	ldrh	r2, [r7, #10]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	645a      	str	r2, [r3, #68]	; 0x44

    if(hi2c->XferSize > 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d049      	beq.n	8005524 <HAL_I2C_Master_Transmit_DMA+0x18a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	4a38      	ldr	r2, [pc, #224]	; (8005578 <HAL_I2C_Master_Transmit_DMA+0x1de>)
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	4a37      	ldr	r2, [pc, #220]	; (800557c <HAL_I2C_Master_Transmit_DMA+0x1e2>)
 800549e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	2200      	movs	r2, #0
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	2200      	movs	r2, #0
 80054ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	2200      	movs	r2, #0
 80054b6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054bc:	2200      	movs	r2, #0
 80054be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	4619      	mov	r1, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3310      	adds	r3, #16
 80054d0:	461a      	mov	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d6:	f7fd fb78 	bl	8002bca <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e8:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f8:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	6852      	ldr	r2, [r2, #4]
 800550c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005510:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	6852      	ldr	r2, [r2, #4]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e01b      	b.n	800555c <HAL_I2C_Master_Transmit_DMA+0x1c2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	6812      	ldr	r2, [r2, #0]
 800552e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005532:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005542:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	6852      	ldr	r2, [r2, #4]
 8005556:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800555a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_I2C_Master_Transmit_DMA+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000000 	.word	0x20000000
 8005570:	14f8b589 	.word	0x14f8b589
 8005574:	ffff0000 	.word	0xffff0000
 8005578:	08008475 	.word	0x08008475
 800557c:	08008561 	.word	0x08008561

08005580 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	461a      	mov	r2, r3
 800558c:	460b      	mov	r3, r1
 800558e:	817b      	strh	r3, [r7, #10]
 8005590:	4613      	mov	r3, r2
 8005592:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	f040 80d0 	bne.w	8005746 <HAL_I2C_Master_Receive_DMA+0x1c6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80055a6:	4b6a      	ldr	r3, [pc, #424]	; (8005750 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	4a69      	ldr	r2, [pc, #420]	; (8005754 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	0a1a      	lsrs	r2, r3, #8
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009a      	lsls	r2, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1e5a      	subs	r2, r3, #1
 80055c4:	617a      	str	r2, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10c      	bne.n	80055e4 <HAL_I2C_Master_Receive_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0b1      	b.n	8005748 <HAL_I2C_Master_Receive_DMA+0x1c8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d0e6      	beq.n	80055c0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_I2C_Master_Receive_DMA+0x80>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0a3      	b.n	8005748 <HAL_I2C_Master_Receive_DMA+0x1c8>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d007      	beq.n	8005626 <HAL_I2C_Master_Receive_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005634:	601a      	str	r2, [r3, #0]
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2222      	movs	r2, #34	; 0x22
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2210      	movs	r2, #16
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	893a      	ldrh	r2, [r7, #8]
 8005656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800565c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8005668:	897a      	ldrh	r2, [r7, #10]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
    
    if(hi2c->XferSize > 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d049      	beq.n	800570a <HAL_I2C_Master_Receive_DMA+0x18a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	4a38      	ldr	r2, [pc, #224]	; (800575c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	4a37      	ldr	r2, [pc, #220]	; (8005760 <HAL_I2C_Master_Receive_DMA+0x1e0>)
 8005684:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	2200      	movs	r2, #0
 8005694:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	2200      	movs	r2, #0
 800569c:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	2200      	movs	r2, #0
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3310      	adds	r3, #16
 80056b0:	4619      	mov	r1, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	461a      	mov	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	f7fd fa85 	bl	8002bca <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056ce:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056de:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	6852      	ldr	r2, [r2, #4]
 80056f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80056f6:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	6852      	ldr	r2, [r2, #4]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005706:	605a      	str	r2, [r3, #4]
 8005708:	e01b      	b.n	8005742 <HAL_I2C_Master_Receive_DMA+0x1c2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005718:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005728:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	6852      	ldr	r2, [r2, #4]
 800573c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005740:	605a      	str	r2, [r3, #4]
    }
    
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_I2C_Master_Receive_DMA+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000000 	.word	0x20000000
 8005754:	14f8b589 	.word	0x14f8b589
 8005758:	ffff0000 	.word	0xffff0000
 800575c:	08008475 	.word	0x08008475
 8005760:	08008561 	.word	0x08008561

08005764 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shift at right before call interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b10      	cmp	r3, #16
 800577a:	d135      	bne.n	80057e8 <HAL_I2C_Master_Abort_IT+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_I2C_Master_Abort_IT+0x26>
 8005786:	2302      	movs	r3, #2
 8005788:	e02f      	b.n	80057ea <HAL_I2C_Master_Abort_IT+0x86>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2260      	movs	r2, #96	; 0x60
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ae:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057be:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	6852      	ldr	r2, [r2, #4]
 80057d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f002 fa86 	bl	8007cf0 <I2C_ITError>

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_I2C_Master_Abort_IT+0x86>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b20      	cmp	r3, #32
 800580e:	f040 80ac 	bne.w	800596a <HAL_I2C_Slave_Transmit_DMA+0x178>
  {
    if((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_I2C_Slave_Transmit_DMA+0x2c>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_I2C_Slave_Transmit_DMA+0x30>
    {
      return  HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e0a4      	b.n	800596c <HAL_I2C_Slave_Transmit_DMA+0x17a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8005822:	4b54      	ldr	r3, [pc, #336]	; (8005974 <HAL_I2C_Slave_Transmit_DMA+0x182>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	4a53      	ldr	r2, [pc, #332]	; (8005978 <HAL_I2C_Slave_Transmit_DMA+0x186>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0a1a      	lsrs	r2, r3, #8
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	1e5a      	subs	r2, r3, #1
 8005840:	617a      	str	r2, [r7, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10c      	bne.n	8005860 <HAL_I2C_Slave_Transmit_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 800585c:	2303      	movs	r3, #3
 800585e:	e085      	b.n	800596c <HAL_I2C_Slave_Transmit_DMA+0x17a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d0e6      	beq.n	800583c <HAL_I2C_Slave_Transmit_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_I2C_Slave_Transmit_DMA+0x8a>
 8005878:	2302      	movs	r3, #2
 800587a:	e077      	b.n	800596c <HAL_I2C_Slave_Transmit_DMA+0x17a>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b01      	cmp	r3, #1
 8005890:	d007      	beq.n	80058a2 <HAL_I2C_Slave_Transmit_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2221      	movs	r2, #33	; 0x21
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a29      	ldr	r2, [pc, #164]	; (800597c <HAL_I2C_Slave_Transmit_DMA+0x18a>)
 80058d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e8:	4a25      	ldr	r2, [pc, #148]	; (8005980 <HAL_I2C_Slave_Transmit_DMA+0x18e>)
 80058ea:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_I2C_Slave_Transmit_DMA+0x192>)
 80058f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	2200      	movs	r2, #0
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005900:	2200      	movs	r2, #0
 8005902:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	2200      	movs	r2, #0
 800590a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	2200      	movs	r2, #0
 8005912:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	4619      	mov	r1, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3310      	adds	r3, #16
 8005924:	461a      	mov	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592a:	f7fd f94e 	bl	8002bca <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800593c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	6852      	ldr	r2, [r2, #4]
 8005950:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005954:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	6852      	ldr	r2, [r2, #4]
 8005960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005964:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e000      	b.n	800596c <HAL_I2C_Slave_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000000 	.word	0x20000000
 8005978:	14f8b589 	.word	0x14f8b589
 800597c:	ffff0000 	.word	0xffff0000
 8005980:	08008475 	.word	0x08008475
 8005984:	08008561 	.word	0x08008561

08005988 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	4613      	mov	r3, r2
 8005994:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	f040 80ac 	bne.w	8005b00 <HAL_I2C_Slave_Receive_DMA+0x178>
  {
    if((pData == NULL) || (Size == 0U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_I2C_Slave_Receive_DMA+0x2c>
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_I2C_Slave_Receive_DMA+0x30>
    {
      return  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0a4      	b.n	8005b02 <HAL_I2C_Slave_Receive_DMA+0x17a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80059b8:	4b54      	ldr	r3, [pc, #336]	; (8005b0c <HAL_I2C_Slave_Receive_DMA+0x184>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	4a54      	ldr	r2, [pc, #336]	; (8005b10 <HAL_I2C_Slave_Receive_DMA+0x188>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	0a1a      	lsrs	r2, r3, #8
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009a      	lsls	r2, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	617a      	str	r2, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <HAL_I2C_Slave_Receive_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80059f2:	2303      	movs	r3, #3
 80059f4:	e085      	b.n	8005b02 <HAL_I2C_Slave_Receive_DMA+0x17a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d0e6      	beq.n	80059d2 <HAL_I2C_Slave_Receive_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2C_Slave_Receive_DMA+0x8a>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e077      	b.n	8005b02 <HAL_I2C_Slave_Receive_DMA+0x17a>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d007      	beq.n	8005a38 <HAL_I2C_Slave_Receive_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2222      	movs	r2, #34	; 0x22
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <HAL_I2C_Slave_Receive_DMA+0x18c>)
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <HAL_I2C_Slave_Receive_DMA+0x190>)
 8005a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	4a25      	ldr	r2, [pc, #148]	; (8005b1c <HAL_I2C_Slave_Receive_DMA+0x194>)
 8005a88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3310      	adds	r3, #16
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	461a      	mov	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	f7fd f883 	bl	8002bca <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	6852      	ldr	r2, [r2, #4]
 8005ae6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005aea:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	6852      	ldr	r2, [r2, #4]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005afa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_I2C_Slave_Receive_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	14f8b589 	.word	0x14f8b589
 8005b14:	ffff0000 	.word	0xffff0000
 8005b18:	08008475 	.word	0x08008475
 8005b1c:	08008561 	.word	0x08008561

08005b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	817b      	strh	r3, [r7, #10]
 8005b32:	460b      	mov	r3, r1
 8005b34:	813b      	strh	r3, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b3e:	f7fa fbd1 	bl	80002e4 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	f040 80e7 	bne.w	8005d20 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2319      	movs	r3, #25
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4974      	ldr	r1, [pc, #464]	; (8005d2c <HAL_I2C_Mem_Write+0x20c>)
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f002 fd7a 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e0da      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_I2C_Mem_Write+0x5a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e0d3      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d007      	beq.n	8005ba0 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2221      	movs	r2, #33	; 0x21
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2240      	movs	r2, #64	; 0x40
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a56      	ldr	r2, [pc, #344]	; (8005d30 <HAL_I2C_Mem_Write+0x210>)
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005be2:	88f8      	ldrh	r0, [r7, #6]
 8005be4:	893a      	ldrh	r2, [r7, #8]
 8005be6:	8979      	ldrh	r1, [r7, #10]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f002 faca 	bl	800818c <I2C_RequestMemoryWrite>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d05e      	beq.n	8005cbc <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d105      	bne.n	8005c12 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e087      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e081      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f002 fdd6 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d109      	bne.n	8005c4a <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c44:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e06b      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e069      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	1c58      	adds	r0, r3, #1
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	6248      	str	r0, [r1, #36]	; 0x24
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d119      	bne.n	8005cbc <HAL_I2C_Mem_Write+0x19c>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	1c58      	adds	r0, r3, #1
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6248      	str	r0, [r1, #36]	; 0x24
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1ac      	bne.n	8005c1e <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f002 fdc0 	bl	800884e <I2C_WaitOnBTFFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00f      	beq.n	8005cf4 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d109      	bne.n	8005cf0 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cea:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e018      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e016      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	00100002 	.word	0x00100002
 8005d30:	ffff0000 	.word	0xffff0000

08005d34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	817b      	strh	r3, [r7, #10]
 8005d46:	460b      	mov	r3, r1
 8005d48:	813b      	strh	r3, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d52:	f7fa fac7 	bl	80002e4 <HAL_GetTick>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	f040 8212 	bne.w	800618a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2319      	movs	r3, #25
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4984      	ldr	r1, [pc, #528]	; (8005f80 <HAL_I2C_Mem_Read+0x24c>)
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f002 fc70 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e205      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_I2C_Mem_Read+0x5a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e1fe      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d007      	beq.n	8005db4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2222      	movs	r2, #34	; 0x22
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a66      	ldr	r2, [pc, #408]	; (8005f84 <HAL_I2C_Mem_Read+0x250>)
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005df6:	88f8      	ldrh	r0, [r7, #6]
 8005df8:	893a      	ldrh	r2, [r7, #8]
 8005dfa:	8979      	ldrh	r1, [r7, #10]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	4603      	mov	r3, r0
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f002 fa52 	bl	80082b0 <I2C_RequestMemoryRead>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00f      	beq.n	8005e32 <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d105      	bne.n	8005e26 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e1b2      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e1ac      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d113      	bne.n	8005e62 <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	623b      	str	r3, [r7, #32]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	623b      	str	r3, [r7, #32]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e180      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d11b      	bne.n	8005ea2 <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e160      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d11b      	bne.n	8005ee2 <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	e140      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8005ef8:	e134      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	f200 80eb 	bhi.w	80060da <HAL_I2C_Mem_Read+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d127      	bne.n	8005f5c <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8005f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f002 fd12 	bl	800893a <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d101      	bne.n	8005f28 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e131      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
            }
            else
            {
              return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e12f      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	6251      	str	r1, [r2, #36]	; 0x24
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	6912      	ldr	r2, [r2, #16]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f5a:	e103      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d14a      	bne.n	8005ffa <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4906      	ldr	r1, [pc, #24]	; (8005f88 <HAL_I2C_Mem_Read+0x254>)
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f002 fb71 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <HAL_I2C_Mem_Read+0x258>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e106      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
 8005f7e:	bf00      	nop
 8005f80:	00100002 	.word	0x00100002
 8005f84:	ffff0000 	.word	0xffff0000
 8005f88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	6251      	str	r1, [r2, #36]	; 0x24
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	6912      	ldr	r2, [r2, #16]
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	6251      	str	r1, [r2, #36]	; 0x24
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	6912      	ldr	r2, [r2, #16]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ff8:	e0b4      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	2200      	movs	r2, #0
 8006002:	4964      	ldr	r1, [pc, #400]	; (8006194 <HAL_I2C_Mem_Read+0x460>)
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f002 fb26 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e0bb      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c59      	adds	r1, r3, #1
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6251      	str	r1, [r2, #36]	; 0x24
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	6912      	ldr	r2, [r2, #16]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	2200      	movs	r2, #0
 800605a:	494e      	ldr	r1, [pc, #312]	; (8006194 <HAL_I2C_Mem_Read+0x460>)
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f002 fafa 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_I2C_Mem_Read+0x338>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e08f      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	6251      	str	r1, [r2, #36]	; 0x24
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	6912      	ldr	r2, [r2, #16]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	6251      	str	r1, [r2, #36]	; 0x24
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	6912      	ldr	r2, [r2, #16]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060d8:	e044      	b.n	8006164 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f002 fc2b 	bl	800893a <I2C_WaitOnRXNEFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_I2C_Mem_Read+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d101      	bne.n	80060f6 <HAL_I2C_Mem_Read+0x3c2>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e04a      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
          }
          else
          {
            return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e048      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	6251      	str	r1, [r2, #36]	; 0x24
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	6912      	ldr	r2, [r2, #16]
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b04      	cmp	r3, #4
 8006134:	d116      	bne.n	8006164 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	6251      	str	r1, [r2, #36]	; 0x24
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	6912      	ldr	r2, [r2, #16]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	f47f aec6 	bne.w	8005efa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e000      	b.n	800618c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	3728      	adds	r7, #40	; 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	00010004 	.word	0x00010004

08006198 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b20      	cmp	r3, #32
 80061c0:	f040 8081 	bne.w	80062c6 <HAL_I2C_Mem_Write_IT+0x12e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80061c4:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <HAL_I2C_Mem_Write_IT+0x13c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	08db      	lsrs	r3, r3, #3
 80061ca:	4a43      	ldr	r2, [pc, #268]	; (80062d8 <HAL_I2C_Mem_Write_IT+0x140>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	0a1a      	lsrs	r2, r3, #8
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009a      	lsls	r2, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	617a      	str	r2, [r7, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10c      	bne.n	8006202 <HAL_I2C_Mem_Write_IT+0x6a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80061fe:	2303      	movs	r3, #3
 8006200:	e062      	b.n	80062c8 <HAL_I2C_Mem_Write_IT+0x130>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d0e6      	beq.n	80061de <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_I2C_Mem_Write_IT+0x86>
 800621a:	2302      	movs	r3, #2
 800621c:	e054      	b.n	80062c8 <HAL_I2C_Mem_Write_IT+0x130>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d007      	beq.n	8006244 <HAL_I2C_Mem_Write_IT+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2221      	movs	r2, #33	; 0x21
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800627a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4a17      	ldr	r2, [pc, #92]	; (80062dc <HAL_I2C_Mem_Write_IT+0x144>)
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 8006282:	897a      	ldrh	r2, [r7, #10]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 8006288:	893a      	ldrh	r2, [r7, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	6852      	ldr	r2, [r2, #4]
 80062bc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80062c0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e000      	b.n	80062c8 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	20000000 	.word	0x20000000
 80062d8:	14f8b589 	.word	0x14f8b589
 80062dc:	ffff0000 	.word	0xffff0000

080062e0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	817b      	strh	r3, [r7, #10]
 80062f2:	460b      	mov	r3, r1
 80062f4:	813b      	strh	r3, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b20      	cmp	r3, #32
 8006308:	f040 808d 	bne.w	8006426 <HAL_I2C_Mem_Read_IT+0x146>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800630c:	4b49      	ldr	r3, [pc, #292]	; (8006434 <HAL_I2C_Mem_Read_IT+0x154>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	08db      	lsrs	r3, r3, #3
 8006312:	4a49      	ldr	r2, [pc, #292]	; (8006438 <HAL_I2C_Mem_Read_IT+0x158>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	0a1a      	lsrs	r2, r3, #8
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009a      	lsls	r2, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	617a      	str	r2, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10c      	bne.n	800634a <HAL_I2C_Mem_Read_IT+0x6a>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8006346:	2303      	movs	r3, #3
 8006348:	e06e      	b.n	8006428 <HAL_I2C_Mem_Read_IT+0x148>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b02      	cmp	r3, #2
 8006356:	d0e6      	beq.n	8006326 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_I2C_Mem_Read_IT+0x86>
 8006362:	2302      	movs	r3, #2
 8006364:	e060      	b.n	8006428 <HAL_I2C_Mem_Read_IT+0x148>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d007      	beq.n	800638c <HAL_I2C_Mem_Read_IT+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	6812      	ldr	r2, [r2, #0]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800639a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2222      	movs	r2, #34	; 0x22
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2240      	movs	r2, #64	; 0x40
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	; (800643c <HAL_I2C_Mem_Read_IT+0x15c>)
 80063c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 80063ca:	897a      	ldrh	r2, [r7, #10]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 80063d0:	893a      	ldrh	r2, [r7, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount = 0U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063f0:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006400:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if(hi2c->XferSize > 0U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <HAL_I2C_Mem_Read_IT+0x142>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      
      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006420:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_I2C_Mem_Read_IT+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000000 	.word	0x20000000
 8006438:	14f8b589 	.word	0x14f8b589
 800643c:	ffff0000 	.word	0xffff0000

08006440 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	4603      	mov	r3, r0
 8006450:	817b      	strh	r3, [r7, #10]
 8006452:	460b      	mov	r3, r1
 8006454:	813b      	strh	r3, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]

  uint32_t tickstart = 0x00U;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006462:	f7f9 ff3f 	bl	80002e4 <HAL_GetTick>
 8006466:	61f8      	str	r0, [r7, #28]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b20      	cmp	r3, #32
 8006472:	f040 80c7 	bne.w	8006604 <HAL_I2C_Mem_Write_DMA+0x1c4>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8006476:	4b66      	ldr	r3, [pc, #408]	; (8006610 <HAL_I2C_Mem_Write_DMA+0x1d0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	08db      	lsrs	r3, r3, #3
 800647c:	4a65      	ldr	r2, [pc, #404]	; (8006614 <HAL_I2C_Mem_Write_DMA+0x1d4>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	0a1a      	lsrs	r2, r3, #8
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009a      	lsls	r2, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
    do
    {
      if(count-- == 0U)
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1e5a      	subs	r2, r3, #1
 8006494:	61ba      	str	r2, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <HAL_I2C_Mem_Write_DMA+0x74>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 80064b0:	2303      	movs	r3, #3
 80064b2:	e0a8      	b.n	8006606 <HAL_I2C_Mem_Write_DMA+0x1c6>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d0e6      	beq.n	8006490 <HAL_I2C_Mem_Write_DMA+0x50>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_I2C_Mem_Write_DMA+0x90>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e09a      	b.n	8006606 <HAL_I2C_Mem_Write_DMA+0x1c6>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d007      	beq.n	80064f6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	f042 0201 	orr.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006504:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2221      	movs	r2, #33	; 0x21
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2240      	movs	r2, #64	; 0x40
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferSize = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006526:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a39      	ldr	r2, [pc, #228]	; (8006618 <HAL_I2C_Mem_Write_DMA+0x1d8>)
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hi2c->XferSize > 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d061      	beq.n	8006600 <HAL_I2C_Mem_Write_DMA+0x1c0>
    {    
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	4a36      	ldr	r2, [pc, #216]	; (800661c <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8006542:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	4a35      	ldr	r2, [pc, #212]	; (8006620 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 800654a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	2200      	movs	r2, #0
 8006552:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	2200      	movs	r2, #0
 800655a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006560:	2200      	movs	r2, #0
 8006562:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	2200      	movs	r2, #0
 800656a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	4619      	mov	r1, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3310      	adds	r3, #16
 800657c:	461a      	mov	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	f7fc fb22 	bl	8002bca <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006586:	88f8      	ldrh	r0, [r7, #6]
 8006588:	893a      	ldrh	r2, [r7, #8]
 800658a:	8979      	ldrh	r1, [r7, #10]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	2323      	movs	r3, #35	; 0x23
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	4603      	mov	r3, r0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 fdf8 	bl	800818c <I2C_RequestMemoryWrite>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d105      	bne.n	80065b6 <HAL_I2C_Mem_Write_DMA+0x176>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e027      	b.n	8006606 <HAL_I2C_Mem_Write_DMA+0x1c6>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e021      	b.n	8006606 <HAL_I2C_Mem_Write_DMA+0x1c6>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	697b      	ldr	r3, [r7, #20]
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	6852      	ldr	r2, [r2, #4]
 80065ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ee:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	6852      	ldr	r2, [r2, #4]
 80065fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2C_Mem_Write_DMA+0x1c6>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000000 	.word	0x20000000
 8006614:	14f8b589 	.word	0x14f8b589
 8006618:	ffff0000 	.word	0xffff0000
 800661c:	08008475 	.word	0x08008475
 8006620:	08008561 	.word	0x08008561

08006624 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	4608      	mov	r0, r1
 800662e:	4611      	mov	r1, r2
 8006630:	461a      	mov	r2, r3
 8006632:	4603      	mov	r3, r0
 8006634:	817b      	strh	r3, [r7, #10]
 8006636:	460b      	mov	r3, r1
 8006638:	813b      	strh	r3, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
  __IO uint32_t count = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006646:	f7f9 fe4d 	bl	80002e4 <HAL_GetTick>
 800664a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b20      	cmp	r3, #32
 8006656:	f040 8117 	bne.w	8006888 <HAL_I2C_Mem_Read_DMA+0x264>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 800665a:	4b8e      	ldr	r3, [pc, #568]	; (8006894 <HAL_I2C_Mem_Read_DMA+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	4a8d      	ldr	r2, [pc, #564]	; (8006898 <HAL_I2C_Mem_Read_DMA+0x274>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	0a1a      	lsrs	r2, r3, #8
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009a      	lsls	r2, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
    do
    {
      if(count-- == 0U)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	61ba      	str	r2, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <HAL_I2C_Mem_Read_DMA+0x74>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8006694:	2303      	movs	r3, #3
 8006696:	e0f8      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d0e6      	beq.n	8006674 <HAL_I2C_Mem_Read_DMA+0x50>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x90>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e0ea      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d007      	beq.n	80066da <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2222      	movs	r2, #34	; 0x22
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2240      	movs	r2, #64	; 0x40
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr = pData;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a63      	ldr	r2, [pc, #396]	; (800689c <HAL_I2C_Mem_Read_DMA+0x278>)
 8006710:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	851a      	strh	r2, [r3, #40]	; 0x28

    if(hi2c->XferSize > 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	d076      	beq.n	8006812 <HAL_I2C_Mem_Read_DMA+0x1ee>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	4a5d      	ldr	r2, [pc, #372]	; (80068a0 <HAL_I2C_Mem_Read_DMA+0x27c>)
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	4a5c      	ldr	r2, [pc, #368]	; (80068a4 <HAL_I2C_Mem_Read_DMA+0x280>)
 8006732:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	2200      	movs	r2, #0
 800673a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	2200      	movs	r2, #0
 8006742:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	2200      	movs	r2, #0
 800674a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	2200      	movs	r2, #0
 8006752:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3310      	adds	r3, #16
 800675e:	4619      	mov	r1, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	461a      	mov	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676a:	f7fc fa2e 	bl	8002bca <HAL_DMA_Start_IT>

      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800676e:	88f8      	ldrh	r0, [r7, #6]
 8006770:	893a      	ldrh	r2, [r7, #8]
 8006772:	8979      	ldrh	r1, [r7, #10]
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	2323      	movs	r3, #35	; 0x23
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	4603      	mov	r3, r0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f001 fd96 	bl	80082b0 <I2C_RequestMemoryRead>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00f      	beq.n	80067aa <HAL_I2C_Mem_Read_DMA+0x186>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	2b04      	cmp	r3, #4
 8006790:	d105      	bne.n	800679e <HAL_I2C_Mem_Read_DMA+0x17a>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e075      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e06f      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
        }
      }

      if(Size == 1U)
 80067aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d108      	bne.n	80067c2 <HAL_I2C_Mem_Read_DMA+0x19e>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e007      	b.n	80067d2 <HAL_I2C_Mem_Read_DMA+0x1ae>
      }
      else
      {
        /* Enable Last DMA bit */
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6852      	ldr	r2, [r2, #4]
 80067cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067d0:	605a      	str	r2, [r3, #4]
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	697b      	ldr	r3, [r7, #20]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	6852      	ldr	r2, [r2, #4]
 80067fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fe:	605a      	str	r2, [r3, #4]
      
     /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	6852      	ldr	r2, [r2, #4]
 800680a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	e038      	b.n	8006884 <HAL_I2C_Mem_Read_DMA+0x260>
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006812:	88f8      	ldrh	r0, [r7, #6]
 8006814:	893a      	ldrh	r2, [r7, #8]
 8006816:	8979      	ldrh	r1, [r7, #10]
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	2323      	movs	r3, #35	; 0x23
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	4603      	mov	r3, r0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f001 fd44 	bl	80082b0 <I2C_RequestMemoryRead>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00f      	beq.n	800684e <HAL_I2C_Mem_Read_DMA+0x22a>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	2b04      	cmp	r3, #4
 8006834:	d105      	bne.n	8006842 <HAL_I2C_Mem_Read_DMA+0x21e>
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e023      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
        }
        else
        {
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e01d      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
        }
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	693b      	ldr	r3, [r7, #16]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006872:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	e000      	b.n	800688a <HAL_I2C_Mem_Read_DMA+0x266>
  }
  else
  {
    return HAL_BUSY;
 8006888:	2302      	movs	r3, #2
  }
}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000000 	.word	0x20000000
 8006898:	14f8b589 	.word	0x14f8b589
 800689c:	ffff0000 	.word	0xffff0000
 80068a0:	08008475 	.word	0x08008475
 80068a4:	08008561 	.word	0x08008561

080068a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	; 0x30
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	460b      	mov	r3, r1
 80068b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
 80068bc:	2300      	movs	r3, #0
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	2300      	movs	r3, #0
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	2301      	movs	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068cc:	f7f9 fd0a 	bl	80002e4 <HAL_GetTick>
 80068d0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b20      	cmp	r3, #32
 80068dc:	f040 810a 	bne.w	8006af4 <HAL_I2C_IsDeviceReady+0x24c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2319      	movs	r3, #25
 80068e6:	2201      	movs	r2, #1
 80068e8:	4985      	ldr	r1, [pc, #532]	; (8006b00 <HAL_I2C_IsDeviceReady+0x258>)
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f001 feb3 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
 80068f8:	e0fd      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_I2C_IsDeviceReady+0x60>
 8006904:	2302      	movs	r3, #2
 8006906:	e0f6      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d007      	beq.n	800692e <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2224      	movs	r2, #36	; 0x24
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a6d      	ldr	r2, [pc, #436]	; (8006b04 <HAL_I2C_IsDeviceReady+0x25c>)
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006960:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2200      	movs	r2, #0
 800696a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f001 fe71 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e0bb      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	897a      	ldrh	r2, [r7, #10]
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800698a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800698c:	f7f9 fcaa 	bl	80002e4 <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80069ca:	e02a      	b.n	8006a22 <HAL_I2C_IsDeviceReady+0x17a>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <HAL_I2C_IsDeviceReady+0x13a>
 80069d2:	f7f9 fc87 	bl	80002e4 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d903      	bls.n	80069ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22a0      	movs	r2, #160	; 0xa0
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	bf0c      	ite	eq
 80069f8:	2301      	moveq	r3, #1
 80069fa:	2300      	movne	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_I2C_IsDeviceReady+0x18c>
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <HAL_I2C_IsDeviceReady+0x18c>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2ba0      	cmp	r3, #160	; 0xa0
 8006a32:	d1cb      	bne.n	80069cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d129      	bne.n	8006a9e <HAL_I2C_IsDeviceReady+0x1f6>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2319      	movs	r3, #25
 8006a76:	2201      	movs	r2, #1
 8006a78:	4921      	ldr	r1, [pc, #132]	; (8006b00 <HAL_I2C_IsDeviceReady+0x258>)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fdeb 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_I2C_IsDeviceReady+0x1e2>
        {
          return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e035      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e02b      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ab6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	2319      	movs	r3, #25
 8006abe:	2201      	movs	r2, #1
 8006ac0:	490f      	ldr	r1, [pc, #60]	; (8006b00 <HAL_I2C_IsDeviceReady+0x258>)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f001 fdc7 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_I2C_IsDeviceReady+0x22a>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e011      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
        }
      }
    }while(I2C_Trials++ < Trials);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	617a      	str	r2, [r7, #20]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	4293      	cmp	r3, r2
 8006adc:	f4ff af39 	bcc.w	8006952 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <HAL_I2C_IsDeviceReady+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3728      	adds	r7, #40	; 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	00100002 	.word	0x00100002
 8006b04:	ffff0000 	.word	0xffff0000

08006b08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b10      	cmp	r3, #16
 8006b36:	d002      	beq.n	8006b3e <HAL_I2C_EV_IRQHandler+0x36>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	d172      	bne.n	8006c24 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_I2C_EV_IRQHandler+0x52>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fcd0 	bl	80074f8 <I2C_Master_SB>
 8006b58:	e01a      	b.n	8006b90 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4b65      	ldr	r3, [pc, #404]	; (8006cf4 <HAL_I2C_EV_IRQHandler+0x1ec>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d008      	beq.n	8006b76 <HAL_I2C_EV_IRQHandler+0x6e>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fd2d 	bl	80075ce <I2C_Master_ADD10>
 8006b74:	e00c      	b.n	8006b90 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4b5f      	ldr	r3, [pc, #380]	; (8006cf8 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <HAL_I2C_EV_IRQHandler+0x88>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fd30 	bl	80075f0 <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4b5a      	ldr	r3, [pc, #360]	; (8006cfc <HAL_I2C_EV_IRQHandler+0x1f4>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d022      	beq.n	8006be0 <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4b58      	ldr	r3, [pc, #352]	; (8006d00 <HAL_I2C_EV_IRQHandler+0x1f8>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <HAL_I2C_EV_IRQHandler+0xb8>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <HAL_I2C_EV_IRQHandler+0xb8>
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4b54      	ldr	r3, [pc, #336]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f9e3 	bl	8006f84 <I2C_MasterTransmit_TXE>
 8006bbe:	e030      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4b50      	ldr	r3, [pc, #320]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 808f 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8089 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fac8 	bl	800716e <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006bde:	e084      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4b49      	ldr	r3, [pc, #292]	; (8006d08 <HAL_I2C_EV_IRQHandler+0x200>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0xfe>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0xfe>
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4b43      	ldr	r3, [pc, #268]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb2a 	bl	8007258 <I2C_MasterReceive_RXNE>
 8006c04:	e00d      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d06c      	beq.n	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d067      	beq.n	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fbaf 	bl	800737e <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006c20:	e063      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
 8006c22:	e062      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d008      	beq.n	8006c40 <HAL_I2C_EV_IRQHandler+0x138>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fef8 	bl	8007a2e <I2C_Slave_ADDR>
 8006c3e:	e055      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4b32      	ldr	r3, [pc, #200]	; (8006d0c <HAL_I2C_EV_IRQHandler+0x204>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_I2C_EV_IRQHandler+0x154>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 ff14 	bl	8007a82 <I2C_Slave_STOPF>
 8006c5a:	e047      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <HAL_I2C_EV_IRQHandler+0x1f4>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d020      	beq.n	8006ca8 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4b25      	ldr	r3, [pc, #148]	; (8006d00 <HAL_I2C_EV_IRQHandler+0x1f8>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00d      	beq.n	8006c8c <HAL_I2C_EV_IRQHandler+0x184>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_I2C_EV_IRQHandler+0x184>
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4b21      	ldr	r3, [pc, #132]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fe16 	bl	80078b6 <I2C_SlaveTransmit_TXE>
 8006c8a:	e02f      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d02a      	beq.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d025      	beq.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fe45 	bl	8007930 <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 8006ca6:	e021      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <HAL_I2C_EV_IRQHandler+0x200>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <HAL_I2C_EV_IRQHandler+0x1c6>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_I2C_EV_IRQHandler+0x1c6>
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fe52 	bl	8007970 <I2C_SlaveReceive_RXNE>
 8006ccc:	e00e      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fe82 	bl	80079ec <I2C_SlaveReceive_BTF>
}
 8006ce8:	e000      	b.n	8006cec <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006cea:	bf00      	nop
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	00010008 	.word	0x00010008
 8006cf8:	00010002 	.word	0x00010002
 8006cfc:	00100004 	.word	0x00100004
 8006d00:	00010080 	.word	0x00010080
 8006d04:	00010004 	.word	0x00010004
 8006d08:	00010040 	.word	0x00010040
 8006d0c:	00010010 	.word	0x00010010

08006d10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4b49      	ldr	r3, [pc, #292]	; (8006e60 <HAL_I2C_ER_IRQHandler+0x150>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00f      	beq.n	8006d62 <HAL_I2C_ER_IRQHandler+0x52>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <HAL_I2C_ER_IRQHandler+0x52>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00f      	beq.n	8006d8c <HAL_I2C_ER_IRQHandler+0x7c>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_I2C_ER_IRQHandler+0x7c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f043 0202 	orr.w	r2, r3, #2
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d8a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d044      	beq.n	8006e20 <HAL_I2C_ER_IRQHandler+0x110>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d03f      	beq.n	8006e20 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d112      	bne.n	8006dee <HAL_I2C_ER_IRQHandler+0xde>
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10f      	bne.n	8006dee <HAL_I2C_ER_IRQHandler+0xde>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b21      	cmp	r3, #33	; 0x21
 8006dd2:	d008      	beq.n	8006de6 <HAL_I2C_ER_IRQHandler+0xd6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b29      	cmp	r3, #41	; 0x29
 8006dd8:	d005      	beq.n	8006de6 <HAL_I2C_ER_IRQHandler+0xd6>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b28      	cmp	r3, #40	; 0x28
 8006dde:	d106      	bne.n	8006dee <HAL_I2C_ER_IRQHandler+0xde>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b21      	cmp	r3, #33	; 0x21
 8006de4:	d103      	bne.n	8006dee <HAL_I2C_ER_IRQHandler+0xde>
    {
      I2C_Slave_AF(hi2c);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ff10 	bl	8007c0c <I2C_Slave_AF>
 8006dec:	e018      	b.n	8006e20 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f043 0204 	orr.w	r2, r3, #4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d107      	bne.n	8006e16 <HAL_I2C_ER_IRQHandler+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e14:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e1e:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00f      	beq.n	8006e4a <HAL_I2C_ER_IRQHandler+0x13a>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_I2C_ER_IRQHandler+0x13a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	f043 0208 	orr.w	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006e48:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_I2C_ER_IRQHandler+0x148>
  {
    I2C_ITError(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 ff4c 	bl	8007cf0 <I2C_ITError>
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	00010100 	.word	0x00010100

08006e64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f42:	b2db      	uxtb	r3, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5e:	b2db      	uxtb	r3, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d150      	bne.n	8007050 <I2C_MasterTransmit_TXE+0xcc>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b21      	cmp	r3, #33	; 0x21
 8006fb2:	d14d      	bne.n	8007050 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d01d      	beq.n	8006ff6 <I2C_MasterTransmit_TXE+0x72>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d01a      	beq.n	8006ff6 <I2C_MasterTransmit_TXE+0x72>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fc6:	d016      	beq.n	8006ff6 <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6812      	ldr	r2, [r2, #0]
 8006fd0:	6852      	ldr	r2, [r2, #4]
 8006fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2211      	movs	r2, #17
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ff38 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ff4:	e0b6      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	6852      	ldr	r2, [r2, #4]
 8007000:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007004:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007014:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d107      	bne.n	8007040 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ff53 	bl	8006ee4 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800703e:	e091      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff ff0b 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800704e:	e089      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2b21      	cmp	r3, #33	; 0x21
 8007054:	d006      	beq.n	8007064 <I2C_MasterTransmit_TXE+0xe0>
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	f040 8083 	bne.w	8007164 <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b22      	cmp	r3, #34	; 0x22
 8007062:	d17f      	bne.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d108      	bne.n	8007080 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	6852      	ldr	r2, [r2, #4]
 8007078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	e071      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d15b      	bne.n	8007144 <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11d      	bne.n	80070d0 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d10b      	bne.n	80070b4 <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
 80070b2:	e057      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070bc:	b292      	uxth	r2, r2
 80070be:	1212      	asrs	r2, r2, #8
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50
 80070ce:	e049      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10b      	bne.n	80070f0 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	651a      	str	r2, [r3, #80]	; 0x50
 80070ee:	e039      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d135      	bne.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b22      	cmp	r3, #34	; 0x22
 8007102:	d108      	bne.n	8007116 <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e026      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b21      	cmp	r3, #33	; 0x21
 8007120:	d120      	bne.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	1c58      	adds	r0, r3, #1
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	6248      	str	r0, [r1, #36]	; 0x24
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007142:	e00f      	b.n	8007164 <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	1c58      	adds	r0, r3, #1
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	6248      	str	r0, [r1, #36]	; 0x24
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b21      	cmp	r3, #33	; 0x21
 8007186:	d162      	bne.n	800724e <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d010      	beq.n	80071b4 <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	1c58      	adds	r0, r3, #1
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	6248      	str	r0, [r1, #36]	; 0x24
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071b2:	e04c      	b.n	800724e <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d01d      	beq.n	80071f6 <I2C_MasterTransmit_BTF+0x88>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d01a      	beq.n	80071f6 <I2C_MasterTransmit_BTF+0x88>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071c6:	d016      	beq.n	80071f6 <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	6852      	ldr	r2, [r2, #4]
 80071d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071d6:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2211      	movs	r2, #17
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff fe38 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
 80071f4:	e02b      	b.n	800724e <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	6852      	ldr	r2, [r2, #4]
 8007200:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007204:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	d107      	bne.n	8007240 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fe53 	bl	8006ee4 <HAL_I2C_MemTxCpltCallback>
 800723e:	e006      	b.n	800724e <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff fe0b 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b22      	cmp	r3, #34	; 0x22
 800726a:	f040 8083 	bne.w	8007374 <I2C_MasterReceive_RXNE+0x11c>
  {
    uint32_t tmp = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007276:	b29b      	uxth	r3, r3
 8007278:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d911      	bls.n	80072a4 <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	1c59      	adds	r1, r3, #1
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6251      	str	r1, [r2, #36]	; 0x24
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	6912      	ldr	r2, [r2, #16]
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072a2:	e067      	b.n	8007374 <I2C_MasterReceive_RXNE+0x11c>
    }
    else if((tmp == 2U) || (tmp == 3U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d002      	beq.n	80072b0 <I2C_MasterReceive_RXNE+0x58>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d118      	bne.n	80072e2 <I2C_MasterReceive_RXNE+0x8a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072be:	601a      	str	r2, [r3, #0]
      
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ce:	601a      	str	r2, [r3, #0]
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	6852      	ldr	r2, [r2, #4]
 80072da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072de:	605a      	str	r2, [r3, #4]
 80072e0:	e048      	b.n	8007374 <I2C_MasterReceive_RXNE+0x11c>
    }
    else
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f0:	601a      	str	r2, [r3, #0]
      
      if(hi2c->XferOptions == I2C_NEXT_FRAME)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d107      	bne.n	800730a <I2C_MasterReceive_RXNE+0xb2>
      {
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007308:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6812      	ldr	r2, [r2, #0]
 8007312:	6852      	ldr	r2, [r2, #4]
 8007314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007318:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6251      	str	r1, [r2, #36]	; 0x24
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	6912      	ldr	r2, [r2, #16]
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d107      	bne.n	8007366 <I2C_MasterReceive_RXNE+0x10e>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff fdca 	bl	8006ef8 <HAL_I2C_MemRxCpltCallback>
 8007364:	e006      	b.n	8007374 <I2C_MasterReceive_RXNE+0x11c>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fd82 	bl	8006e78 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d123      	bne.n	80073de <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d006      	beq.n	80073aa <I2C_MasterReceive_BTF+0x2c>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d003      	beq.n	80073aa <I2C_MasterReceive_BTF+0x2c>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073a8:	d107      	bne.n	80073ba <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6251      	str	r1, [r2, #36]	; 0x24
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	6912      	ldr	r2, [r2, #16]
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073dc:	e087      	b.n	80074ee <I2C_MasterReceive_BTF+0x170>
  }
  else if(hi2c->XferCount == 2U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d171      	bne.n	80074cc <I2C_MasterReceive_BTF+0x14e>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d01d      	beq.n	800742a <I2C_MasterReceive_BTF+0xac>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d01a      	beq.n	800742a <I2C_MasterReceive_BTF+0xac>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073fa:	d016      	beq.n	800742a <I2C_MasterReceive_BTF+0xac>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6812      	ldr	r2, [r2, #0]
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740a:	601a      	str	r2, [r3, #0]
      
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d002      	beq.n	8007418 <I2C_MasterReceive_BTF+0x9a>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d111      	bne.n	800743c <I2C_MasterReceive_BTF+0xbe>
      {
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007426:	601a      	str	r2, [r3, #0]
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8007428:	e008      	b.n	800743c <I2C_MasterReceive_BTF+0xbe>
      }
    }
    else
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e000      	b.n	800743e <I2C_MasterReceive_BTF+0xc0>
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 800743c:	bf00      	nop
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	1c59      	adds	r1, r3, #1
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6251      	str	r1, [r2, #36]	; 0x24
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6812      	ldr	r2, [r2, #0]
 800744c:	6912      	ldr	r2, [r2, #16]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	1c59      	adds	r1, r3, #1
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6251      	str	r1, [r2, #36]	; 0x24
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	6912      	ldr	r2, [r2, #16]
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	6852      	ldr	r2, [r2, #4]
 800748c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007490:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d107      	bne.n	80074bc <I2C_MasterReceive_BTF+0x13e>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fd1f 	bl	8006ef8 <HAL_I2C_MemRxCpltCallback>
 80074ba:	e018      	b.n	80074ee <I2C_MasterReceive_BTF+0x170>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff fcd7 	bl	8006e78 <HAL_I2C_MasterRxCpltCallback>
 80074ca:	e010      	b.n	80074ee <I2C_MasterReceive_BTF+0x170>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	1c59      	adds	r1, r3, #1
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6251      	str	r1, [r2, #36]	; 0x24
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	6912      	ldr	r2, [r2, #16]
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	d116      	bne.n	800753a <I2C_Master_SB+0x42>
  {
    if(hi2c->EventCount == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007522:	611a      	str	r2, [r3, #16]
 8007524:	e04c      	b.n	80075c0 <I2C_Master_SB+0xc8>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	611a      	str	r2, [r3, #16]
 8007538:	e042      	b.n	80075c0 <I2C_Master_SB+0xc8>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007542:	d118      	bne.n	8007576 <I2C_Master_SB+0x7e>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b21      	cmp	r3, #33	; 0x21
 800754e:	d108      	bne.n	8007562 <I2C_Master_SB+0x6a>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800755e:	611a      	str	r2, [r3, #16]
 8007560:	e02e      	b.n	80075c0 <I2C_Master_SB+0xc8>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	611a      	str	r2, [r3, #16]
 8007574:	e024      	b.n	80075c0 <I2C_Master_SB+0xc8>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10e      	bne.n	800759c <I2C_Master_SB+0xa4>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007586:	b292      	uxth	r2, r2
 8007588:	11d2      	asrs	r2, r2, #7
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	f002 0206 	and.w	r2, r2, #6
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	f062 020f 	orn	r2, r2, #15
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	611a      	str	r2, [r3, #16]
 800759a:	e011      	b.n	80075c0 <I2C_Master_SB+0xc8>
      }
      else if(hi2c->EventCount == 1U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d10d      	bne.n	80075c0 <I2C_Master_SB+0xc8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075ac:	b292      	uxth	r2, r2
 80075ae:	11d2      	asrs	r2, r2, #7
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	f002 0206 	and.w	r2, r2, #6
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	f062 020e 	orn	r2, r2, #14
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b091      	sub	sp, #68	; 0x44
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b22      	cmp	r3, #34	; 0x22
 8007618:	f040 813b 	bne.w	8007892 <I2C_Master_ADDR+0x2a2>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10e      	bne.n	8007642 <I2C_Master_ADDR+0x52>
 8007624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d10b      	bne.n	8007642 <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800762a:	2300      	movs	r3, #0
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	633b      	str	r3, [r7, #48]	; 0x30
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	e132      	b.n	80078a8 <I2C_Master_ADDR+0x2b8>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11d      	bne.n	8007686 <I2C_Master_ADDR+0x96>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007652:	d118      	bne.n	8007686 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007654:	2300      	movs	r3, #0
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007678:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
 8007684:	e110      	b.n	80078a8 <I2C_Master_ADDR+0x2b8>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d113      	bne.n	80076b8 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007690:	2300      	movs	r3, #0
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e0e8      	b.n	800788a <I2C_Master_ADDR+0x29a>
      }
      else if(hi2c->XferCount == 1U)   
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	f040 8082 	bne.w	80077c8 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ca:	d137      	bne.n	800773c <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076da:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ea:	d113      	bne.n	8007714 <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6812      	ldr	r2, [r2, #0]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076fc:	2300      	movs	r3, #0
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	e0ba      	b.n	800788a <I2C_Master_ADDR+0x29a>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007714:	2300      	movs	r3, #0
 8007716:	623b      	str	r3, [r7, #32]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	623b      	str	r3, [r7, #32]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e0a6      	b.n	800788a <I2C_Master_ADDR+0x29a>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	2b04      	cmp	r3, #4
 8007740:	d026      	beq.n	8007790 <I2C_Master_ADDR+0x1a0>
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	2b08      	cmp	r3, #8
 8007746:	d023      	beq.n	8007790 <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	2b12      	cmp	r3, #18
 800774c:	d020      	beq.n	8007790 <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	2b02      	cmp	r3, #2
 8007754:	d008      	beq.n	8007768 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	6812      	ldr	r2, [r2, #0]
 8007760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e007      	b.n	8007778 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007776:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	e07c      	b.n	800788a <I2C_Master_ADDR+0x29a>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6812      	ldr	r2, [r2, #0]
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779e:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a0:	2300      	movs	r3, #0
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e060      	b.n	800788a <I2C_Master_ADDR+0x29a>
        }
      }
      else if(hi2c->XferCount == 2U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d138      	bne.n	8007844 <I2C_Master_ADDR+0x254>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d010      	beq.n	80077fc <I2C_Master_ADDR+0x20c>
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e8:	601a      	str	r2, [r3, #0]
          
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	e007      	b.n	800780c <I2C_Master_ADDR+0x21c>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800780a:	601a      	str	r2, [r3, #0]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781a:	d107      	bne.n	800782c <I2C_Master_ADDR+0x23c>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800782a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	e022      	b.n	800788a <I2C_Master_ADDR+0x29a>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007852:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800785e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007862:	d107      	bne.n	8007874 <I2C_Master_ADDR+0x284>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	6852      	ldr	r2, [r2, #4]
 800786e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007872:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	651a      	str	r2, [r3, #80]	; 0x50
 8007890:	e00a      	b.n	80078a8 <I2C_Master_ADDR+0x2b8>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
  }

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3744      	adds	r7, #68	; 0x44
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d029      	beq.n	8007926 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	1c58      	adds	r0, r3, #1
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	6248      	str	r0, [r1, #36]	; 0x24
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d114      	bne.n	8007926 <I2C_SlaveTransmit_TXE+0x70>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b29      	cmp	r3, #41	; 0x29
 8007900:	d111      	bne.n	8007926 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	6852      	ldr	r2, [r2, #4]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007910:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2221      	movs	r2, #33	; 0x21
 8007916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2228      	movs	r2, #40	; 0x28
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fab3 	bl	8006e8c <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00f      	beq.n	8007962 <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	1c58      	adds	r0, r3, #1
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	6248      	str	r0, [r1, #36]	; 0x24
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797e:	b2db      	uxtb	r3, r3
 8007980:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d02a      	beq.n	80079e2 <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	1c59      	adds	r1, r3, #1
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6251      	str	r1, [r2, #36]	; 0x24
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	6912      	ldr	r2, [r2, #16]
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d114      	bne.n	80079e2 <I2C_SlaveReceive_RXNE+0x72>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b2a      	cmp	r3, #42	; 0x2a
 80079bc:	d111      	bne.n	80079e2 <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	6852      	ldr	r2, [r2, #4]
 80079c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2222      	movs	r2, #34	; 0x22
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2228      	movs	r2, #40	; 0x28
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff fa5f 	bl	8006ea0 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d010      	beq.n	8007a20 <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	1c59      	adds	r1, r3, #1
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6251      	str	r1, [r2, #36]	; 0x24
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	6912      	ldr	r2, [r2, #16]
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d001      	beq.n	8007a50 <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5a:	2b80      	cmp	r3, #128	; 0x80
 8007a5c:	d003      	beq.n	8007a66 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	81bb      	strh	r3, [r7, #12]
 8007a64:	e002      	b.n	8007a6c <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007a6c:	89ba      	ldrh	r2, [r7, #12]
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fa1e 	bl	8006eb4 <HAL_I2C_AddrCallback>

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	6852      	ldr	r2, [r2, #4]
 8007a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60bb      	str	r3, [r7, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	60bb      	str	r3, [r7, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae0:	d11a      	bne.n	8007b18 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b22      	cmp	r3, #34	; 0x22
 8007aec:	d005      	beq.n	8007afa <I2C_Slave_STOPF+0x78>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b2a      	cmp	r3, #42	; 0x2a
 8007af8:	d107      	bne.n	8007b0a <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b08:	e006      	b.n	8007b18 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d035      	beq.n	8007b8e <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d110      	bne.n	8007b52 <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	1c59      	adds	r1, r3, #1
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6251      	str	r1, [r2, #36]	; 0x24
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	6912      	ldr	r2, [r2, #16]
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d110      	bne.n	8007b82 <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	1c59      	adds	r1, r3, #1
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6251      	str	r1, [r2, #36]	; 0x24
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	6912      	ldr	r2, [r2, #16]
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0204 	orr.w	r2, r3, #4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8aa 	bl	8007cf0 <I2C_ITError>
 8007b9c:	e02f      	b.n	8007bfe <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b28      	cmp	r3, #40	; 0x28
 8007ba2:	d005      	beq.n	8007bb0 <I2C_Slave_STOPF+0x12e>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba8:	d002      	beq.n	8007bb0 <I2C_Slave_STOPF+0x12e>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b29      	cmp	r3, #41	; 0x29
 8007bae:	d111      	bne.n	8007bd4 <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <I2C_Slave_STOPF+0x186>)
 8007bb4:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff f97f 	bl	8006ed0 <HAL_I2C_ListenCpltCallback>
 8007bd2:	e014      	b.n	8007bfe <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	2b22      	cmp	r3, #34	; 0x22
 8007bda:	d002      	beq.n	8007be2 <I2C_Slave_STOPF+0x160>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b22      	cmp	r3, #34	; 0x22
 8007be0:	d10d      	bne.n	8007bfe <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff f951 	bl	8006ea0 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	ffff0000 	.word	0xffff0000

08007c0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d002      	beq.n	8007c30 <I2C_Slave_AF+0x24>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d129      	bne.n	8007c84 <I2C_Slave_AF+0x78>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b28      	cmp	r3, #40	; 0x28
 8007c34:	d126      	bne.n	8007c84 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a2c      	ldr	r2, [pc, #176]	; (8007cec <I2C_Slave_AF+0xe0>)
 8007c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6812      	ldr	r2, [r2, #0]
 8007c44:	6852      	ldr	r2, [r2, #4]
 8007c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c4a:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c54:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c64:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff f927 	bl	8006ed0 <HAL_I2C_ListenCpltCallback>
 8007c82:	e02e      	b.n	8007ce2 <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b21      	cmp	r3, #33	; 0x21
 8007c88:	d126      	bne.n	8007cd8 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <I2C_Slave_AF+0xe0>)
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2221      	movs	r2, #33	; 0x21
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	6852      	ldr	r2, [r2, #4]
 8007cb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cb4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cbe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cce:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff f8db 	bl	8006e8c <HAL_I2C_SlaveTxCpltCallback>
 8007cd6:	e004      	b.n	8007ce2 <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ce0:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	ffff0000 	.word	0xffff0000

08007cf0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b29      	cmp	r3, #41	; 0x29
 8007d06:	d002      	beq.n	8007d0e <I2C_ITError+0x1e>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0c:	d107      	bne.n	8007d1e <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2228      	movs	r2, #40	; 0x28
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d1c:	e018      	b.n	8007d50 <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b60      	cmp	r3, #96	; 0x60
 8007d28:	d00b      	beq.n	8007d42 <I2C_ITError+0x52>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d38:	d003      	beq.n	8007d42 <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d5e:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d6e:	d160      	bne.n	8007e32 <I2C_ITError+0x142>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	6852      	ldr	r2, [r2, #4]
 8007d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d7e:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d020      	beq.n	8007dd0 <I2C_ITError+0xe0>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	4a57      	ldr	r2, [pc, #348]	; (8007ef0 <I2C_ITError+0x200>)
 8007d94:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fa ffe5 	bl	8002d6a <HAL_DMA_Abort_IT>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8083 	beq.w	8007eae <I2C_ITError+0x1be>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6812      	ldr	r2, [r2, #0]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	f022 0201 	bic.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4798      	blx	r3
 8007dce:	e06e      	b.n	8007eae <I2C_ITError+0x1be>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	4a46      	ldr	r2, [pc, #280]	; (8007ef0 <I2C_ITError+0x200>)
 8007dd6:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fa ffc4 	bl	8002d6a <HAL_DMA_Abort_IT>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d062      	beq.n	8007eae <I2C_ITError+0x1be>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d109      	bne.n	8007e0a <I2C_ITError+0x11a>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	1c59      	adds	r1, r3, #1
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6251      	str	r1, [r2, #36]	; 0x24
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	6912      	ldr	r2, [r2, #16]
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	f022 0201 	bic.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	e03d      	b.n	8007eae <I2C_ITError+0x1be>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b60      	cmp	r3, #96	; 0x60
 8007e3c:	d123      	bne.n	8007e86 <I2C_ITError+0x196>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	d109      	bne.n	8007e6e <I2C_ITError+0x17e>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	1c59      	adds	r1, r3, #1
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6251      	str	r1, [r2, #36]	; 0x24
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	6912      	ldr	r2, [r2, #16]
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff f84e 	bl	8006f20 <HAL_I2C_AbortCpltCallback>
 8007e84:	e013      	b.n	8007eae <I2C_ITError+0x1be>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	d109      	bne.n	8007ea8 <I2C_ITError+0x1b8>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6251      	str	r1, [r2, #36]	; 0x24
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	6912      	ldr	r2, [r2, #16]
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff f82f 	bl	8006f0c <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b28      	cmp	r3, #40	; 0x28
 8007eb8:	d116      	bne.n	8007ee8 <I2C_ITError+0x1f8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d110      	bne.n	8007ee8 <I2C_ITError+0x1f8>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <I2C_ITError+0x204>)
 8007eca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fe fff4 	bl	8006ed0 <HAL_I2C_ListenCpltCallback>
  }
}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	080085bb 	.word	0x080085bb
 8007ef4:	ffff0000 	.word	0xffff0000

08007ef8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	460b      	mov	r3, r1
 8007f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d006      	beq.n	8007f22 <I2C_MasterRequestWrite+0x2a>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d003      	beq.n	8007f22 <I2C_MasterRequestWrite+0x2a>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f20:	d108      	bne.n	8007f34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	e00b      	b.n	8007f4c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f38:	2b12      	cmp	r3, #18
 8007f3a:	d107      	bne.n	8007f4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f4a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 fb7c 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e040      	b.n	8007fea <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f70:	d107      	bne.n	8007f82 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	897a      	ldrh	r2, [r7, #10]
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f7e:	611a      	str	r2, [r3, #16]
 8007f80:	e021      	b.n	8007fc6 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	897a      	ldrh	r2, [r7, #10]
 8007f88:	11d2      	asrs	r2, r2, #7
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	f002 0206 	and.w	r2, r2, #6
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	f062 020f 	orn	r2, r2, #15
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4915      	ldr	r1, [pc, #84]	; (8007ff4 <I2C_MasterRequestWrite+0xfc>)
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fba9 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d101      	bne.n	8007fb8 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e018      	b.n	8007fea <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e016      	b.n	8007fea <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	897a      	ldrh	r2, [r7, #10]
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	490b      	ldr	r1, [pc, #44]	; (8007ff8 <I2C_MasterRequestWrite+0x100>)
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fb93 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d101      	bne.n	8007fe4 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e002      	b.n	8007fea <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e000      	b.n	8007fea <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	00010008 	.word	0x00010008
 8007ff8:	00010002 	.word	0x00010002

08007ffc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	607a      	str	r2, [r7, #4]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	460b      	mov	r3, r1
 800800a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008020:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b04      	cmp	r3, #4
 8008026:	d006      	beq.n	8008036 <I2C_MasterRequestRead+0x3a>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d003      	beq.n	8008036 <I2C_MasterRequestRead+0x3a>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008034:	d108      	bne.n	8008048 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e00b      	b.n	8008060 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	2b11      	cmp	r3, #17
 800804e:	d107      	bne.n	8008060 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800805e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 faf2 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e07f      	b.n	800817c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008084:	d108      	bne.n	8008098 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	897a      	ldrh	r2, [r7, #10]
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	611a      	str	r2, [r3, #16]
 8008096:	e05f      	b.n	8008158 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	897a      	ldrh	r2, [r7, #10]
 800809e:	11d2      	asrs	r2, r2, #7
 80080a0:	b2d2      	uxtb	r2, r2
 80080a2:	f002 0206 	and.w	r2, r2, #6
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	f062 020f 	orn	r2, r2, #15
 80080ac:	b2d2      	uxtb	r2, r2
 80080ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	4933      	ldr	r1, [pc, #204]	; (8008184 <I2C_MasterRequestRead+0x188>)
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fb1e 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d101      	bne.n	80080ce <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e056      	b.n	800817c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e054      	b.n	800817c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	897a      	ldrh	r2, [r7, #10]
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4929      	ldr	r1, [pc, #164]	; (8008188 <I2C_MasterRequestRead+0x18c>)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fb08 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d101      	bne.n	80080fa <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e040      	b.n	800817c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e03e      	b.n	800817c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	6812      	ldr	r2, [r2, #0]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008122:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fa90 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e01d      	b.n	800817c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	897a      	ldrh	r2, [r7, #10]
 8008146:	11d2      	asrs	r2, r2, #7
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	f002 0206 	and.w	r2, r2, #6
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	f062 020e 	orn	r2, r2, #14
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	490a      	ldr	r1, [pc, #40]	; (8008188 <I2C_MasterRequestRead+0x18c>)
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 faca 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	2b04      	cmp	r3, #4
 8008170:	d101      	bne.n	8008176 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e002      	b.n	800817c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e000      	b.n	800817c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	00010008 	.word	0x00010008
 8008188:	00010002 	.word	0x00010002

0800818c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4603      	mov	r3, r0
 800819c:	817b      	strh	r3, [r7, #10]
 800819e:	460b      	mov	r3, r1
 80081a0:	813b      	strh	r3, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	2200      	movs	r2, #0
 80081be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fa47 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e068      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	897a      	ldrh	r2, [r7, #10]
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	6a3a      	ldr	r2, [r7, #32]
 80081e4:	4931      	ldr	r1, [pc, #196]	; (80082ac <I2C_RequestMemoryWrite+0x120>)
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fa86 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d101      	bne.n	80081fe <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e052      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e050      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	6a39      	ldr	r1, [r7, #32]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fad9 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	2b04      	cmp	r3, #4
 800822e:	d109      	bne.n	8008244 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e02f      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e02d      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d105      	bne.n	800825a <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	893a      	ldrh	r2, [r7, #8]
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	611a      	str	r2, [r3, #16]
 8008258:	e023      	b.n	80082a2 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	893a      	ldrh	r2, [r7, #8]
 8008260:	0a12      	lsrs	r2, r2, #8
 8008262:	b292      	uxth	r2, r2
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826a:	6a39      	ldr	r1, [r7, #32]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fab1 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00f      	beq.n	8008298 <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	2b04      	cmp	r3, #4
 800827e:	d109      	bne.n	8008294 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828e:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e007      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e005      	b.n	80082a4 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	893a      	ldrh	r2, [r7, #8]
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	00010002 	.word	0x00010002

080082b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	817b      	strh	r3, [r7, #10]
 80082c2:	460b      	mov	r3, r1
 80082c4:	813b      	strh	r3, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 f9ad 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0af      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	897a      	ldrh	r2, [r7, #10]
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008312:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	6a3a      	ldr	r2, [r7, #32]
 8008318:	4955      	ldr	r1, [pc, #340]	; (8008470 <I2C_RequestMemoryRead+0x1c0>)
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f9ec 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	2b04      	cmp	r3, #4
 800832c:	d101      	bne.n	8008332 <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e099      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e097      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800834c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834e:	6a39      	ldr	r1, [r7, #32]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fa3f 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00f      	beq.n	800837c <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	2b04      	cmp	r3, #4
 8008362:	d109      	bne.n	8008378 <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008372:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e076      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e074      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800837c:	88fb      	ldrh	r3, [r7, #6]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d105      	bne.n	800838e <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	893a      	ldrh	r2, [r7, #8]
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	611a      	str	r2, [r3, #16]
 800838c:	e023      	b.n	80083d6 <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	893a      	ldrh	r2, [r7, #8]
 8008394:	0a12      	lsrs	r2, r2, #8
 8008396:	b292      	uxth	r2, r2
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800839c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839e:	6a39      	ldr	r1, [r7, #32]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fa17 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00f      	beq.n	80083cc <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d109      	bne.n	80083c8 <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	6812      	ldr	r2, [r2, #0]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c2:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e04e      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e04c      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	893a      	ldrh	r2, [r7, #8]
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d8:	6a39      	ldr	r1, [r7, #32]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f9fa 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00f      	beq.n	8008406 <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d109      	bne.n	8008402 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	6812      	ldr	r2, [r2, #0]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e031      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e02f      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	6812      	ldr	r2, [r2, #0]
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	2200      	movs	r2, #0
 800841e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f917 	bl	8008656 <I2C_WaitOnFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e019      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	897a      	ldrh	r2, [r7, #10]
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	6a3a      	ldr	r2, [r7, #32]
 8008446:	490a      	ldr	r1, [pc, #40]	; (8008470 <I2C_RequestMemoryRead+0x1c0>)
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f955 	bl	80086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d007      	beq.n	8008464 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008458:	2b04      	cmp	r3, #4
 800845a:	d101      	bne.n	8008460 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e002      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e000      	b.n	8008466 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	00010002 	.word	0x00010002

08008474 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	617b      	str	r3, [r7, #20]
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008488:	b2db      	uxtb	r3, r3
 800848a:	613b      	str	r3, [r7, #16]
  uint32_t CurrentMode  = hi2c->Mode;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008492:	b2db      	uxtb	r3, r3
 8008494:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b21      	cmp	r3, #33	; 0x21
 800849a:	d005      	beq.n	80084a8 <I2C_DMAXferCplt+0x34>
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2b22      	cmp	r3, #34	; 0x22
 80084a0:	d116      	bne.n	80084d0 <I2C_DMAXferCplt+0x5c>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d113      	bne.n	80084d0 <I2C_DMAXferCplt+0x5c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	6852      	ldr	r2, [r2, #4]
 80084b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084b6:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2200      	movs	r2, #0
 80084bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	6852      	ldr	r2, [r2, #4]
 80084c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80084cc:	605a      	str	r2, [r3, #4]

        HAL_I2C_MasterRxCpltCallback(hi2c);
      }
    }
  }
}
 80084ce:	e043      	b.n	8008558 <I2C_DMAXferCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084de:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ee:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	6852      	ldr	r2, [r2, #4]
 80084fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084fe:	605a      	str	r2, [r3, #4]
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	6852      	ldr	r2, [r2, #4]
 800850a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800850e:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2200      	movs	r2, #0
 8008514:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <I2C_DMAXferCplt+0xb2>
      HAL_I2C_ErrorCallback(hi2c);
 800851e:	6978      	ldr	r0, [r7, #20]
 8008520:	f7fe fcf4 	bl	8006f0c <HAL_I2C_ErrorCallback>
}
 8008524:	e018      	b.n	8008558 <I2C_DMAXferCplt+0xe4>
      hi2c->State = HAL_I2C_STATE_READY;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d107      	bne.n	800854a <I2C_DMAXferCplt+0xd6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008542:	6978      	ldr	r0, [r7, #20]
 8008544:	f7fe fcd8 	bl	8006ef8 <HAL_I2C_MemRxCpltCallback>
}
 8008548:	e006      	b.n	8008558 <I2C_DMAXferCplt+0xe4>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f7fe fc90 	bl	8006e78 <HAL_I2C_MasterRxCpltCallback>
}
 8008558:	bf00      	nop
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856c:	60fb      	str	r3, [r7, #12]
  
  /* Ignore DMA FIFO error */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fa ff5a 	bl	8003428 <HAL_DMA_GetError>
 8008574:	4603      	mov	r3, r0
 8008576:	2b02      	cmp	r3, #2
 8008578:	d01b      	beq.n	80085b2 <I2C_DMAError+0x52>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008588:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	f043 0210 	orr.w	r2, r3, #16
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_I2C_ErrorCallback(hi2c);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f7fe fcad 	bl	8006f0c <HAL_I2C_ErrorCallback>
  }
}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	6812      	ldr	r2, [r2, #0]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	2200      	movs	r2, #0
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	2200      	movs	r2, #0
 80085ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b60      	cmp	r3, #96	; 0x60
 80085f8:	d116      	bne.n	8008628 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	6812      	ldr	r2, [r2, #0]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	f022 0201 	bic.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7fe fc7d 	bl	8006f20 <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8008626:	e012      	b.n	800864e <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	6812      	ldr	r2, [r2, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7fe fc5f 	bl	8006f0c <HAL_I2C_ErrorCallback>
}
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8008666:	e01f      	b.n	80086a8 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866e:	d01b      	beq.n	80086a8 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008676:	f7f7 fe35 	bl	80002e4 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d910      	bls.n	80086a8 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e023      	b.n	80086f0 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	0c1b      	lsrs	r3, r3, #16
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d10d      	bne.n	80086ce <I2C_WaitOnFlagUntilTimeout+0x78>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	43da      	mvns	r2, r3
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4013      	ands	r3, r2
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bf0c      	ite	eq
 80086c4:	2301      	moveq	r3, #1
 80086c6:	2300      	movne	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	e00c      	b.n	80086e8 <I2C_WaitOnFlagUntilTimeout+0x92>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	43da      	mvns	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4013      	ands	r3, r2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	461a      	mov	r2, r3
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d0bc      	beq.n	8008668 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008706:	e040      	b.n	800878a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008716:	d11c      	bne.n	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008726:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008730:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2204      	movs	r2, #4
 8008736:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e03c      	b.n	80087cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d017      	beq.n	800878a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8008760:	f7f7 fdc0 	bl	80002e4 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	1ad2      	subs	r2, r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	429a      	cmp	r2, r3
 800876e:	d90c      	bls.n	800878a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e020      	b.n	80087cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	0c1b      	lsrs	r3, r3, #16
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d10c      	bne.n	80087ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	43da      	mvns	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4013      	ands	r3, r2
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bf14      	ite	ne
 80087a6:	2301      	movne	r3, #1
 80087a8:	2300      	moveq	r3, #0
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	e00b      	b.n	80087c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	43da      	mvns	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf14      	ite	ne
 80087c0:	2301      	movne	r3, #1
 80087c2:	2300      	moveq	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d19e      	bne.n	8008708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087e0:	e029      	b.n	8008836 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f8f3 	bl	80089ce <I2C_IsAcknowledgeFailed>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e029      	b.n	8008846 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d01d      	beq.n	8008836 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008800:	f7f7 fd70 	bl	80002e4 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	1ad2      	subs	r2, r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d912      	bls.n	8008836 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	f043 0220 	orr.w	r2, r3, #32
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e007      	b.n	8008846 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008840:	2b80      	cmp	r3, #128	; 0x80
 8008842:	d1ce      	bne.n	80087e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800885a:	e029      	b.n	80088b0 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f8b6 	bl	80089ce <I2C_IsAcknowledgeFailed>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e029      	b.n	80088c0 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d01d      	beq.n	80088b0 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800887a:	f7f7 fd33 	bl	80002e4 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	d912      	bls.n	80088b0 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	f043 0220 	orr.w	r2, r3, #32
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e007      	b.n	80088c0 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d1ce      	bne.n	800885c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088d4:	e025      	b.n	8008922 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f879 	bl	80089ce <I2C_IsAcknowledgeFailed>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e025      	b.n	8008932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d007      	beq.n	80088fc <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80088ec:	f7f7 fcfa 	bl	80002e4 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	1ad2      	subs	r2, r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d912      	bls.n	8008922 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008900:	f043 0220 	orr.w	r2, r3, #32
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e007      	b.n	8008932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b10      	cmp	r3, #16
 800892e:	d1d2      	bne.n	80088d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008946:	e036      	b.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	2b10      	cmp	r3, #16
 8008954:	d114      	bne.n	8008980 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f06f 0210 	mvn.w	r2, #16
 800895e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e022      	b.n	80089c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8008986:	f7f7 fcad 	bl	80002e4 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d90f      	bls.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f043 0220 	orr.w	r2, r3, #32
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e007      	b.n	80089c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d1c1      	bne.n	8008948 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e4:	d114      	bne.n	8008a10 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089ee:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2204      	movs	r2, #4
 80089f4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
__weak void HAL_RCC_DeInit(void)
{}
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	bf00      	nop
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b08e      	sub	sp, #56	; 0x38
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8008a36:	2300      	movs	r3, #0
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d075      	beq.n	8008b32 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a46:	4ba5      	ldr	r3, [pc, #660]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f003 030c 	and.w	r3, r3, #12
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d00c      	beq.n	8008a6c <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a52:	4ba2      	ldr	r3, [pc, #648]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d112      	bne.n	8008a84 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a5e:	4b9f      	ldr	r3, [pc, #636]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a6a:	d10b      	bne.n	8008a84 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a6c:	4b9b      	ldr	r3, [pc, #620]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d05b      	beq.n	8008b30 <HAL_RCC_OscConfig+0x102>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d157      	bne.n	8008b30 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e225      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8c:	d106      	bne.n	8008a9c <HAL_RCC_OscConfig+0x6e>
 8008a8e:	4a93      	ldr	r2, [pc, #588]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008a90:	4b92      	ldr	r3, [pc, #584]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	e01d      	b.n	8008ad8 <HAL_RCC_OscConfig+0xaa>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008aa4:	d10c      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x92>
 8008aa6:	4a8d      	ldr	r2, [pc, #564]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008aa8:	4b8c      	ldr	r3, [pc, #560]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	4a8a      	ldr	r2, [pc, #552]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008ab4:	4b89      	ldr	r3, [pc, #548]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	e00b      	b.n	8008ad8 <HAL_RCC_OscConfig+0xaa>
 8008ac0:	4a86      	ldr	r2, [pc, #536]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008ac2:	4b86      	ldr	r3, [pc, #536]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	4a83      	ldr	r2, [pc, #524]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008ace:	4b83      	ldr	r3, [pc, #524]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ad6:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d013      	beq.n	8008b08 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7f7 fc00 	bl	80002e4 <HAL_GetTick>
 8008ae4:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ae8:	f7f7 fbfc 	bl	80002e4 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b64      	cmp	r3, #100	; 0x64
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e1ea      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008afa:	4b78      	ldr	r3, [pc, #480]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0f0      	beq.n	8008ae8 <HAL_RCC_OscConfig+0xba>
 8008b06:	e014      	b.n	8008b32 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b08:	f7f7 fbec 	bl	80002e4 <HAL_GetTick>
 8008b0c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b10:	f7f7 fbe8 	bl	80002e4 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b64      	cmp	r3, #100	; 0x64
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e1d6      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b22:	4b6e      	ldr	r3, [pc, #440]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1f0      	bne.n	8008b10 <HAL_RCC_OscConfig+0xe2>
 8008b2e:	e000      	b.n	8008b32 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d077      	beq.n	8008c2e <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b3e:	4b67      	ldr	r3, [pc, #412]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 030c 	and.w	r3, r3, #12
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b4a:	4b64      	ldr	r3, [pc, #400]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d126      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b56:	4b61      	ldr	r3, [pc, #388]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d120      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b62:	4b5e      	ldr	r3, [pc, #376]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <HAL_RCC_OscConfig+0x14c>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d001      	beq.n	8008b7a <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e1aa      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b7a:	4858      	ldr	r0, [pc, #352]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b7c:	4b57      	ldr	r3, [pc, #348]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6919      	ldr	r1, [r3, #16]
 8008b88:	23f8      	movs	r3, #248	; 0xf8
 8008b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	fa93 f3a3 	rbit	r3, r3
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	fab3 f383 	clz	r3, r3
 8008b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba2:	e044      	b.n	8008c2e <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d02a      	beq.n	8008c02 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bac:	4b4c      	ldr	r3, [pc, #304]	; (8008ce0 <HAL_RCC_OscConfig+0x2b2>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb2:	f7f7 fb97 	bl	80002e4 <HAL_GetTick>
 8008bb6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb8:	e008      	b.n	8008bcc <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bba:	f7f7 fb93 	bl	80002e4 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e181      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bcc:	4b43      	ldr	r3, [pc, #268]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0f0      	beq.n	8008bba <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd8:	4840      	ldr	r0, [pc, #256]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008bda:	4b40      	ldr	r3, [pc, #256]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6919      	ldr	r1, [r3, #16]
 8008be6:	23f8      	movs	r3, #248	; 0xf8
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	fa93 f3a3 	rbit	r3, r3
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	fab3 f383 	clz	r3, r3
 8008bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	6003      	str	r3, [r0, #0]
 8008c00:	e015      	b.n	8008c2e <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c02:	4b37      	ldr	r3, [pc, #220]	; (8008ce0 <HAL_RCC_OscConfig+0x2b2>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c08:	f7f7 fb6c 	bl	80002e4 <HAL_GetTick>
 8008c0c:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c10:	f7f7 fb68 	bl	80002e4 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e156      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c22:	4b2e      	ldr	r3, [pc, #184]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f0      	bne.n	8008c10 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d030      	beq.n	8008c9c <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d016      	beq.n	8008c70 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c42:	4b28      	ldr	r3, [pc, #160]	; (8008ce4 <HAL_RCC_OscConfig+0x2b6>)
 8008c44:	2201      	movs	r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c48:	f7f7 fb4c 	bl	80002e4 <HAL_GetTick>
 8008c4c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c50:	f7f7 fb48 	bl	80002e4 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e136      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c62:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0f0      	beq.n	8008c50 <HAL_RCC_OscConfig+0x222>
 8008c6e:	e015      	b.n	8008c9c <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c70:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <HAL_RCC_OscConfig+0x2b6>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c76:	f7f7 fb35 	bl	80002e4 <HAL_GetTick>
 8008c7a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c7e:	f7f7 fb31 	bl	80002e4 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e11f      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c90:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f0      	bne.n	8008c7e <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8087 	beq.w	8008db8 <HAL_RCC_OscConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008caa:	2300      	movs	r3, #0
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	4a0b      	ldr	r2, [pc, #44]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008cb0:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cba:	4b08      	ldr	r3, [pc, #32]	; (8008cdc <HAL_RCC_OscConfig+0x2ae>)
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc2:	60bb      	str	r3, [r7, #8]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008cc6:	4a08      	ldr	r2, [pc, #32]	; (8008ce8 <HAL_RCC_OscConfig+0x2ba>)
 8008cc8:	4b07      	ldr	r3, [pc, #28]	; (8008ce8 <HAL_RCC_OscConfig+0x2ba>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd0:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8008cd2:	f7f7 fb07 	bl	80002e4 <HAL_GetTick>
 8008cd6:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008cd8:	e011      	b.n	8008cfe <HAL_RCC_OscConfig+0x2d0>
 8008cda:	bf00      	nop
 8008cdc:	40023800 	.word	0x40023800
 8008ce0:	42470000 	.word	0x42470000
 8008ce4:	42470e80 	.word	0x42470e80
 8008ce8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008cec:	f7f7 fafa 	bl	80002e4 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e0e8      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008cfe:	4b76      	ldr	r3, [pc, #472]	; (8008ed8 <HAL_RCC_OscConfig+0x4aa>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f0      	beq.n	8008cec <HAL_RCC_OscConfig+0x2be>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d106      	bne.n	8008d20 <HAL_RCC_OscConfig+0x2f2>
 8008d12:	4a72      	ldr	r2, [pc, #456]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d14:	4b71      	ldr	r3, [pc, #452]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d18:	f043 0301 	orr.w	r3, r3, #1
 8008d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d1e:	e01c      	b.n	8008d5a <HAL_RCC_OscConfig+0x32c>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	d10c      	bne.n	8008d42 <HAL_RCC_OscConfig+0x314>
 8008d28:	4a6c      	ldr	r2, [pc, #432]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d2a:	4b6c      	ldr	r3, [pc, #432]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	f043 0304 	orr.w	r3, r3, #4
 8008d32:	6713      	str	r3, [r2, #112]	; 0x70
 8008d34:	4a69      	ldr	r2, [pc, #420]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d36:	4b69      	ldr	r3, [pc, #420]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d40:	e00b      	b.n	8008d5a <HAL_RCC_OscConfig+0x32c>
 8008d42:	4a66      	ldr	r2, [pc, #408]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d44:	4b65      	ldr	r3, [pc, #404]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	f023 0301 	bic.w	r3, r3, #1
 8008d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d4e:	4a63      	ldr	r2, [pc, #396]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d50:	4b62      	ldr	r3, [pc, #392]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d54:	f023 0304 	bic.w	r3, r3, #4
 8008d58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d015      	beq.n	8008d8e <HAL_RCC_OscConfig+0x360>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d62:	f7f7 fabf 	bl	80002e4 <HAL_GetTick>
 8008d66:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d68:	e00a      	b.n	8008d80 <HAL_RCC_OscConfig+0x352>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d6a:	f7f7 fabb 	bl	80002e4 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x352>
        {
          return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e0a7      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d80:	4b56      	ldr	r3, [pc, #344]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0ee      	beq.n	8008d6a <HAL_RCC_OscConfig+0x33c>
 8008d8c:	e014      	b.n	8008db8 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8e:	f7f7 faa9 	bl	80002e4 <HAL_GetTick>
 8008d92:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d94:	e00a      	b.n	8008dac <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d96:	f7f7 faa5 	bl	80002e4 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e091      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dac:	4b4b      	ldr	r3, [pc, #300]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1ee      	bne.n	8008d96 <HAL_RCC_OscConfig+0x368>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8086 	beq.w	8008ece <HAL_RCC_OscConfig+0x4a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dc2:	4b46      	ldr	r3, [pc, #280]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 030c 	and.w	r3, r3, #12
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d07d      	beq.n	8008eca <HAL_RCC_OscConfig+0x49c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d162      	bne.n	8008e9c <HAL_RCC_OscConfig+0x46e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd6:	4b42      	ldr	r3, [pc, #264]	; (8008ee0 <HAL_RCC_OscConfig+0x4b2>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ddc:	f7f7 fa82 	bl	80002e4 <HAL_GetTick>
 8008de0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008de2:	e008      	b.n	8008df6 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008de4:	f7f7 fa7e 	bl	80002e4 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e06c      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008df6:	4b39      	ldr	r3, [pc, #228]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1f0      	bne.n	8008de4 <HAL_RCC_OscConfig+0x3b6>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e02:	4836      	ldr	r0, [pc, #216]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	69da      	ldr	r2, [r3, #28]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	fa93 f3a3 	rbit	r3, r3
 8008e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	fab3 f383 	clz	r3, r3
 8008e26:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	1e59      	subs	r1, r3, #1
 8008e34:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008e38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	fa93 f3a3 	rbit	r3, r3
 8008e40:	617b      	str	r3, [r7, #20]
  return(result);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	fab3 f383 	clz	r3, r3
 8008e48:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e52:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8008e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	fa93 f3a3 	rbit	r3, r3
 8008e5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	fab3 f383 	clz	r3, r3
 8008e66:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <HAL_RCC_OscConfig+0x4b2>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e74:	f7f7 fa36 	bl	80002e4 <HAL_GetTick>
 8008e78:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e7c:	f7f7 fa32 	bl	80002e4 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e020      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f0      	beq.n	8008e7c <HAL_RCC_OscConfig+0x44e>
 8008e9a:	e018      	b.n	8008ece <HAL_RCC_OscConfig+0x4a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9c:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <HAL_RCC_OscConfig+0x4b2>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea2:	f7f7 fa1f 	bl	80002e4 <HAL_GetTick>
 8008ea6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eaa:	f7f7 fa1b 	bl	80002e4 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e009      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <HAL_RCC_OscConfig+0x4ae>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1f0      	bne.n	8008eaa <HAL_RCC_OscConfig+0x47c>
 8008ec8:	e001      	b.n	8008ece <HAL_RCC_OscConfig+0x4a0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a2>
    }
  }
  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3738      	adds	r7, #56	; 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40007000 	.word	0x40007000
 8008edc:	40023800 	.word	0x40023800
 8008ee0:	42470060 	.word	0x42470060

08008ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8008eee:	2300      	movs	r3, #0
 8008ef0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008ef2:	4b81      	ldr	r3, [pc, #516]	; (80090f8 <HAL_RCC_ClockConfig+0x214>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 020f 	and.w	r2, r3, #15
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d20c      	bcs.n	8008f1a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f00:	4b7d      	ldr	r3, [pc, #500]	; (80090f8 <HAL_RCC_ClockConfig+0x214>)
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f08:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <HAL_RCC_ClockConfig+0x214>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 020f 	and.w	r2, r3, #15
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d001      	beq.n	8008f1a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e0ea      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d008      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f26:	4975      	ldr	r1, [pc, #468]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f28:	4b74      	ldr	r3, [pc, #464]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8086 	beq.w	8009052 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d107      	bne.n	8008f5e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f4e:	4b6b      	ldr	r3, [pc, #428]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d119      	bne.n	8008f8e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0c8      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d003      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d107      	bne.n	8008f7e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f6e:	4b63      	ldr	r3, [pc, #396]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e0b8      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f7e:	4b5f      	ldr	r3, [pc, #380]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e0b0      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f8e:	495b      	ldr	r1, [pc, #364]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f90:	4b5a      	ldr	r3, [pc, #360]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f023 0203 	bic.w	r2, r3, #3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa0:	f7f7 f9a0 	bl	80002e4 <HAL_GetTick>
 8008fa4:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d112      	bne.n	8008fd4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008fae:	e00a      	b.n	8008fc6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fb0:	f7f7 f998 	bl	80002e4 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e094      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008fc6:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 030c 	and.w	r3, r3, #12
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d1ee      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0xcc>
 8008fd2:	e03e      	b.n	8009052 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d112      	bne.n	8009002 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fdc:	e00a      	b.n	8008ff4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fde:	f7f7 f981 	bl	80002e4 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e07d      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ff4:	4b41      	ldr	r3, [pc, #260]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f003 030c 	and.w	r3, r3, #12
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d1ee      	bne.n	8008fde <HAL_RCC_ClockConfig+0xfa>
 8009000:	e027      	b.n	8009052 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b03      	cmp	r3, #3
 8009008:	d11d      	bne.n	8009046 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800900a:	e00a      	b.n	8009022 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800900c:	f7f7 f96a 	bl	80002e4 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	f241 3288 	movw	r2, #5000	; 0x1388
 800901a:	4293      	cmp	r3, r2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e066      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8009022:	4b36      	ldr	r3, [pc, #216]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 030c 	and.w	r3, r3, #12
 800902a:	2b0c      	cmp	r3, #12
 800902c:	d1ee      	bne.n	800900c <HAL_RCC_ClockConfig+0x128>
 800902e:	e010      	b.n	8009052 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009030:	f7f7 f958 	bl	80002e4 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	f241 3288 	movw	r2, #5000	; 0x1388
 800903e:	4293      	cmp	r3, r2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e054      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009046:	4b2d      	ldr	r3, [pc, #180]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 030c 	and.w	r3, r3, #12
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1ee      	bne.n	8009030 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8009052:	4b29      	ldr	r3, [pc, #164]	; (80090f8 <HAL_RCC_ClockConfig+0x214>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 020f 	and.w	r2, r3, #15
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d90c      	bls.n	800907a <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009060:	4b25      	ldr	r3, [pc, #148]	; (80090f8 <HAL_RCC_ClockConfig+0x214>)
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	b2d2      	uxtb	r2, r2
 8009066:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009068:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <HAL_RCC_ClockConfig+0x214>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d001      	beq.n	800907a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e03a      	b.n	80090f0 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	d008      	beq.n	8009098 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009086:	491d      	ldr	r1, [pc, #116]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 8009088:	4b1c      	ldr	r3, [pc, #112]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0308 	and.w	r3, r3, #8
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090a4:	4915      	ldr	r1, [pc, #84]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 80090a6:	4b15      	ldr	r3, [pc, #84]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4313      	orrs	r3, r2
 80090b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80090b8:	f000 f8a6 	bl	8009208 <HAL_RCC_GetSysClockFreq>
 80090bc:	4601      	mov	r1, r0
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <HAL_RCC_ClockConfig+0x218>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090c6:	23f0      	movs	r3, #240	; 0xf0
 80090c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	fa93 f3a3 	rbit	r3, r3
 80090d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	fab3 f383 	clz	r3, r3
 80090d8:	fa22 f303 	lsr.w	r3, r2, r3
 80090dc:	4a08      	ldr	r2, [pc, #32]	; (8009100 <HAL_RCC_ClockConfig+0x21c>)
 80090de:	5cd3      	ldrb	r3, [r2, r3]
 80090e0:	fa21 f303 	lsr.w	r3, r1, r3
 80090e4:	4a07      	ldr	r2, [pc, #28]	; (8009104 <HAL_RCC_ClockConfig+0x220>)
 80090e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80090e8:	2000      	movs	r0, #0
 80090ea:	f7f7 f8d1 	bl	8000290 <HAL_InitTick>
  
  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	40023c00 	.word	0x40023c00
 80090fc:	40023800 	.word	0x40023800
 8009100:	08013564 	.word	0x08013564
 8009104:	20000000 	.word	0x20000000

08009108 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08c      	sub	sp, #48	; 0x30
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d129      	bne.n	800916e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800911a:	2300      	movs	r3, #0
 800911c:	61bb      	str	r3, [r7, #24]
 800911e:	4a2b      	ldr	r2, [pc, #172]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 8009120:	4b2a      	ldr	r3, [pc, #168]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	f043 0301 	orr.w	r3, r3, #1
 8009128:	6313      	str	r3, [r2, #48]	; 0x30
 800912a:	4b28      	ldr	r3, [pc, #160]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	61bb      	str	r3, [r7, #24]
 8009134:	69bb      	ldr	r3, [r7, #24]
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800913a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913c:	2302      	movs	r3, #2
 800913e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009140:	2303      	movs	r3, #3
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009144:	2300      	movs	r3, #0
 8009146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009148:	2300      	movs	r3, #0
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800914c:	f107 031c 	add.w	r3, r7, #28
 8009150:	4619      	mov	r1, r3
 8009152:	481f      	ldr	r0, [pc, #124]	; (80091d0 <HAL_RCC_MCOConfig+0xc8>)
 8009154:	f7fa fa52 	bl	80035fc <HAL_GPIO_Init>
    
    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009158:	481c      	ldr	r0, [pc, #112]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 800915a:	4b1c      	ldr	r3, [pc, #112]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	430b      	orrs	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800916c:	e029      	b.n	80091c2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800916e:	2300      	movs	r3, #0
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	4a16      	ldr	r2, [pc, #88]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 8009174:	4b15      	ldr	r3, [pc, #84]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 8009176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009178:	f043 0304 	orr.w	r3, r3, #4
 800917c:	6313      	str	r3, [r2, #48]	; 0x30
 800917e:	4b13      	ldr	r3, [pc, #76]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800918a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009190:	2302      	movs	r3, #2
 8009192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009194:	2303      	movs	r3, #3
 8009196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009198:	2300      	movs	r3, #0
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800919c:	2300      	movs	r3, #0
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80091a0:	f107 031c 	add.w	r3, r7, #28
 80091a4:	4619      	mov	r1, r3
 80091a6:	480b      	ldr	r0, [pc, #44]	; (80091d4 <HAL_RCC_MCOConfig+0xcc>)
 80091a8:	f7fa fa28 	bl	80035fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80091ac:	4807      	ldr	r0, [pc, #28]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <HAL_RCC_MCOConfig+0xc4>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	00d9      	lsls	r1, r3, #3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	430b      	orrs	r3, r1
 80091be:	4313      	orrs	r3, r2
 80091c0:	6083      	str	r3, [r0, #8]
}
 80091c2:	bf00      	nop
 80091c4:	3730      	adds	r7, #48	; 0x30
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40023800 	.word	0x40023800
 80091d0:	40020000 	.word	0x40020000
 80091d4:	40020800 	.word	0x40020800

080091d8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80091dc:	4b03      	ldr	r3, [pc, #12]	; (80091ec <HAL_RCC_EnableCSS+0x14>)
 80091de:	2201      	movs	r2, #1
 80091e0:	601a      	str	r2, [r3, #0]
}
 80091e2:	bf00      	nop
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	4247004c 	.word	0x4247004c

080091f0 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80091f4:	4b03      	ldr	r3, [pc, #12]	; (8009204 <HAL_RCC_DisableCSS+0x14>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	4247004c 	.word	0x4247004c

08009208 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009208:	b480      	push	{r7}
 800920a:	b08b      	sub	sp, #44	; 0x2c
 800920c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	2300      	movs	r3, #0
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f003 030c 	and.w	r3, r3, #12
 8009226:	2b04      	cmp	r3, #4
 8009228:	d006      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x30>
 800922a:	2b08      	cmp	r3, #8
 800922c:	d007      	beq.n	800923e <HAL_RCC_GetSysClockFreq+0x36>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d158      	bne.n	80092e4 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009232:	4b32      	ldr	r3, [pc, #200]	; (80092fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8009234:	623b      	str	r3, [r7, #32]
       break;
 8009236:	e058      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009238:	4b31      	ldr	r3, [pc, #196]	; (8009300 <HAL_RCC_GetSysClockFreq+0xf8>)
 800923a:	623b      	str	r3, [r7, #32]
      break;
 800923c:	e055      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800923e:	4b2e      	ldr	r3, [pc, #184]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009246:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009248:	4b2b      	ldr	r3, [pc, #172]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d017      	beq.n	8009284 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8009254:	4a2a      	ldr	r2, [pc, #168]	; (8009300 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	fbb2 f2f3 	udiv	r2, r2, r3
 800925c:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800925e:	6859      	ldr	r1, [r3, #4]
 8009260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009264:	400b      	ands	r3, r1
 8009266:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800926a:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800926c:	6979      	ldr	r1, [r7, #20]
 800926e:	fa91 f1a1 	rbit	r1, r1
 8009272:	6139      	str	r1, [r7, #16]
  return(result);
 8009274:	6939      	ldr	r1, [r7, #16]
 8009276:	fab1 f181 	clz	r1, r1
 800927a:	40cb      	lsrs	r3, r1
 800927c:	fb03 f302 	mul.w	r3, r3, r2
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
 8009282:	e016      	b.n	80092b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8009284:	4a1d      	ldr	r2, [pc, #116]	; (80092fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	fbb2 f2f3 	udiv	r2, r2, r3
 800928c:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800928e:	6859      	ldr	r1, [r3, #4]
 8009290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009294:	400b      	ands	r3, r1
 8009296:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800929a:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800929c:	68f9      	ldr	r1, [r7, #12]
 800929e:	fa91 f1a1 	rbit	r1, r1
 80092a2:	60b9      	str	r1, [r7, #8]
  return(result);
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	fab1 f181 	clz	r1, r1
 80092aa:	40cb      	lsrs	r3, r1
 80092ac:	fb03 f302 	mul.w	r3, r3, r2
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80092be:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	fa93 f3a3 	rbit	r3, r3
 80092c6:	603b      	str	r3, [r7, #0]
  return(result);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	fab3 f383 	clz	r3, r3
 80092ce:	fa22 f303 	lsr.w	r3, r2, r3
 80092d2:	3301      	adds	r3, #1
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80092d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e0:	623b      	str	r3, [r7, #32]
      break;
 80092e2:	e002      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <HAL_RCC_GetSysClockFreq+0xf4>)
 80092e6:	623b      	str	r3, [r7, #32]
      break;
 80092e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	372c      	adds	r7, #44	; 0x2c
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	40023800 	.word	0x40023800
 80092fc:	00f42400 	.word	0x00f42400
 8009300:	007a1200 	.word	0x007a1200

08009304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009308:	4b03      	ldr	r3, [pc, #12]	; (8009318 <HAL_RCC_GetHCLKFreq+0x14>)
 800930a:	681b      	ldr	r3, [r3, #0]
}
 800930c:	4618      	mov	r0, r3
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	20000000 	.word	0x20000000

0800931c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009322:	f7ff ffef 	bl	8009304 <HAL_RCC_GetHCLKFreq>
 8009326:	4601      	mov	r1, r0
 8009328:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009330:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009334:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	fa93 f3a3 	rbit	r3, r3
 800933c:	603b      	str	r3, [r7, #0]
  return(result);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	fab3 f383 	clz	r3, r3
 8009344:	fa22 f303 	lsr.w	r3, r2, r3
 8009348:	4a04      	ldr	r2, [pc, #16]	; (800935c <HAL_RCC_GetPCLK1Freq+0x40>)
 800934a:	5cd3      	ldrb	r3, [r2, r3]
 800934c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40023800 	.word	0x40023800
 800935c:	08013574 	.word	0x08013574

08009360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8009366:	f7ff ffcd 	bl	8009304 <HAL_RCC_GetHCLKFreq>
 800936a:	4601      	mov	r1, r0
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8009374:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009378:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	fa93 f3a3 	rbit	r3, r3
 8009380:	603b      	str	r3, [r7, #0]
  return(result);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	fab3 f383 	clz	r3, r3
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
 800938c:	4a04      	ldr	r2, [pc, #16]	; (80093a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800938e:	5cd3      	ldrb	r3, [r2, r3]
 8009390:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	08013574 	.word	0x08013574

080093a4 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b08b      	sub	sp, #44	; 0x2c
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	220f      	movs	r2, #15
 80093b0:	601a      	str	r2, [r3, #0]
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80093b2:	4b5a      	ldr	r3, [pc, #360]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093be:	d104      	bne.n	80093ca <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80093c6:	605a      	str	r2, [r3, #4]
 80093c8:	e00e      	b.n	80093e8 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80093ca:	4b54      	ldr	r3, [pc, #336]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d6:	d104      	bne.n	80093e2 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	e002      	b.n	80093e8 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80093e8:	4b4c      	ldr	r3, [pc, #304]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d103      	bne.n	80093fc <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	e002      	b.n	8009402 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8009402:	4b46      	ldr	r3, [pc, #280]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 800940a:	23f8      	movs	r3, #248	; 0xf8
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	fa93 f3a3 	rbit	r3, r3
 8009414:	623b      	str	r3, [r7, #32]
  return(result);
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	fab3 f383 	clz	r3, r3
 800941c:	40da      	lsrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8009422:	4b3e      	ldr	r3, [pc, #248]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b04      	cmp	r3, #4
 800942c:	d103      	bne.n	8009436 <HAL_RCC_GetOscConfig+0x92>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	e00c      	b.n	8009450 <HAL_RCC_GetOscConfig+0xac>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8009436:	4b39      	ldr	r3, [pc, #228]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 8009438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b01      	cmp	r3, #1
 8009440:	d103      	bne.n	800944a <HAL_RCC_GetOscConfig+0xa6>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	609a      	str	r2, [r3, #8]
 8009448:	e002      	b.n	8009450 <HAL_RCC_GetOscConfig+0xac>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8009450:	4b32      	ldr	r3, [pc, #200]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 8009452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b01      	cmp	r3, #1
 800945a:	d103      	bne.n	8009464 <HAL_RCC_GetOscConfig+0xc0>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	615a      	str	r2, [r3, #20]
 8009462:	e002      	b.n	800946a <HAL_RCC_GetOscConfig+0xc6>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	615a      	str	r2, [r3, #20]
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800946a:	4b2c      	ldr	r3, [pc, #176]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009476:	d103      	bne.n	8009480 <HAL_RCC_GetOscConfig+0xdc>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	619a      	str	r2, [r3, #24]
 800947e:	e002      	b.n	8009486 <HAL_RCC_GetOscConfig+0xe2>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009486:	4b25      	ldr	r3, [pc, #148]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8009492:	4b22      	ldr	r3, [pc, #136]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800949e:	4b1f      	ldr	r3, [pc, #124]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094a6:	4013      	ands	r3, r2
 80094a8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80094ac:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	fa92 f2a2 	rbit	r2, r2
 80094b4:	60ba      	str	r2, [r7, #8]
  return(result);
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	fab2 f282 	clz	r2, r2
 80094bc:	fa23 f202 	lsr.w	r2, r3, r2
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 80094c4:	4b15      	ldr	r3, [pc, #84]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80094d0:	005a      	lsls	r2, r3, #1
 80094d2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80094d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	fa93 f3a3 	rbit	r3, r3
 80094de:	613b      	str	r3, [r7, #16]
  return(result);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	fab3 f383 	clz	r3, r3
 80094e6:	40da      	lsrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 80094ec:	4b0b      	ldr	r3, [pc, #44]	; (800951c <HAL_RCC_GetOscConfig+0x178>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80094f4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80094f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	fa93 f3a3 	rbit	r3, r3
 8009500:	61bb      	str	r3, [r7, #24]
  return(result);
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	fab3 f383 	clz	r3, r3
 8009508:	40da      	lsrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800950e:	bf00      	nop
 8009510:	372c      	adds	r7, #44	; 0x2c
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40023800 	.word	0x40023800

08009520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	220f      	movs	r2, #15
 800952e:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009530:	4b12      	ldr	r3, [pc, #72]	; (800957c <HAL_RCC_GetClockConfig+0x5c>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 0203 	and.w	r2, r3, #3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800953c:	4b0f      	ldr	r3, [pc, #60]	; (800957c <HAL_RCC_GetClockConfig+0x5c>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8009548:	4b0c      	ldr	r3, [pc, #48]	; (800957c <HAL_RCC_GetClockConfig+0x5c>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009554:	4b09      	ldr	r3, [pc, #36]	; (800957c <HAL_RCC_GetClockConfig+0x5c>)
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	08db      	lsrs	r3, r3, #3
 800955a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8009562:	4b07      	ldr	r3, [pc, #28]	; (8009580 <HAL_RCC_GetClockConfig+0x60>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 020f 	and.w	r2, r3, #15
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	601a      	str	r2, [r3, #0]
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40023800 	.word	0x40023800
 8009580:	40023c00 	.word	0x40023c00

08009584 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009590:	2b80      	cmp	r3, #128	; 0x80
 8009592:	d104      	bne.n	800959e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009594:	f000 f80a 	bl	80095ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009598:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800959a:	2280      	movs	r2, #128	; 0x80
 800959c:	701a      	strb	r2, [r3, #0]
  }
}
 800959e:	bf00      	nop
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40023800 	.word	0x40023800
 80095a8:	4002380e 	.word	0x4002380e

080095ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */ 
}
 80095b0:	bf00      	nop
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop

080095bc <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e01d      	b.n	800960a <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f008 fce6 	bl	8011fb4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	f003 f8b4 	bl	800c768 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_TIM_Base_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{  
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6a1a      	ldr	r2, [r3, #32]
 8009628:	f241 1311 	movw	r3, #4369	; 0x1111
 800962c:	4013      	ands	r3, r2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10f      	bne.n	8009652 <HAL_TIM_Base_DeInit+0x40>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6a1a      	ldr	r2, [r3, #32]
 8009638:	f240 4344 	movw	r3, #1092	; 0x444
 800963c:	4013      	ands	r3, r2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d107      	bne.n	8009652 <HAL_TIM_Base_DeInit+0x40>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f008 fd0e 	bl	8012074 <HAL_TIM_Base_MspDeInit>
  
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <HAL_TIM_Base_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2202      	movs	r2, #2
 80096a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6812      	ldr	r2, [r2, #0]
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	f042 0201 	orr.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIM_Base_Stop>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10f      	bne.n	8009710 <HAL_TIM_Base_Stop+0x40>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6a1a      	ldr	r2, [r3, #32]
 80096f6:	f240 4344 	movw	r3, #1092	; 0x444
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d107      	bne.n	8009710 <HAL_TIM_Base_Stop+0x40>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	6812      	ldr	r2, [r2, #0]
 8009708:	6812      	ldr	r2, [r2, #0]
 800970a:	f022 0201 	bic.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	68d2      	ldr	r2, [r2, #12]
 8009738:	f042 0201 	orr.w	r2, r2, #1
 800973c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6812      	ldr	r2, [r2, #0]
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	f042 0201 	orr.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_TIM_Base_Stop_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6812      	ldr	r2, [r2, #0]
 800976c:	68d2      	ldr	r2, [r2, #12]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6a1a      	ldr	r2, [r3, #32]
 800977a:	f241 1311 	movw	r3, #4369	; 0x1111
 800977e:	4013      	ands	r3, r2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10f      	bne.n	80097a4 <HAL_TIM_Base_Stop_IT+0x48>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6a1a      	ldr	r2, [r3, #32]
 800978a:	f240 4344 	movw	r3, #1092	; 0x444
 800978e:	4013      	ands	r3, r2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d107      	bne.n	80097a4 <HAL_TIM_Base_Stop_IT+0x48>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	f022 0201 	bic.w	r2, r2, #1
 80097a2:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <HAL_TIM_Base_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	4613      	mov	r3, r2
 80097be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d101      	bne.n	80097d0 <HAL_TIM_Base_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80097cc:	2302      	movs	r3, #2
 80097ce:	e034      	b.n	800983a <HAL_TIM_Base_Start_DMA+0x88>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d10b      	bne.n	80097f4 <HAL_TIM_Base_Start_DMA+0x42>
  {
    if((pData == 0U) && (Length > 0)) 
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d104      	bne.n	80097ec <HAL_TIM_Base_Start_DMA+0x3a>
 80097e2:	88fb      	ldrh	r3, [r7, #6]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 80097e8:	2301      	movs	r3, #1
 80097ea:	e026      	b.n	800983a <HAL_TIM_Base_Start_DMA+0x88>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	4a12      	ldr	r2, [pc, #72]	; (8009844 <HAL_TIM_Base_Start_DMA+0x92>)
 80097fa:	63da      	str	r2, [r3, #60]	; 0x3c
     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	4a11      	ldr	r2, [pc, #68]	; (8009848 <HAL_TIM_Base_Start_DMA+0x96>)
 8009802:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	69d8      	ldr	r0, [r3, #28]
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	332c      	adds	r3, #44	; 0x2c
 8009810:	461a      	mov	r2, r3
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	f7f9 f9d9 	bl	8002bca <HAL_DMA_Start_IT>
  
  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	68d2      	ldr	r2, [r2, #12]
 8009822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	6812      	ldr	r2, [r2, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	0800cb77 	.word	0x0800cb77
 8009848:	0800ca9d 	.word	0x0800ca9d

0800984c <HAL_TIM_Base_Stop_DMA>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6812      	ldr	r2, [r2, #0]
 800985c:	68d2      	ldr	r2, [r2, #12]
 800985e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009862:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6a1a      	ldr	r2, [r3, #32]
 800986a:	f241 1311 	movw	r3, #4369	; 0x1111
 800986e:	4013      	ands	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10f      	bne.n	8009894 <HAL_TIM_Base_Stop_DMA+0x48>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6a1a      	ldr	r2, [r3, #32]
 800987a:	f240 4344 	movw	r3, #1092	; 0x444
 800987e:	4013      	ands	r3, r2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d107      	bne.n	8009894 <HAL_TIM_Base_Stop_DMA+0x48>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6812      	ldr	r2, [r2, #0]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	f022 0201 	bic.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]
    
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      
  /* Return function status */
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e01d      	b.n	80098f8 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f845 	bl	8009960 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f002 ff3d 	bl	800c768 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_TIM_OC_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   htim->State = HAL_TIM_STATE_BUSY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6a1a      	ldr	r2, [r3, #32]
 8009916:	f241 1311 	movw	r3, #4369	; 0x1111
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10f      	bne.n	8009940 <HAL_TIM_OC_DeInit+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6a1a      	ldr	r2, [r3, #32]
 8009926:	f240 4344 	movw	r3, #1092	; 0x444
 800992a:	4013      	ands	r3, r2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d107      	bne.n	8009940 <HAL_TIM_OC_DeInit+0x40>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	6812      	ldr	r2, [r2, #0]
 800993a:	f022 0201 	bic.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f817 	bl	8009974 <HAL_TIM_OC_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_TIM_OC_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_TIM_OC_MspDeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2201      	movs	r2, #1
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f003 f8c8 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a0b      	ldr	r2, [pc, #44]	; (80099d4 <HAL_TIM_OC_Start+0x4c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d107      	bne.n	80099ba <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6812      	ldr	r2, [r2, #0]
 80099b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80099b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	6812      	ldr	r2, [r2, #0]
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	f042 0201 	orr.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	40010000 	.word	0x40010000

080099d8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2200      	movs	r2, #0
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f003 f8a0 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1b      	ldr	r2, [pc, #108]	; (8009a64 <HAL_TIM_OC_Stop+0x8c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d117      	bne.n	8009a2a <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6a1a      	ldr	r2, [r3, #32]
 8009a00:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a04:	4013      	ands	r3, r2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10f      	bne.n	8009a2a <HAL_TIM_OC_Stop+0x52>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6a1a      	ldr	r2, [r3, #32]
 8009a10:	f240 4344 	movw	r3, #1092	; 0x444
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d107      	bne.n	8009a2a <HAL_TIM_OC_Stop+0x52>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6812      	ldr	r2, [r2, #0]
 8009a22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44
  }  
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);  
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6a1a      	ldr	r2, [r3, #32]
 8009a30:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a34:	4013      	ands	r3, r2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10f      	bne.n	8009a5a <HAL_TIM_OC_Stop+0x82>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6a1a      	ldr	r2, [r3, #32]
 8009a40:	f240 4344 	movw	r3, #1092	; 0x444
 8009a44:	4013      	ands	r3, r2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d107      	bne.n	8009a5a <HAL_TIM_OC_Stop+0x82>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	6812      	ldr	r2, [r2, #0]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	f022 0201 	bic.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}  
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40010000 	.word	0x40010000

08009a68 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b0c      	cmp	r3, #12
 8009a76:	d841      	bhi.n	8009afc <HAL_TIM_OC_Start_IT+0x94>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <HAL_TIM_OC_Start_IT+0x18>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009ab5 	.word	0x08009ab5
 8009a84:	08009afd 	.word	0x08009afd
 8009a88:	08009afd 	.word	0x08009afd
 8009a8c:	08009afd 	.word	0x08009afd
 8009a90:	08009ac7 	.word	0x08009ac7
 8009a94:	08009afd 	.word	0x08009afd
 8009a98:	08009afd 	.word	0x08009afd
 8009a9c:	08009afd 	.word	0x08009afd
 8009aa0:	08009ad9 	.word	0x08009ad9
 8009aa4:	08009afd 	.word	0x08009afd
 8009aa8:	08009afd 	.word	0x08009afd
 8009aac:	08009afd 	.word	0x08009afd
 8009ab0:	08009aeb 	.word	0x08009aeb
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6812      	ldr	r2, [r2, #0]
 8009abc:	68d2      	ldr	r2, [r2, #12]
 8009abe:	f042 0202 	orr.w	r2, r2, #2
 8009ac2:	60da      	str	r2, [r3, #12]
    }
    break;
 8009ac4:	e01b      	b.n	8009afe <HAL_TIM_OC_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	68d2      	ldr	r2, [r2, #12]
 8009ad0:	f042 0204 	orr.w	r2, r2, #4
 8009ad4:	60da      	str	r2, [r3, #12]
    }
    break;
 8009ad6:	e012      	b.n	8009afe <HAL_TIM_OC_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	68d2      	ldr	r2, [r2, #12]
 8009ae2:	f042 0208 	orr.w	r2, r2, #8
 8009ae6:	60da      	str	r2, [r3, #12]
    }
    break;
 8009ae8:	e009      	b.n	8009afe <HAL_TIM_OC_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	68d2      	ldr	r2, [r2, #12]
 8009af4:	f042 0210 	orr.w	r2, r2, #16
 8009af8:	60da      	str	r2, [r3, #12]
    }
    break;
 8009afa:	e000      	b.n	8009afe <HAL_TIM_OC_Start_IT+0x96>
    
    default:
    break;
 8009afc:	bf00      	nop
  } 

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2201      	movs	r2, #1
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f003 f812 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0b      	ldr	r2, [pc, #44]	; (8009b40 <HAL_TIM_OC_Start_IT+0xd8>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d107      	bne.n	8009b26 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	6812      	ldr	r2, [r2, #0]
 8009b30:	f042 0201 	orr.w	r2, r2, #1
 8009b34:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	40010000 	.word	0x40010000

08009b44 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b0c      	cmp	r3, #12
 8009b52:	d841      	bhi.n	8009bd8 <HAL_TIM_OC_Stop_IT+0x94>
 8009b54:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <HAL_TIM_OC_Stop_IT+0x18>)
 8009b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5a:	bf00      	nop
 8009b5c:	08009b91 	.word	0x08009b91
 8009b60:	08009bd9 	.word	0x08009bd9
 8009b64:	08009bd9 	.word	0x08009bd9
 8009b68:	08009bd9 	.word	0x08009bd9
 8009b6c:	08009ba3 	.word	0x08009ba3
 8009b70:	08009bd9 	.word	0x08009bd9
 8009b74:	08009bd9 	.word	0x08009bd9
 8009b78:	08009bd9 	.word	0x08009bd9
 8009b7c:	08009bb5 	.word	0x08009bb5
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bd9 	.word	0x08009bd9
 8009b88:	08009bd9 	.word	0x08009bd9
 8009b8c:	08009bc7 	.word	0x08009bc7
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6812      	ldr	r2, [r2, #0]
 8009b98:	68d2      	ldr	r2, [r2, #12]
 8009b9a:	f022 0202 	bic.w	r2, r2, #2
 8009b9e:	60da      	str	r2, [r3, #12]
    }
    break;
 8009ba0:	e01b      	b.n	8009bda <HAL_TIM_OC_Stop_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6812      	ldr	r2, [r2, #0]
 8009baa:	68d2      	ldr	r2, [r2, #12]
 8009bac:	f022 0204 	bic.w	r2, r2, #4
 8009bb0:	60da      	str	r2, [r3, #12]
    }
    break;
 8009bb2:	e012      	b.n	8009bda <HAL_TIM_OC_Stop_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6812      	ldr	r2, [r2, #0]
 8009bbc:	68d2      	ldr	r2, [r2, #12]
 8009bbe:	f022 0208 	bic.w	r2, r2, #8
 8009bc2:	60da      	str	r2, [r3, #12]
    }
    break;
 8009bc4:	e009      	b.n	8009bda <HAL_TIM_OC_Stop_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	68d2      	ldr	r2, [r2, #12]
 8009bd0:	f022 0210 	bic.w	r2, r2, #16
 8009bd4:	60da      	str	r2, [r3, #12]
    }
    break;
 8009bd6:	e000      	b.n	8009bda <HAL_TIM_OC_Stop_IT+0x96>
    
    default:
    break; 
 8009bd8:	bf00      	nop
  } 
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2200      	movs	r2, #0
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f002 ffa4 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <HAL_TIM_OC_Stop_IT+0x118>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d117      	bne.n	8009c22 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a1a      	ldr	r2, [r3, #32]
 8009bf8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10f      	bne.n	8009c22 <HAL_TIM_OC_Stop_IT+0xde>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6a1a      	ldr	r2, [r3, #32]
 8009c08:	f240 4344 	movw	r3, #1092	; 0x444
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d107      	bne.n	8009c22 <HAL_TIM_OC_Stop_IT+0xde>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);  
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6a1a      	ldr	r2, [r3, #32]
 8009c28:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10f      	bne.n	8009c52 <HAL_TIM_OC_Stop_IT+0x10e>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	f240 4344 	movw	r3, #1092	; 0x444
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d107      	bne.n	8009c52 <HAL_TIM_OC_Stop_IT+0x10e>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	6812      	ldr	r2, [r2, #0]
 8009c4c:	f022 0201 	bic.w	r2, r2, #1
 8009c50:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40010000 	.word	0x40010000

08009c60 <HAL_TIM_OC_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d101      	bne.n	8009c7e <HAL_TIM_OC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e0bc      	b.n	8009df8 <HAL_TIM_OC_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d10b      	bne.n	8009ca2 <HAL_TIM_OC_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d104      	bne.n	8009c9a <HAL_TIM_OC_Start_DMA+0x3a>
 8009c90:	887b      	ldrh	r3, [r7, #2]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 8009c96:	2301      	movs	r3, #1
 8009c98:	e0ae      	b.n	8009df8 <HAL_TIM_OC_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b0c      	cmp	r3, #12
 8009ca6:	f200 8089 	bhi.w	8009dbc <HAL_TIM_OC_Start_DMA+0x15c>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <HAL_TIM_OC_Start_DMA+0x50>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009ce5 	.word	0x08009ce5
 8009cb4:	08009dbd 	.word	0x08009dbd
 8009cb8:	08009dbd 	.word	0x08009dbd
 8009cbc:	08009dbd 	.word	0x08009dbd
 8009cc0:	08009d1b 	.word	0x08009d1b
 8009cc4:	08009dbd 	.word	0x08009dbd
 8009cc8:	08009dbd 	.word	0x08009dbd
 8009ccc:	08009dbd 	.word	0x08009dbd
 8009cd0:	08009d51 	.word	0x08009d51
 8009cd4:	08009dbd 	.word	0x08009dbd
 8009cd8:	08009dbd 	.word	0x08009dbd
 8009cdc:	08009dbd 	.word	0x08009dbd
 8009ce0:	08009d87 	.word	0x08009d87
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	4a45      	ldr	r2, [pc, #276]	; (8009e00 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8009cea:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	4a44      	ldr	r2, [pc, #272]	; (8009e04 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8009cf2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a18      	ldr	r0, [r3, #32]
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3334      	adds	r3, #52	; 0x34
 8009d00:	461a      	mov	r2, r3
 8009d02:	887b      	ldrh	r3, [r7, #2]
 8009d04:	f7f8 ff61 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	6812      	ldr	r2, [r2, #0]
 8009d10:	68d2      	ldr	r2, [r2, #12]
 8009d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d16:	60da      	str	r2, [r3, #12]
    }
    break;
 8009d18:	e051      	b.n	8009dbe <HAL_TIM_OC_Start_DMA+0x15e>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	4a38      	ldr	r2, [pc, #224]	; (8009e00 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	4a37      	ldr	r2, [pc, #220]	; (8009e04 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8009d28:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3338      	adds	r3, #56	; 0x38
 8009d36:	461a      	mov	r2, r3
 8009d38:	887b      	ldrh	r3, [r7, #2]
 8009d3a:	f7f8 ff46 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	68d2      	ldr	r2, [r2, #12]
 8009d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d4c:	60da      	str	r2, [r3, #12]
    }
    break;
 8009d4e:	e036      	b.n	8009dbe <HAL_TIM_OC_Start_DMA+0x15e>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	4a2a      	ldr	r2, [pc, #168]	; (8009e00 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8009d56:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	4a29      	ldr	r2, [pc, #164]	; (8009e04 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8009d5e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	333c      	adds	r3, #60	; 0x3c
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	887b      	ldrh	r3, [r7, #2]
 8009d70:	f7f8 ff2b 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	6812      	ldr	r2, [r2, #0]
 8009d7c:	68d2      	ldr	r2, [r2, #12]
 8009d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d82:	60da      	str	r2, [r3, #12]
    }
    break;
 8009d84:	e01b      	b.n	8009dbe <HAL_TIM_OC_Start_DMA+0x15e>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a1d      	ldr	r2, [pc, #116]	; (8009e00 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8009d8c:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	4a1c      	ldr	r2, [pc, #112]	; (8009e04 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8009d94:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3340      	adds	r3, #64	; 0x40
 8009da2:	461a      	mov	r2, r3
 8009da4:	887b      	ldrh	r3, [r7, #2]
 8009da6:	f7f8 ff10 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	68d2      	ldr	r2, [r2, #12]
 8009db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009db8:	60da      	str	r2, [r3, #12]
    }
    break;
 8009dba:	e000      	b.n	8009dbe <HAL_TIM_OC_Start_DMA+0x15e>
    
    default:
    break;
 8009dbc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 feb2 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a0d      	ldr	r2, [pc, #52]	; (8009e08 <HAL_TIM_OC_Start_DMA+0x1a8>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d107      	bne.n	8009de6 <HAL_TIM_OC_Start_DMA+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009de4:	645a      	str	r2, [r3, #68]	; 0x44
  }  
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	6812      	ldr	r2, [r2, #0]
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	f042 0201 	orr.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	0800ca2d 	.word	0x0800ca2d
 8009e04:	0800ca9d 	.word	0x0800ca9d
 8009e08:	40010000 	.word	0x40010000

08009e0c <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2b0c      	cmp	r3, #12
 8009e1a:	d841      	bhi.n	8009ea0 <HAL_TIM_OC_Stop_DMA+0x94>
 8009e1c:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <HAL_TIM_OC_Stop_DMA+0x18>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e59 	.word	0x08009e59
 8009e28:	08009ea1 	.word	0x08009ea1
 8009e2c:	08009ea1 	.word	0x08009ea1
 8009e30:	08009ea1 	.word	0x08009ea1
 8009e34:	08009e6b 	.word	0x08009e6b
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009ea1 	.word	0x08009ea1
 8009e40:	08009ea1 	.word	0x08009ea1
 8009e44:	08009e7d 	.word	0x08009e7d
 8009e48:	08009ea1 	.word	0x08009ea1
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009ea1 	.word	0x08009ea1
 8009e54:	08009e8f 	.word	0x08009e8f
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	68d2      	ldr	r2, [r2, #12]
 8009e62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e66:	60da      	str	r2, [r3, #12]
    }
    break;
 8009e68:	e01b      	b.n	8009ea2 <HAL_TIM_OC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6812      	ldr	r2, [r2, #0]
 8009e72:	68d2      	ldr	r2, [r2, #12]
 8009e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e78:	60da      	str	r2, [r3, #12]
    }
    break;
 8009e7a:	e012      	b.n	8009ea2 <HAL_TIM_OC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	68d2      	ldr	r2, [r2, #12]
 8009e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e8a:	60da      	str	r2, [r3, #12]
    }
    break;
 8009e8c:	e009      	b.n	8009ea2 <HAL_TIM_OC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	68d2      	ldr	r2, [r2, #12]
 8009e98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e9c:	60da      	str	r2, [r3, #12]
    }
    break;
 8009e9e:	e000      	b.n	8009ea2 <HAL_TIM_OC_Stop_DMA+0x96>
    
    default:
    break;
 8009ea0:	bf00      	nop
  } 
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f002 fe40 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1d      	ldr	r2, [pc, #116]	; (8009f2c <HAL_TIM_OC_Stop_DMA+0x120>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d117      	bne.n	8009eea <HAL_TIM_OC_Stop_DMA+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a1a      	ldr	r2, [r3, #32]
 8009ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10f      	bne.n	8009eea <HAL_TIM_OC_Stop_DMA+0xde>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6a1a      	ldr	r2, [r3, #32]
 8009ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d107      	bne.n	8009eea <HAL_TIM_OC_Stop_DMA+0xde>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6812      	ldr	r2, [r2, #0]
 8009ee2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6a1a      	ldr	r2, [r3, #32]
 8009ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10f      	bne.n	8009f1a <HAL_TIM_OC_Stop_DMA+0x10e>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6a1a      	ldr	r2, [r3, #32]
 8009f00:	f240 4344 	movw	r3, #1092	; 0x444
 8009f04:	4013      	ands	r3, r2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d107      	bne.n	8009f1a <HAL_TIM_OC_Stop_DMA+0x10e>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6812      	ldr	r2, [r2, #0]
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	f022 0201 	bic.w	r2, r2, #1
 8009f18:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	40010000 	.word	0x40010000

08009f30 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e01d      	b.n	8009f7e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f845 	bl	8009fe6 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f002 fbfa 	bl	800c768 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}  
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_TIM_PWM_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2202      	movs	r2, #2
 8009f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6a1a      	ldr	r2, [r3, #32]
 8009f9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10f      	bne.n	8009fc6 <HAL_TIM_PWM_DeInit+0x40>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6a1a      	ldr	r2, [r3, #32]
 8009fac:	f240 4344 	movw	r3, #1092	; 0x444
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d107      	bne.n	8009fc6 <HAL_TIM_PWM_DeInit+0x40>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	f022 0201 	bic.w	r2, r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f817 	bl	8009ffa <HAL_TIM_PWM_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fee:	bf00      	nop
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <HAL_TIM_PWM_MspDeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800a002:	bf00      	nop
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2201      	movs	r2, #1
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	4618      	mov	r0, r3
 800a022:	f002 fd85 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a0c      	ldr	r2, [pc, #48]	; (800a05c <HAL_TIM_PWM_Start+0x4e>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d107      	bne.n	800a040 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a03a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a03e:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6812      	ldr	r2, [r2, #0]
 800a048:	6812      	ldr	r2, [r2, #0]
 800a04a:	f042 0201 	orr.w	r2, r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800a050:	2300      	movs	r3, #0
} 
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40010000 	.word	0x40010000

0800a060 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2200      	movs	r2, #0
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	f002 fd5c 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a1d      	ldr	r2, [pc, #116]	; (800a0f4 <HAL_TIM_PWM_Stop+0x94>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d117      	bne.n	800a0b2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	f241 1311 	movw	r3, #4369	; 0x1111
 800a08c:	4013      	ands	r3, r2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10f      	bne.n	800a0b2 <HAL_TIM_PWM_Stop+0x52>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6a1a      	ldr	r2, [r3, #32]
 800a098:	f240 4344 	movw	r3, #1092	; 0x444
 800a09c:	4013      	ands	r3, r2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d107      	bne.n	800a0b2 <HAL_TIM_PWM_Stop+0x52>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a0ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a1a      	ldr	r2, [r3, #32]
 800a0b8:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10f      	bne.n	800a0e2 <HAL_TIM_PWM_Stop+0x82>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6a1a      	ldr	r2, [r3, #32]
 800a0c8:	f240 4344 	movw	r3, #1092	; 0x444
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d107      	bne.n	800a0e2 <HAL_TIM_PWM_Stop+0x82>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	6812      	ldr	r2, [r2, #0]
 800a0dc:	f022 0201 	bic.w	r2, r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
} 
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	40010000 	.word	0x40010000

0800a0f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b0c      	cmp	r3, #12
 800a106:	d841      	bhi.n	800a18c <HAL_TIM_PWM_Start_IT+0x94>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <HAL_TIM_PWM_Start_IT+0x18>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a18d 	.word	0x0800a18d
 800a118:	0800a18d 	.word	0x0800a18d
 800a11c:	0800a18d 	.word	0x0800a18d
 800a120:	0800a157 	.word	0x0800a157
 800a124:	0800a18d 	.word	0x0800a18d
 800a128:	0800a18d 	.word	0x0800a18d
 800a12c:	0800a18d 	.word	0x0800a18d
 800a130:	0800a169 	.word	0x0800a169
 800a134:	0800a18d 	.word	0x0800a18d
 800a138:	0800a18d 	.word	0x0800a18d
 800a13c:	0800a18d 	.word	0x0800a18d
 800a140:	0800a17b 	.word	0x0800a17b
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6812      	ldr	r2, [r2, #0]
 800a14c:	68d2      	ldr	r2, [r2, #12]
 800a14e:	f042 0202 	orr.w	r2, r2, #2
 800a152:	60da      	str	r2, [r3, #12]
    }
    break;
 800a154:	e01b      	b.n	800a18e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	6812      	ldr	r2, [r2, #0]
 800a15e:	68d2      	ldr	r2, [r2, #12]
 800a160:	f042 0204 	orr.w	r2, r2, #4
 800a164:	60da      	str	r2, [r3, #12]
    }
    break;
 800a166:	e012      	b.n	800a18e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	68d2      	ldr	r2, [r2, #12]
 800a172:	f042 0208 	orr.w	r2, r2, #8
 800a176:	60da      	str	r2, [r3, #12]
    }
    break;
 800a178:	e009      	b.n	800a18e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	68d2      	ldr	r2, [r2, #12]
 800a184:	f042 0210 	orr.w	r2, r2, #16
 800a188:	60da      	str	r2, [r3, #12]
    }
    break;
 800a18a:	e000      	b.n	800a18e <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 800a18c:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2201      	movs	r2, #1
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	4618      	mov	r0, r3
 800a198:	f002 fcca 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <HAL_TIM_PWM_Start_IT+0xd8>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d107      	bne.n	800a1b6 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a1b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	6812      	ldr	r2, [r2, #0]
 800a1c0:	f042 0201 	orr.w	r2, r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
} 
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	40010000 	.word	0x40010000

0800a1d4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b0c      	cmp	r3, #12
 800a1e2:	d841      	bhi.n	800a268 <HAL_TIM_PWM_Stop_IT+0x94>
 800a1e4:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <HAL_TIM_PWM_Stop_IT+0x18>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a221 	.word	0x0800a221
 800a1f0:	0800a269 	.word	0x0800a269
 800a1f4:	0800a269 	.word	0x0800a269
 800a1f8:	0800a269 	.word	0x0800a269
 800a1fc:	0800a233 	.word	0x0800a233
 800a200:	0800a269 	.word	0x0800a269
 800a204:	0800a269 	.word	0x0800a269
 800a208:	0800a269 	.word	0x0800a269
 800a20c:	0800a245 	.word	0x0800a245
 800a210:	0800a269 	.word	0x0800a269
 800a214:	0800a269 	.word	0x0800a269
 800a218:	0800a269 	.word	0x0800a269
 800a21c:	0800a257 	.word	0x0800a257
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	68d2      	ldr	r2, [r2, #12]
 800a22a:	f022 0202 	bic.w	r2, r2, #2
 800a22e:	60da      	str	r2, [r3, #12]
    }
    break;
 800a230:	e01b      	b.n	800a26a <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	68d2      	ldr	r2, [r2, #12]
 800a23c:	f022 0204 	bic.w	r2, r2, #4
 800a240:	60da      	str	r2, [r3, #12]
    }
    break;
 800a242:	e012      	b.n	800a26a <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	68d2      	ldr	r2, [r2, #12]
 800a24e:	f022 0208 	bic.w	r2, r2, #8
 800a252:	60da      	str	r2, [r3, #12]
    }
    break;
 800a254:	e009      	b.n	800a26a <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	68d2      	ldr	r2, [r2, #12]
 800a260:	f022 0210 	bic.w	r2, r2, #16
 800a264:	60da      	str	r2, [r3, #12]
    }
    break;
 800a266:	e000      	b.n	800a26a <HAL_TIM_PWM_Stop_IT+0x96>
    
    default:
    break; 
 800a268:	bf00      	nop
  }
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2200      	movs	r2, #0
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	f002 fc5c 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ec <HAL_TIM_PWM_Stop_IT+0x118>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d117      	bne.n	800a2b2 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6a1a      	ldr	r2, [r3, #32]
 800a288:	f241 1311 	movw	r3, #4369	; 0x1111
 800a28c:	4013      	ands	r3, r2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10f      	bne.n	800a2b2 <HAL_TIM_PWM_Stop_IT+0xde>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6a1a      	ldr	r2, [r3, #32]
 800a298:	f240 4344 	movw	r3, #1092	; 0x444
 800a29c:	4013      	ands	r3, r2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d107      	bne.n	800a2b2 <HAL_TIM_PWM_Stop_IT+0xde>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a2ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6a1a      	ldr	r2, [r3, #32]
 800a2b8:	f241 1311 	movw	r3, #4369	; 0x1111
 800a2bc:	4013      	ands	r3, r2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10f      	bne.n	800a2e2 <HAL_TIM_PWM_Stop_IT+0x10e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6a1a      	ldr	r2, [r3, #32]
 800a2c8:	f240 4344 	movw	r3, #1092	; 0x444
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <HAL_TIM_PWM_Stop_IT+0x10e>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	f022 0201 	bic.w	r2, r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
} 
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40010000 	.word	0x40010000

0800a2f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d101      	bne.n	800a30e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800a30a:	2302      	movs	r3, #2
 800a30c:	e0bc      	b.n	800a488 <HAL_TIM_PWM_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b01      	cmp	r3, #1
 800a318:	d10b      	bne.n	800a332 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <HAL_TIM_PWM_Start_DMA+0x3a>
 800a320:	887b      	ldrh	r3, [r7, #2]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800a326:	2301      	movs	r3, #1
 800a328:	e0ae      	b.n	800a488 <HAL_TIM_PWM_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2202      	movs	r2, #2
 800a32e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b0c      	cmp	r3, #12
 800a336:	f200 8089 	bhi.w	800a44c <HAL_TIM_PWM_Start_DMA+0x15c>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <HAL_TIM_PWM_Start_DMA+0x50>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a375 	.word	0x0800a375
 800a344:	0800a44d 	.word	0x0800a44d
 800a348:	0800a44d 	.word	0x0800a44d
 800a34c:	0800a44d 	.word	0x0800a44d
 800a350:	0800a3ab 	.word	0x0800a3ab
 800a354:	0800a44d 	.word	0x0800a44d
 800a358:	0800a44d 	.word	0x0800a44d
 800a35c:	0800a44d 	.word	0x0800a44d
 800a360:	0800a3e1 	.word	0x0800a3e1
 800a364:	0800a44d 	.word	0x0800a44d
 800a368:	0800a44d 	.word	0x0800a44d
 800a36c:	0800a44d 	.word	0x0800a44d
 800a370:	0800a417 	.word	0x0800a417
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	4a45      	ldr	r2, [pc, #276]	; (800a490 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800a37a:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	4a44      	ldr	r2, [pc, #272]	; (800a494 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800a382:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a18      	ldr	r0, [r3, #32]
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3334      	adds	r3, #52	; 0x34
 800a390:	461a      	mov	r2, r3
 800a392:	887b      	ldrh	r3, [r7, #2]
 800a394:	f7f8 fc19 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	6812      	ldr	r2, [r2, #0]
 800a3a0:	68d2      	ldr	r2, [r2, #12]
 800a3a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3a6:	60da      	str	r2, [r3, #12]
    }
    break;
 800a3a8:	e051      	b.n	800a44e <HAL_TIM_PWM_Start_DMA+0x15e>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	4a38      	ldr	r2, [pc, #224]	; (800a490 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800a3b0:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	4a37      	ldr	r2, [pc, #220]	; (800a494 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800a3b8:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3338      	adds	r3, #56	; 0x38
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	887b      	ldrh	r3, [r7, #2]
 800a3ca:	f7f8 fbfe 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	68d2      	ldr	r2, [r2, #12]
 800a3d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3dc:	60da      	str	r2, [r3, #12]
    }
    break;
 800a3de:	e036      	b.n	800a44e <HAL_TIM_PWM_Start_DMA+0x15e>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	4a2a      	ldr	r2, [pc, #168]	; (800a490 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800a3e6:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	4a29      	ldr	r2, [pc, #164]	; (800a494 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800a3ee:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	333c      	adds	r3, #60	; 0x3c
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	887b      	ldrh	r3, [r7, #2]
 800a400:	f7f8 fbe3 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	6812      	ldr	r2, [r2, #0]
 800a40c:	68d2      	ldr	r2, [r2, #12]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a412:	60da      	str	r2, [r3, #12]
    }
    break;
 800a414:	e01b      	b.n	800a44e <HAL_TIM_PWM_Start_DMA+0x15e>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41a:	4a1d      	ldr	r2, [pc, #116]	; (800a490 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800a41c:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	4a1c      	ldr	r2, [pc, #112]	; (800a494 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800a424:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3340      	adds	r3, #64	; 0x40
 800a432:	461a      	mov	r2, r3
 800a434:	887b      	ldrh	r3, [r7, #2]
 800a436:	f7f8 fbc8 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	6812      	ldr	r2, [r2, #0]
 800a442:	68d2      	ldr	r2, [r2, #12]
 800a444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a448:	60da      	str	r2, [r3, #12]
    }
    break;
 800a44a:	e000      	b.n	800a44e <HAL_TIM_PWM_Start_DMA+0x15e>
    
    default:
    break;
 800a44c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2201      	movs	r2, #1
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	4618      	mov	r0, r3
 800a458:	f002 fb6a 	bl	800cb30 <TIM_CCxChannelCmd>
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a0d      	ldr	r2, [pc, #52]	; (800a498 <HAL_TIM_PWM_Start_DMA+0x1a8>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d107      	bne.n	800a476 <HAL_TIM_PWM_Start_DMA+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	6812      	ldr	r2, [r2, #0]
 800a46e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a474:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	6812      	ldr	r2, [r2, #0]
 800a47e:	6812      	ldr	r2, [r2, #0]
 800a480:	f042 0201 	orr.w	r2, r2, #1
 800a484:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	0800ca2d 	.word	0x0800ca2d
 800a494:	0800ca9d 	.word	0x0800ca9d
 800a498:	40010000 	.word	0x40010000

0800a49c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b0c      	cmp	r3, #12
 800a4aa:	d841      	bhi.n	800a530 <HAL_TIM_PWM_Stop_DMA+0x94>
 800a4ac:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b2:	bf00      	nop
 800a4b4:	0800a4e9 	.word	0x0800a4e9
 800a4b8:	0800a531 	.word	0x0800a531
 800a4bc:	0800a531 	.word	0x0800a531
 800a4c0:	0800a531 	.word	0x0800a531
 800a4c4:	0800a4fb 	.word	0x0800a4fb
 800a4c8:	0800a531 	.word	0x0800a531
 800a4cc:	0800a531 	.word	0x0800a531
 800a4d0:	0800a531 	.word	0x0800a531
 800a4d4:	0800a50d 	.word	0x0800a50d
 800a4d8:	0800a531 	.word	0x0800a531
 800a4dc:	0800a531 	.word	0x0800a531
 800a4e0:	0800a531 	.word	0x0800a531
 800a4e4:	0800a51f 	.word	0x0800a51f
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	68d2      	ldr	r2, [r2, #12]
 800a4f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a4f6:	60da      	str	r2, [r3, #12]
    }
    break;
 800a4f8:	e01b      	b.n	800a532 <HAL_TIM_PWM_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6812      	ldr	r2, [r2, #0]
 800a502:	68d2      	ldr	r2, [r2, #12]
 800a504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a508:	60da      	str	r2, [r3, #12]
    }
    break;
 800a50a:	e012      	b.n	800a532 <HAL_TIM_PWM_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	6812      	ldr	r2, [r2, #0]
 800a514:	68d2      	ldr	r2, [r2, #12]
 800a516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a51a:	60da      	str	r2, [r3, #12]
    }
    break;
 800a51c:	e009      	b.n	800a532 <HAL_TIM_PWM_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	6812      	ldr	r2, [r2, #0]
 800a526:	68d2      	ldr	r2, [r2, #12]
 800a528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a52c:	60da      	str	r2, [r3, #12]
    }
    break;
 800a52e:	e000      	b.n	800a532 <HAL_TIM_PWM_Stop_DMA+0x96>
    
    default:
    break;
 800a530:	bf00      	nop
  } 
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f002 faf8 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a1d      	ldr	r2, [pc, #116]	; (800a5bc <HAL_TIM_PWM_Stop_DMA+0x120>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d117      	bne.n	800a57a <HAL_TIM_PWM_Stop_DMA+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6a1a      	ldr	r2, [r3, #32]
 800a550:	f241 1311 	movw	r3, #4369	; 0x1111
 800a554:	4013      	ands	r3, r2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10f      	bne.n	800a57a <HAL_TIM_PWM_Stop_DMA+0xde>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6a1a      	ldr	r2, [r3, #32]
 800a560:	f240 4344 	movw	r3, #1092	; 0x444
 800a564:	4013      	ands	r3, r2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d107      	bne.n	800a57a <HAL_TIM_PWM_Stop_DMA+0xde>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6812      	ldr	r2, [r2, #0]
 800a572:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a578:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6a1a      	ldr	r2, [r3, #32]
 800a580:	f241 1311 	movw	r3, #4369	; 0x1111
 800a584:	4013      	ands	r3, r2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10f      	bne.n	800a5aa <HAL_TIM_PWM_Stop_DMA+0x10e>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6a1a      	ldr	r2, [r3, #32]
 800a590:	f240 4344 	movw	r3, #1092	; 0x444
 800a594:	4013      	ands	r3, r2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d107      	bne.n	800a5aa <HAL_TIM_PWM_Stop_DMA+0x10e>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	f022 0201 	bic.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	40010000 	.word	0x40010000

0800a5c0 <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e01d      	b.n	800a60e <HAL_TIM_IC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d106      	bne.n	800a5ec <HAL_TIM_IC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f845 	bl	800a676 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4610      	mov	r0, r2
 800a600:	f002 f8b2 	bl	800c768 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_TIM_IC_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2202      	movs	r2, #2
 800a622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6a1a      	ldr	r2, [r3, #32]
 800a62c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a630:	4013      	ands	r3, r2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10f      	bne.n	800a656 <HAL_TIM_IC_DeInit+0x40>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6a1a      	ldr	r2, [r3, #32]
 800a63c:	f240 4344 	movw	r3, #1092	; 0x444
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	d107      	bne.n	800a656 <HAL_TIM_IC_DeInit+0x40>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	6812      	ldr	r2, [r2, #0]
 800a650:	f022 0201 	bic.w	r2, r2, #1
 800a654:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f817 	bl	800a68a <HAL_TIM_IC_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_TIM_IC_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_TIM_IC_MspDeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f002 fa3d 	bl	800cb30 <TIM_CCxChannelCmd>
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	f042 0201 	orr.w	r2, r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;  
 800a6c6:	2300      	movs	r3, #0
} 
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 fa24 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6a1a      	ldr	r2, [r3, #32]
 800a6ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10f      	bne.n	800a718 <HAL_TIM_IC_Stop+0x48>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6a1a      	ldr	r2, [r3, #32]
 800a6fe:	f240 4344 	movw	r3, #1092	; 0x444
 800a702:	4013      	ands	r3, r2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d107      	bne.n	800a718 <HAL_TIM_IC_Stop+0x48>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6812      	ldr	r2, [r2, #0]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	f022 0201 	bic.w	r2, r2, #1
 800a716:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b0c      	cmp	r3, #12
 800a730:	d840      	bhi.n	800a7b4 <HAL_TIM_IC_Start_IT+0x92>
 800a732:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <HAL_TIM_IC_Start_IT+0x16>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a76d 	.word	0x0800a76d
 800a73c:	0800a7b5 	.word	0x0800a7b5
 800a740:	0800a7b5 	.word	0x0800a7b5
 800a744:	0800a7b5 	.word	0x0800a7b5
 800a748:	0800a77f 	.word	0x0800a77f
 800a74c:	0800a7b5 	.word	0x0800a7b5
 800a750:	0800a7b5 	.word	0x0800a7b5
 800a754:	0800a7b5 	.word	0x0800a7b5
 800a758:	0800a791 	.word	0x0800a791
 800a75c:	0800a7b5 	.word	0x0800a7b5
 800a760:	0800a7b5 	.word	0x0800a7b5
 800a764:	0800a7b5 	.word	0x0800a7b5
 800a768:	0800a7a3 	.word	0x0800a7a3
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6812      	ldr	r2, [r2, #0]
 800a774:	68d2      	ldr	r2, [r2, #12]
 800a776:	f042 0202 	orr.w	r2, r2, #2
 800a77a:	60da      	str	r2, [r3, #12]
    }
    break;
 800a77c:	e01b      	b.n	800a7b6 <HAL_TIM_IC_Start_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6812      	ldr	r2, [r2, #0]
 800a786:	68d2      	ldr	r2, [r2, #12]
 800a788:	f042 0204 	orr.w	r2, r2, #4
 800a78c:	60da      	str	r2, [r3, #12]
    }
    break;
 800a78e:	e012      	b.n	800a7b6 <HAL_TIM_IC_Start_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	68d2      	ldr	r2, [r2, #12]
 800a79a:	f042 0208 	orr.w	r2, r2, #8
 800a79e:	60da      	str	r2, [r3, #12]
    }
    break;
 800a7a0:	e009      	b.n	800a7b6 <HAL_TIM_IC_Start_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	68d2      	ldr	r2, [r2, #12]
 800a7ac:	f042 0210 	orr.w	r2, r2, #16
 800a7b0:	60da      	str	r2, [r3, #12]
    }
    break;
 800a7b2:	e000      	b.n	800a7b6 <HAL_TIM_IC_Start_IT+0x94>
    
    default:
    break;
 800a7b4:	bf00      	nop
  }  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f002 f9b6 	bl	800cb30 <TIM_CCxChannelCmd>
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	f042 0201 	orr.w	r2, r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;  
 800a7d4:	2300      	movs	r3, #0
} 
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b0c      	cmp	r3, #12
 800a7ec:	d840      	bhi.n	800a870 <HAL_TIM_IC_Stop_IT+0x92>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <HAL_TIM_IC_Stop_IT+0x16>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a829 	.word	0x0800a829
 800a7f8:	0800a871 	.word	0x0800a871
 800a7fc:	0800a871 	.word	0x0800a871
 800a800:	0800a871 	.word	0x0800a871
 800a804:	0800a83b 	.word	0x0800a83b
 800a808:	0800a871 	.word	0x0800a871
 800a80c:	0800a871 	.word	0x0800a871
 800a810:	0800a871 	.word	0x0800a871
 800a814:	0800a84d 	.word	0x0800a84d
 800a818:	0800a871 	.word	0x0800a871
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a871 	.word	0x0800a871
 800a824:	0800a85f 	.word	0x0800a85f
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	68d2      	ldr	r2, [r2, #12]
 800a832:	f022 0202 	bic.w	r2, r2, #2
 800a836:	60da      	str	r2, [r3, #12]
    }
    break;
 800a838:	e01b      	b.n	800a872 <HAL_TIM_IC_Stop_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6812      	ldr	r2, [r2, #0]
 800a842:	68d2      	ldr	r2, [r2, #12]
 800a844:	f022 0204 	bic.w	r2, r2, #4
 800a848:	60da      	str	r2, [r3, #12]
    }
    break;
 800a84a:	e012      	b.n	800a872 <HAL_TIM_IC_Stop_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	6812      	ldr	r2, [r2, #0]
 800a854:	68d2      	ldr	r2, [r2, #12]
 800a856:	f022 0208 	bic.w	r2, r2, #8
 800a85a:	60da      	str	r2, [r3, #12]
    }
    break;
 800a85c:	e009      	b.n	800a872 <HAL_TIM_IC_Stop_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6812      	ldr	r2, [r2, #0]
 800a866:	68d2      	ldr	r2, [r2, #12]
 800a868:	f022 0210 	bic.w	r2, r2, #16
 800a86c:	60da      	str	r2, [r3, #12]
    }
    break;
 800a86e:	e000      	b.n	800a872 <HAL_TIM_IC_Stop_IT+0x94>
    
    default:
    break; 
 800a870:	bf00      	nop
  } 
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2200      	movs	r2, #0
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f002 f958 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6a1a      	ldr	r2, [r3, #32]
 800a886:	f241 1311 	movw	r3, #4369	; 0x1111
 800a88a:	4013      	ands	r3, r2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10f      	bne.n	800a8b0 <HAL_TIM_IC_Stop_IT+0xd2>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6a1a      	ldr	r2, [r3, #32]
 800a896:	f240 4344 	movw	r3, #1092	; 0x444
 800a89a:	4013      	ands	r3, r2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d107      	bne.n	800a8b0 <HAL_TIM_IC_Stop_IT+0xd2>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6812      	ldr	r2, [r2, #0]
 800a8a8:	6812      	ldr	r2, [r2, #0]
 800a8aa:	f022 0201 	bic.w	r2, r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <HAL_TIM_IC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIM_IC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e0b0      	b.n	800aa3a <HAL_TIM_IC_Start_DMA+0x180>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d10b      	bne.n	800a8fc <HAL_TIM_IC_Start_DMA+0x42>
  {
    if((pData == 0U) && (Length > 0)) 
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d104      	bne.n	800a8f4 <HAL_TIM_IC_Start_DMA+0x3a>
 800a8ea:	887b      	ldrh	r3, [r7, #2]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e0a2      	b.n	800aa3a <HAL_TIM_IC_Start_DMA+0x180>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
   
  switch (Channel)
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2b0c      	cmp	r3, #12
 800a900:	f200 808a 	bhi.w	800aa18 <HAL_TIM_IC_Start_DMA+0x15e>
 800a904:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <HAL_TIM_IC_Start_DMA+0x52>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a941 	.word	0x0800a941
 800a910:	0800aa19 	.word	0x0800aa19
 800a914:	0800aa19 	.word	0x0800aa19
 800a918:	0800aa19 	.word	0x0800aa19
 800a91c:	0800a977 	.word	0x0800a977
 800a920:	0800aa19 	.word	0x0800aa19
 800a924:	0800aa19 	.word	0x0800aa19
 800a928:	0800aa19 	.word	0x0800aa19
 800a92c:	0800a9ad 	.word	0x0800a9ad
 800a930:	0800aa19 	.word	0x0800aa19
 800a934:	0800aa19 	.word	0x0800aa19
 800a938:	0800aa19 	.word	0x0800aa19
 800a93c:	0800a9e3 	.word	0x0800a9e3
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	4a3f      	ldr	r2, [pc, #252]	; (800aa44 <HAL_TIM_IC_Start_DMA+0x18a>)
 800a946:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a1b      	ldr	r3, [r3, #32]
 800a94c:	4a3e      	ldr	r2, [pc, #248]	; (800aa48 <HAL_TIM_IC_Start_DMA+0x18e>)
 800a94e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a18      	ldr	r0, [r3, #32]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3334      	adds	r3, #52	; 0x34
 800a95a:	4619      	mov	r1, r3
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	887b      	ldrh	r3, [r7, #2]
 800a960:	f7f8 f933 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */      
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	6812      	ldr	r2, [r2, #0]
 800a96c:	68d2      	ldr	r2, [r2, #12]
 800a96e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a972:	60da      	str	r2, [r3, #12]
    }
    break;
 800a974:	e051      	b.n	800aa1a <HAL_TIM_IC_Start_DMA+0x160>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	4a32      	ldr	r2, [pc, #200]	; (800aa44 <HAL_TIM_IC_Start_DMA+0x18a>)
 800a97c:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	4a31      	ldr	r2, [pc, #196]	; (800aa48 <HAL_TIM_IC_Start_DMA+0x18e>)
 800a984:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3338      	adds	r3, #56	; 0x38
 800a990:	4619      	mov	r1, r3
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	887b      	ldrh	r3, [r7, #2]
 800a996:	f7f8 f918 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	6812      	ldr	r2, [r2, #0]
 800a9a2:	68d2      	ldr	r2, [r2, #12]
 800a9a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9a8:	60da      	str	r2, [r3, #12]
    }
    break;
 800a9aa:	e036      	b.n	800aa1a <HAL_TIM_IC_Start_DMA+0x160>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b0:	4a24      	ldr	r2, [pc, #144]	; (800aa44 <HAL_TIM_IC_Start_DMA+0x18a>)
 800a9b2:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b8:	4a23      	ldr	r2, [pc, #140]	; (800aa48 <HAL_TIM_IC_Start_DMA+0x18e>)
 800a9ba:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	333c      	adds	r3, #60	; 0x3c
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	887b      	ldrh	r3, [r7, #2]
 800a9cc:	f7f8 f8fd 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	6812      	ldr	r2, [r2, #0]
 800a9d8:	68d2      	ldr	r2, [r2, #12]
 800a9da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9de:	60da      	str	r2, [r3, #12]
    }
    break;
 800a9e0:	e01b      	b.n	800aa1a <HAL_TIM_IC_Start_DMA+0x160>
    
    case TIM_CHANNEL_4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	4a17      	ldr	r2, [pc, #92]	; (800aa44 <HAL_TIM_IC_Start_DMA+0x18a>)
 800a9e8:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <HAL_TIM_IC_Start_DMA+0x18e>)
 800a9f0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3340      	adds	r3, #64	; 0x40
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	887b      	ldrh	r3, [r7, #2]
 800aa02:	f7f8 f8e2 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	68d2      	ldr	r2, [r2, #12]
 800aa10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa14:	60da      	str	r2, [r3, #12]
    }
    break;
 800aa16:	e000      	b.n	800aa1a <HAL_TIM_IC_Start_DMA+0x160>
    
    default:
    break;
 800aa18:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f002 f884 	bl	800cb30 <TIM_CCxChannelCmd>
   
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	6812      	ldr	r2, [r2, #0]
 800aa30:	6812      	ldr	r2, [r2, #0]
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	0800cac1 	.word	0x0800cac1
 800aa48:	0800ca9d 	.word	0x0800ca9d

0800aa4c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  switch (Channel)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b0c      	cmp	r3, #12
 800aa5a:	d841      	bhi.n	800aae0 <HAL_TIM_IC_Stop_DMA+0x94>
 800aa5c:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <HAL_TIM_IC_Stop_DMA+0x18>)
 800aa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa62:	bf00      	nop
 800aa64:	0800aa99 	.word	0x0800aa99
 800aa68:	0800aae1 	.word	0x0800aae1
 800aa6c:	0800aae1 	.word	0x0800aae1
 800aa70:	0800aae1 	.word	0x0800aae1
 800aa74:	0800aaab 	.word	0x0800aaab
 800aa78:	0800aae1 	.word	0x0800aae1
 800aa7c:	0800aae1 	.word	0x0800aae1
 800aa80:	0800aae1 	.word	0x0800aae1
 800aa84:	0800aabd 	.word	0x0800aabd
 800aa88:	0800aae1 	.word	0x0800aae1
 800aa8c:	0800aae1 	.word	0x0800aae1
 800aa90:	0800aae1 	.word	0x0800aae1
 800aa94:	0800aacf 	.word	0x0800aacf
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6812      	ldr	r2, [r2, #0]
 800aaa0:	68d2      	ldr	r2, [r2, #12]
 800aaa2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aaa6:	60da      	str	r2, [r3, #12]
    }
    break;
 800aaa8:	e01b      	b.n	800aae2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	68d2      	ldr	r2, [r2, #12]
 800aab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aab8:	60da      	str	r2, [r3, #12]
    }
    break;
 800aaba:	e012      	b.n	800aae2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	6812      	ldr	r2, [r2, #0]
 800aac4:	68d2      	ldr	r2, [r2, #12]
 800aac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aaca:	60da      	str	r2, [r3, #12]
    }
    break;
 800aacc:	e009      	b.n	800aae2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	68d2      	ldr	r2, [r2, #12]
 800aad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aadc:	60da      	str	r2, [r3, #12]
    }
    break;
 800aade:	e000      	b.n	800aae2 <HAL_TIM_IC_Stop_DMA+0x96>
    
    default:
    break;
 800aae0:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2200      	movs	r2, #0
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f002 f820 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6a1a      	ldr	r2, [r3, #32]
 800aaf6:	f241 1311 	movw	r3, #4369	; 0x1111
 800aafa:	4013      	ands	r3, r2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10f      	bne.n	800ab20 <HAL_TIM_IC_Stop_DMA+0xd4>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6a1a      	ldr	r2, [r3, #32]
 800ab06:	f240 4344 	movw	r3, #1092	; 0x444
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d107      	bne.n	800ab20 <HAL_TIM_IC_Stop_DMA+0xd4>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	6812      	ldr	r2, [r2, #0]
 800ab1a:	f022 0201 	bic.w	r2, r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}  
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e02d      	b.n	800aba2 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <HAL_TIM_OnePulse_Init+0x2e>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f855 	bl	800ac0a <HAL_TIM_OnePulse_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2202      	movs	r2, #2
 800ab64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4619      	mov	r1, r3
 800ab72:	4610      	mov	r0, r2
 800ab74:	f001 fdf8 	bl	800c768 <TIM_Base_SetConfig>
  
  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6812      	ldr	r2, [r2, #0]
 800ab80:	6812      	ldr	r2, [r2, #0]
 800ab82:	f022 0208 	bic.w	r2, r2, #8
 800ab86:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6812      	ldr	r2, [r2, #0]
 800ab90:	6811      	ldr	r1, [r2, #0]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	601a      	str	r2, [r3, #0]
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <HAL_TIM_OnePulse_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2202      	movs	r2, #2
 800abb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6a1a      	ldr	r2, [r3, #32]
 800abc0:	f241 1311 	movw	r3, #4369	; 0x1111
 800abc4:	4013      	ands	r3, r2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10f      	bne.n	800abea <HAL_TIM_OnePulse_DeInit+0x40>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6a1a      	ldr	r2, [r3, #32]
 800abd0:	f240 4344 	movw	r3, #1092	; 0x444
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d107      	bne.n	800abea <HAL_TIM_OnePulse_DeInit+0x40>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	6812      	ldr	r2, [r2, #0]
 800abe4:	f022 0201 	bic.w	r2, r2, #1
 800abe8:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f817 	bl	800ac1e <HAL_TIM_OnePulse_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <HAL_TIM_OnePulse_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ac12:	bf00      	nop
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <HAL_TIM_OnePulse_MspDeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2201      	movs	r2, #1
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 ff73 	bl	800cb30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	2104      	movs	r1, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 ff6c 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a07      	ldr	r2, [pc, #28]	; (800ac7c <HAL_TIM_OnePulse_Start+0x4a>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d107      	bne.n	800ac72 <HAL_TIM_OnePulse_Start+0x40>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ac6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	40010000 	.word	0x40010000

0800ac80 <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 ff4c 	bl	800cb30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2104      	movs	r1, #4
 800aca0:	4618      	mov	r0, r3
 800aca2:	f001 ff45 	bl	800cb30 <TIM_CCxChannelCmd>
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a1c      	ldr	r2, [pc, #112]	; (800ad1c <HAL_TIM_OnePulse_Stop+0x9c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d117      	bne.n	800ace0 <HAL_TIM_OnePulse_Stop+0x60>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	f241 1311 	movw	r3, #4369	; 0x1111
 800acba:	4013      	ands	r3, r2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10f      	bne.n	800ace0 <HAL_TIM_OnePulse_Stop+0x60>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6a1a      	ldr	r2, [r3, #32]
 800acc6:	f240 4344 	movw	r3, #1092	; 0x444
 800acca:	4013      	ands	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d107      	bne.n	800ace0 <HAL_TIM_OnePulse_Stop+0x60>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	6812      	ldr	r2, [r2, #0]
 800acd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800acda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acde:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6a1a      	ldr	r2, [r3, #32]
 800ace6:	f241 1311 	movw	r3, #4369	; 0x1111
 800acea:	4013      	ands	r3, r2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10f      	bne.n	800ad10 <HAL_TIM_OnePulse_Stop+0x90>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6a1a      	ldr	r2, [r3, #32]
 800acf6:	f240 4344 	movw	r3, #1092	; 0x444
 800acfa:	4013      	ands	r3, r2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d107      	bne.n	800ad10 <HAL_TIM_OnePulse_Stop+0x90>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	6812      	ldr	r2, [r2, #0]
 800ad08:	6812      	ldr	r2, [r2, #0]
 800ad0a:	f022 0201 	bic.w	r2, r2, #1
 800ad0e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	40010000 	.word	0x40010000

0800ad20 <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	68d2      	ldr	r2, [r2, #12]
 800ad34:	f042 0202 	orr.w	r2, r2, #2
 800ad38:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	6812      	ldr	r2, [r2, #0]
 800ad42:	68d2      	ldr	r2, [r2, #12]
 800ad44:	f042 0204 	orr.w	r2, r2, #4
 800ad48:	60da      	str	r2, [r3, #12]
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	2100      	movs	r1, #0
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 feec 	bl	800cb30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	2104      	movs	r1, #4
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 fee5 	bl	800cb30 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a08      	ldr	r2, [pc, #32]	; (800ad8c <HAL_TIM_OnePulse_Start_IT+0x6c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d107      	bne.n	800ad80 <HAL_TIM_OnePulse_Start_IT+0x60>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ad7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	40010000 	.word	0x40010000

0800ad90 <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	6812      	ldr	r2, [r2, #0]
 800ada2:	68d2      	ldr	r2, [r2, #12]
 800ada4:	f022 0202 	bic.w	r2, r2, #2
 800ada8:	60da      	str	r2, [r3, #12]
  
  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6812      	ldr	r2, [r2, #0]
 800adb2:	68d2      	ldr	r2, [r2, #12]
 800adb4:	f022 0204 	bic.w	r2, r2, #4
 800adb8:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels 
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2200      	movs	r2, #0
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 feb4 	bl	800cb30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2200      	movs	r2, #0
 800adce:	2104      	movs	r1, #4
 800add0:	4618      	mov	r0, r3
 800add2:	f001 fead 	bl	800cb30 <TIM_CCxChannelCmd>
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1c      	ldr	r2, [pc, #112]	; (800ae4c <HAL_TIM_OnePulse_Stop_IT+0xbc>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d117      	bne.n	800ae10 <HAL_TIM_OnePulse_Stop_IT+0x80>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6a1a      	ldr	r2, [r3, #32]
 800ade6:	f241 1311 	movw	r3, #4369	; 0x1111
 800adea:	4013      	ands	r3, r2
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10f      	bne.n	800ae10 <HAL_TIM_OnePulse_Stop_IT+0x80>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6a1a      	ldr	r2, [r3, #32]
 800adf6:	f240 4344 	movw	r3, #1092	; 0x444
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d107      	bne.n	800ae10 <HAL_TIM_OnePulse_Stop_IT+0x80>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	6812      	ldr	r2, [r2, #0]
 800ae08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ae0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);  
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6a1a      	ldr	r2, [r3, #32]
 800ae16:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10f      	bne.n	800ae40 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6a1a      	ldr	r2, [r3, #32]
 800ae26:	f240 4344 	movw	r3, #1092	; 0x444
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d107      	bne.n	800ae40 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	6812      	ldr	r2, [r2, #0]
 800ae3a:	f022 0201 	bic.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	40010000 	.word	0x40010000

0800ae50 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e081      	b.n	800af74 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f8a9 	bl	800afdc <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	6812      	ldr	r2, [r2, #0]
 800ae9a:	6892      	ldr	r2, [r2, #8]
 800ae9c:	f022 0207 	bic.w	r2, r2, #7
 800aea0:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3304      	adds	r3, #4
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4610      	mov	r0, r2
 800aeae:	f001 fc5b 	bl	800c768 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeda:	f023 0303 	bic.w	r3, r3, #3
 800aede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	4313      	orrs	r3, r2
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800aef8:	f023 030c 	bic.w	r3, r3, #12
 800aefc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68da      	ldr	r2, [r3, #12]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	4313      	orrs	r3, r2
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	4313      	orrs	r3, r2
 800af1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	011a      	lsls	r2, r3, #4
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	031b      	lsls	r3, r3, #12
 800af28:	4313      	orrs	r3, r2
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800af36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	4313      	orrs	r3, r2
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	4313      	orrs	r3, r2
 800af50:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_TIM_Encoder_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6a1a      	ldr	r2, [r3, #32]
 800af92:	f241 1311 	movw	r3, #4369	; 0x1111
 800af96:	4013      	ands	r3, r2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10f      	bne.n	800afbc <HAL_TIM_Encoder_DeInit+0x40>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6a1a      	ldr	r2, [r3, #32]
 800afa2:	f240 4344 	movw	r3, #1092	; 0x444
 800afa6:	4013      	ands	r3, r2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d107      	bne.n	800afbc <HAL_TIM_Encoder_DeInit+0x40>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6812      	ldr	r2, [r2, #0]
 800afb4:	6812      	ldr	r2, [r2, #0]
 800afb6:	f022 0201 	bic.w	r2, r2, #1
 800afba:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f817 	bl	800aff0 <HAL_TIM_Encoder_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Release Lock */
  __HAL_UNLOCK(htim);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_TIM_Encoder_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_TIM_Encoder_MspDeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <HAL_TIM_Encoder_Start+0x16>
 800b014:	2b04      	cmp	r3, #4
 800b016:	d008      	beq.n	800b02a <HAL_TIM_Encoder_Start+0x26>
 800b018:	e00f      	b.n	800b03a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2201      	movs	r2, #1
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f001 fd84 	bl	800cb30 <TIM_CCxChannelCmd>
      break; 
 800b028:	e016      	b.n	800b058 <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2201      	movs	r2, #1
 800b030:	2104      	movs	r1, #4
 800b032:	4618      	mov	r0, r3
 800b034:	f001 fd7c 	bl	800cb30 <TIM_CCxChannelCmd>
      break;
 800b038:	e00e      	b.n	800b058 <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2201      	movs	r2, #1
 800b040:	2100      	movs	r1, #0
 800b042:	4618      	mov	r0, r3
 800b044:	f001 fd74 	bl	800cb30 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2201      	movs	r2, #1
 800b04e:	2104      	movs	r1, #4
 800b050:	4618      	mov	r0, r3
 800b052:	f001 fd6d 	bl	800cb30 <TIM_CCxChannelCmd>
     break; 
 800b056:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6812      	ldr	r2, [r2, #0]
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	f042 0201 	orr.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <HAL_TIM_Encoder_Stop+0x16>
 800b082:	2b04      	cmp	r3, #4
 800b084:	d008      	beq.n	800b098 <HAL_TIM_Encoder_Stop+0x26>
 800b086:	e00f      	b.n	800b0a8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2200      	movs	r2, #0
 800b08e:	2100      	movs	r1, #0
 800b090:	4618      	mov	r0, r3
 800b092:	f001 fd4d 	bl	800cb30 <TIM_CCxChannelCmd>
      break; 
 800b096:	e016      	b.n	800b0c6 <HAL_TIM_Encoder_Stop+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2200      	movs	r2, #0
 800b09e:	2104      	movs	r1, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f001 fd45 	bl	800cb30 <TIM_CCxChannelCmd>
      break;
 800b0a6:	e00e      	b.n	800b0c6 <HAL_TIM_Encoder_Stop+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 fd3d 	bl	800cb30 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2104      	movs	r1, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f001 fd36 	bl	800cb30 <TIM_CCxChannelCmd>
     break; 
 800b0c4:	bf00      	nop
    }
  }  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6a1a      	ldr	r2, [r3, #32]
 800b0cc:	f241 1311 	movw	r3, #4369	; 0x1111
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10f      	bne.n	800b0f6 <HAL_TIM_Encoder_Stop+0x84>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6a1a      	ldr	r2, [r3, #32]
 800b0dc:	f240 4344 	movw	r3, #1092	; 0x444
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d107      	bne.n	800b0f6 <HAL_TIM_Encoder_Stop+0x84>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6812      	ldr	r2, [r2, #0]
 800b0ee:	6812      	ldr	r2, [r2, #0]
 800b0f0:	f022 0201 	bic.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <HAL_TIM_Encoder_Start_IT+0x16>
 800b110:	2b04      	cmp	r3, #4
 800b112:	d010      	beq.n	800b136 <HAL_TIM_Encoder_Start_IT+0x36>
 800b114:	e01f      	b.n	800b156 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2201      	movs	r2, #1
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 fd06 	bl	800cb30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6812      	ldr	r2, [r2, #0]
 800b12c:	68d2      	ldr	r2, [r2, #12]
 800b12e:	f042 0202 	orr.w	r2, r2, #2
 800b132:	60da      	str	r2, [r3, #12]
      break; 
 800b134:	e02e      	b.n	800b194 <HAL_TIM_Encoder_Start_IT+0x94>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2201      	movs	r2, #1
 800b13c:	2104      	movs	r1, #4
 800b13e:	4618      	mov	r0, r3
 800b140:	f001 fcf6 	bl	800cb30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	6812      	ldr	r2, [r2, #0]
 800b14c:	68d2      	ldr	r2, [r2, #12]
 800b14e:	f042 0204 	orr.w	r2, r2, #4
 800b152:	60da      	str	r2, [r3, #12]
      break;
 800b154:	e01e      	b.n	800b194 <HAL_TIM_Encoder_Start_IT+0x94>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2201      	movs	r2, #1
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 fce6 	bl	800cb30 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2201      	movs	r2, #1
 800b16a:	2104      	movs	r1, #4
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 fcdf 	bl	800cb30 <TIM_CCxChannelCmd>
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	6812      	ldr	r2, [r2, #0]
 800b17a:	68d2      	ldr	r2, [r2, #12]
 800b17c:	f042 0202 	orr.w	r2, r2, #2
 800b180:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	6812      	ldr	r2, [r2, #0]
 800b18a:	68d2      	ldr	r2, [r2, #12]
 800b18c:	f042 0204 	orr.w	r2, r2, #4
 800b190:	60da      	str	r2, [r3, #12]
     break; 
 800b192:	bf00      	nop
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	6812      	ldr	r2, [r2, #0]
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	f042 0201 	orr.w	r2, r2, #1
 800b1a2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10f      	bne.n	800b1de <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f001 fcb2 	bl	800cb30 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6812      	ldr	r2, [r2, #0]
 800b1d4:	68d2      	ldr	r2, [r2, #12]
 800b1d6:	f022 0202 	bic.w	r2, r2, #2
 800b1da:	60da      	str	r2, [r3, #12]
 800b1dc:	e030      	b.n	800b240 <HAL_TIM_Encoder_Stop_IT+0x92>
  }  
  else if(Channel == TIM_CHANNEL_2)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d10f      	bne.n	800b204 <HAL_TIM_Encoder_Stop_IT+0x56>
  {  
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2104      	movs	r1, #4
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 fc9f 	bl	800cb30 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare Interrupts 2 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	6812      	ldr	r2, [r2, #0]
 800b1fa:	68d2      	ldr	r2, [r2, #12]
 800b1fc:	f022 0204 	bic.w	r2, r2, #4
 800b200:	60da      	str	r2, [r3, #12]
 800b202:	e01d      	b.n	800b240 <HAL_TIM_Encoder_Stop_IT+0x92>
  }  
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2200      	movs	r2, #0
 800b20a:	2100      	movs	r1, #0
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 fc8f 	bl	800cb30 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	2104      	movs	r1, #4
 800b21a:	4618      	mov	r0, r3
 800b21c:	f001 fc88 	bl	800cb30 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6812      	ldr	r2, [r2, #0]
 800b228:	68d2      	ldr	r2, [r2, #12]
 800b22a:	f022 0202 	bic.w	r2, r2, #2
 800b22e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	68d2      	ldr	r2, [r2, #12]
 800b23a:	f022 0204 	bic.w	r2, r2, #4
 800b23e:	60da      	str	r2, [r3, #12]
  }
    
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6a1a      	ldr	r2, [r3, #32]
 800b246:	f241 1311 	movw	r3, #4369	; 0x1111
 800b24a:	4013      	ands	r3, r2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10f      	bne.n	800b270 <HAL_TIM_Encoder_Stop_IT+0xc2>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6a1a      	ldr	r2, [r3, #32]
 800b256:	f240 4344 	movw	r3, #1092	; 0x444
 800b25a:	4013      	ands	r3, r2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d107      	bne.n	800b270 <HAL_TIM_Encoder_Stop_IT+0xc2>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	6812      	ldr	r2, [r2, #0]
 800b26a:	f022 0201 	bic.w	r2, r2, #1
 800b26e:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2: The destination Buffer address for IC2.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d101      	bne.n	800b2a0 <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800b29c:	2302      	movs	r3, #2
 800b29e:	e0bc      	b.n	800b41a <HAL_TIM_Encoder_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d10e      	bne.n	800b2ca <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0)) 
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <HAL_TIM_Encoder_Start_DMA+0x36>
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d104      	bne.n	800b2c2 <HAL_TIM_Encoder_Start_DMA+0x40>
 800b2b8:	8b3b      	ldrh	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;                                    
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e0ab      	b.n	800b41a <HAL_TIM_Encoder_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
   
  switch (Channel)
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d02e      	beq.n	800b32e <HAL_TIM_Encoder_Start_DMA+0xac>
 800b2d0:	2b18      	cmp	r3, #24
 800b2d2:	d056      	beq.n	800b382 <HAL_TIM_Encoder_Start_DMA+0x100>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d000      	beq.n	800b2da <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
    }
    break;
    
    default:
    break;
 800b2d8:	e09e      	b.n	800b418 <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	4a51      	ldr	r2, [pc, #324]	; (800b424 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800b2e0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	4a50      	ldr	r2, [pc, #320]	; (800b428 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800b2e8:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a18      	ldr	r0, [r3, #32]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3334      	adds	r3, #52	; 0x34
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	8b3b      	ldrh	r3, [r7, #24]
 800b2fa:	f7f7 fc66 	bl	8002bca <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	6812      	ldr	r2, [r2, #0]
 800b306:	68d2      	ldr	r2, [r2, #12]
 800b308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b30c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	6812      	ldr	r2, [r2, #0]
 800b316:	6812      	ldr	r2, [r2, #0]
 800b318:	f042 0201 	orr.w	r2, r2, #1
 800b31c:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2201      	movs	r2, #1
 800b324:	2100      	movs	r1, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f001 fc02 	bl	800cb30 <TIM_CCxChannelCmd>
    break;
 800b32c:	e074      	b.n	800b418 <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	4a3c      	ldr	r2, [pc, #240]	; (800b424 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800b334:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	4a3b      	ldr	r2, [pc, #236]	; (800b428 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800b33c:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3338      	adds	r3, #56	; 0x38
 800b348:	4619      	mov	r1, r3
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	8b3b      	ldrh	r3, [r7, #24]
 800b34e:	f7f7 fc3c 	bl	8002bca <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	6812      	ldr	r2, [r2, #0]
 800b35a:	68d2      	ldr	r2, [r2, #12]
 800b35c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b360:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	6812      	ldr	r2, [r2, #0]
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	f042 0201 	orr.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2201      	movs	r2, #1
 800b378:	2104      	movs	r1, #4
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 fbd8 	bl	800cb30 <TIM_CCxChannelCmd>
    break;
 800b380:	e04a      	b.n	800b418 <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	4a27      	ldr	r2, [pc, #156]	; (800b424 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800b388:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	4a26      	ldr	r2, [pc, #152]	; (800b428 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800b390:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6a18      	ldr	r0, [r3, #32]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3334      	adds	r3, #52	; 0x34
 800b39c:	4619      	mov	r1, r3
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	8b3b      	ldrh	r3, [r7, #24]
 800b3a2:	f7f7 fc12 	bl	8002bca <HAL_DMA_Start_IT>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800b3ac:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	4a1d      	ldr	r2, [pc, #116]	; (800b428 <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 800b3b4:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3338      	adds	r3, #56	; 0x38
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	8b3b      	ldrh	r3, [r7, #24]
 800b3c6:	f7f7 fc00 	bl	8002bca <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE(htim);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	6812      	ldr	r2, [r2, #0]
 800b3d2:	6812      	ldr	r2, [r2, #0]
 800b3d4:	f042 0201 	orr.w	r2, r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f001 fba4 	bl	800cb30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f001 fb9d 	bl	800cb30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	6812      	ldr	r2, [r2, #0]
 800b3fe:	68d2      	ldr	r2, [r2, #12]
 800b400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b404:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	6812      	ldr	r2, [r2, #0]
 800b40e:	68d2      	ldr	r2, [r2, #12]
 800b410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b414:	60da      	str	r2, [r3, #12]
    break;
 800b416:	bf00      	nop
  }  
  /* Return function status */
  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	0800cac1 	.word	0x0800cac1
 800b428:	0800ca9d 	.word	0x0800ca9d

0800b42c <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10f      	bne.n	800b45c <HAL_TIM_Encoder_Stop_DMA+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2200      	movs	r2, #0
 800b442:	2100      	movs	r1, #0
 800b444:	4618      	mov	r0, r3
 800b446:	f001 fb73 	bl	800cb30 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	68d2      	ldr	r2, [r2, #12]
 800b454:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b458:	60da      	str	r2, [r3, #12]
 800b45a:	e030      	b.n	800b4be <HAL_TIM_Encoder_Stop_DMA+0x92>
  }  
  else if(Channel == TIM_CHANNEL_2)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d10f      	bne.n	800b482 <HAL_TIM_Encoder_Stop_DMA+0x56>
  {  
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2200      	movs	r2, #0
 800b468:	2104      	movs	r1, #4
 800b46a:	4618      	mov	r0, r3
 800b46c:	f001 fb60 	bl	800cb30 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6812      	ldr	r2, [r2, #0]
 800b478:	68d2      	ldr	r2, [r2, #12]
 800b47a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b47e:	60da      	str	r2, [r3, #12]
 800b480:	e01d      	b.n	800b4be <HAL_TIM_Encoder_Stop_DMA+0x92>
  }  
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2200      	movs	r2, #0
 800b488:	2100      	movs	r1, #0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 fb50 	bl	800cb30 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2200      	movs	r2, #0
 800b496:	2104      	movs	r1, #4
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 fb49 	bl	800cb30 <TIM_CCxChannelCmd>
    
    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	6812      	ldr	r2, [r2, #0]
 800b4a6:	68d2      	ldr	r2, [r2, #12]
 800b4a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b4ac:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	6812      	ldr	r2, [r2, #0]
 800b4b6:	68d2      	ldr	r2, [r2, #12]
 800b4b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4bc:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6a1a      	ldr	r2, [r3, #32]
 800b4c4:	f241 1311 	movw	r3, #4369	; 0x1111
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10f      	bne.n	800b4ee <HAL_TIM_Encoder_Stop_DMA+0xc2>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6a1a      	ldr	r2, [r3, #32]
 800b4d4:	f240 4344 	movw	r3, #1092	; 0x444
 800b4d8:	4013      	ands	r3, r2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d107      	bne.n	800b4ee <HAL_TIM_Encoder_Stop_DMA+0xc2>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	6812      	ldr	r2, [r2, #0]
 800b4e8:	f022 0201 	bic.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b02      	cmp	r3, #2
 800b514:	d122      	bne.n	800b55c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b02      	cmp	r3, #2
 800b522:	d11b      	bne.n	800b55c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f06f 0202 	mvn.w	r2, #2
 800b52c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	f003 0303 	and.w	r3, r3, #3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 f894 	bl	800c670 <HAL_TIM_IC_CaptureCallback>
 800b548:	e005      	b.n	800b556 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f001 f886 	bl	800c65c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 f897 	bl	800c684 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b04      	cmp	r3, #4
 800b568:	d122      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f003 0304 	and.w	r3, r3, #4
 800b574:	2b04      	cmp	r3, #4
 800b576:	d11b      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f06f 0204 	mvn.w	r2, #4
 800b580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2202      	movs	r2, #2
 800b586:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f001 f86a 	bl	800c670 <HAL_TIM_IC_CaptureCallback>
 800b59c:	e005      	b.n	800b5aa <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 f85c 	bl	800c65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 f86d 	bl	800c684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f003 0308 	and.w	r3, r3, #8
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d122      	bne.n	800b604 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f003 0308 	and.w	r3, r3, #8
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d11b      	bne.n	800b604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f06f 0208 	mvn.w	r2, #8
 800b5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2204      	movs	r2, #4
 800b5da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	f003 0303 	and.w	r3, r3, #3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f840 	bl	800c670 <HAL_TIM_IC_CaptureCallback>
 800b5f0:	e005      	b.n	800b5fe <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 f832 	bl	800c65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 f843 	bl	800c684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	f003 0310 	and.w	r3, r3, #16
 800b60e:	2b10      	cmp	r3, #16
 800b610:	d122      	bne.n	800b658 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f003 0310 	and.w	r3, r3, #16
 800b61c:	2b10      	cmp	r3, #16
 800b61e:	d11b      	bne.n	800b658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f06f 0210 	mvn.w	r2, #16
 800b628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2208      	movs	r2, #8
 800b62e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f816 	bl	800c670 <HAL_TIM_IC_CaptureCallback>
 800b644:	e005      	b.n	800b652 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 f808 	bl	800c65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f001 f819 	bl	800c684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b01      	cmp	r3, #1
 800b664:	d10e      	bne.n	800b684 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b01      	cmp	r3, #1
 800b672:	d107      	bne.n	800b684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f06f 0201 	mvn.w	r2, #1
 800b67c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f006 fd8c 	bl	801219c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b68e:	2b80      	cmp	r3, #128	; 0x80
 800b690:	d10e      	bne.n	800b6b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69c:	2b80      	cmp	r3, #128	; 0x80
 800b69e:	d107      	bne.n	800b6b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f002 ffbb 	bl	800e626 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ba:	2b40      	cmp	r3, #64	; 0x40
 800b6bc:	d10e      	bne.n	800b6dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d107      	bne.n	800b6dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 ffde 	bl	800c698 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d10e      	bne.n	800b708 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f003 0320 	and.w	r3, r3, #32
 800b6f4:	2b20      	cmp	r3, #32
 800b6f6:	d107      	bne.n	800b708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f06f 0220 	mvn.w	r2, #32
 800b700:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f002 ff85 	bl	800e612 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800b708:	bf00      	nop
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b722:	2b01      	cmp	r3, #1
 800b724:	d101      	bne.n	800b72a <HAL_TIM_OC_ConfigChannel+0x1a>
 800b726:	2302      	movs	r3, #2
 800b728:	e04e      	b.n	800b7c8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2202      	movs	r2, #2
 800b736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b0c      	cmp	r3, #12
 800b73e:	d839      	bhi.n	800b7b4 <HAL_TIM_OC_ConfigChannel+0xa4>
 800b740:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <HAL_TIM_OC_ConfigChannel+0x38>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b77d 	.word	0x0800b77d
 800b74c:	0800b7b5 	.word	0x0800b7b5
 800b750:	0800b7b5 	.word	0x0800b7b5
 800b754:	0800b7b5 	.word	0x0800b7b5
 800b758:	0800b78b 	.word	0x0800b78b
 800b75c:	0800b7b5 	.word	0x0800b7b5
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b7b5 	.word	0x0800b7b5
 800b768:	0800b799 	.word	0x0800b799
 800b76c:	0800b7b5 	.word	0x0800b7b5
 800b770:	0800b7b5 	.word	0x0800b7b5
 800b774:	0800b7b5 	.word	0x0800b7b5
 800b778:	0800b7a7 	.word	0x0800b7a7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	4618      	mov	r0, r3
 800b784:	f001 fa1b 	bl	800cbbe <TIM_OC1_SetConfig>
    }
    break;
 800b788:	e015      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	4618      	mov	r0, r3
 800b792:	f001 f8dd 	bl	800c950 <TIM_OC2_SetConfig>
    }
    break;
 800b796:	e00e      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 fa76 	bl	800cc90 <TIM_OC3_SetConfig>
    }
    break;
 800b7a4:	e007      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68b9      	ldr	r1, [r7, #8]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 fadb 	bl	800cd68 <TIM_OC4_SetConfig>
    }
    break;
 800b7b2:	e000      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 800b7b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d101      	bne.n	800b7ea <HAL_TIM_IC_ConfigChannel+0x1a>
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	e08a      	b.n	800b900 <HAL_TIM_IC_ConfigChannel+0x130>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if (Channel == TIM_CHANNEL_1)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d11b      	bne.n	800b838 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	6819      	ldr	r1, [r3, #0]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f001 f82e 	bl	800c870 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	6812      	ldr	r2, [r2, #0]
 800b81c:	6992      	ldr	r2, [r2, #24]
 800b81e:	f022 020c 	bic.w	r2, r2, #12
 800b822:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	6991      	ldr	r1, [r2, #24]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	6892      	ldr	r2, [r2, #8]
 800b832:	430a      	orrs	r2, r1
 800b834:	619a      	str	r2, [r3, #24]
 800b836:	e05a      	b.n	800b8ee <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d11c      	bne.n	800b878 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6818      	ldr	r0, [r3, #0]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	6819      	ldr	r1, [r3, #0]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f001 fb9f 	bl	800cf90 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	6812      	ldr	r2, [r2, #0]
 800b85a:	6992      	ldr	r2, [r2, #24]
 800b85c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b860:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	6991      	ldr	r1, [r2, #24]
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	6892      	ldr	r2, [r2, #8]
 800b870:	0212      	lsls	r2, r2, #8
 800b872:	430a      	orrs	r2, r1
 800b874:	619a      	str	r2, [r3, #24]
 800b876:	e03a      	b.n	800b8ee <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b08      	cmp	r3, #8
 800b87c:	d11b      	bne.n	800b8b6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	6819      	ldr	r1, [r3, #0]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	f001 fbf4 	bl	800d07a <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	69d2      	ldr	r2, [r2, #28]
 800b89c:	f022 020c 	bic.w	r2, r2, #12
 800b8a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	69d1      	ldr	r1, [r2, #28]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	6892      	ldr	r2, [r2, #8]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	61da      	str	r2, [r3, #28]
 800b8b4:	e01b      	b.n	800b8ee <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6819      	ldr	r1, [r3, #0]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	f001 fc18 	bl	800d0fa <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	6812      	ldr	r2, [r2, #0]
 800b8d2:	69d2      	ldr	r2, [r2, #28]
 800b8d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b8d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	69d1      	ldr	r1, [r2, #28]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	6892      	ldr	r2, [r2, #8]
 800b8e8:	0212      	lsls	r2, r2, #8
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d101      	bne.n	800b922 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b91e:	2302      	movs	r3, #2
 800b920:	e0b4      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x184>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2202      	movs	r2, #2
 800b92e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b0c      	cmp	r3, #12
 800b936:	f200 809f 	bhi.w	800ba78 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b93a:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b975 	.word	0x0800b975
 800b944:	0800ba79 	.word	0x0800ba79
 800b948:	0800ba79 	.word	0x0800ba79
 800b94c:	0800ba79 	.word	0x0800ba79
 800b950:	0800b9b5 	.word	0x0800b9b5
 800b954:	0800ba79 	.word	0x0800ba79
 800b958:	0800ba79 	.word	0x0800ba79
 800b95c:	0800ba79 	.word	0x0800ba79
 800b960:	0800b9f7 	.word	0x0800b9f7
 800b964:	0800ba79 	.word	0x0800ba79
 800b968:	0800ba79 	.word	0x0800ba79
 800b96c:	0800ba79 	.word	0x0800ba79
 800b970:	0800ba37 	.word	0x0800ba37
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f001 f91f 	bl	800cbbe <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	6812      	ldr	r2, [r2, #0]
 800b988:	6992      	ldr	r2, [r2, #24]
 800b98a:	f042 0208 	orr.w	r2, r2, #8
 800b98e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	6812      	ldr	r2, [r2, #0]
 800b998:	6992      	ldr	r2, [r2, #24]
 800b99a:	f022 0204 	bic.w	r2, r2, #4
 800b99e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	6812      	ldr	r2, [r2, #0]
 800b9a8:	6991      	ldr	r1, [r2, #24]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	6912      	ldr	r2, [r2, #16]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	619a      	str	r2, [r3, #24]
    }
    break;
 800b9b2:	e062      	b.n	800ba7a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 ffc8 	bl	800c950 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	6812      	ldr	r2, [r2, #0]
 800b9c8:	6992      	ldr	r2, [r2, #24]
 800b9ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ce:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	6812      	ldr	r2, [r2, #0]
 800b9d8:	6992      	ldr	r2, [r2, #24]
 800b9da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	6991      	ldr	r1, [r2, #24]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	6912      	ldr	r2, [r2, #16]
 800b9ee:	0212      	lsls	r2, r2, #8
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	619a      	str	r2, [r3, #24]
    }
    break;
 800b9f4:	e041      	b.n	800ba7a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f001 f947 	bl	800cc90 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	69d2      	ldr	r2, [r2, #28]
 800ba0c:	f042 0208 	orr.w	r2, r2, #8
 800ba10:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	69d2      	ldr	r2, [r2, #28]
 800ba1c:	f022 0204 	bic.w	r2, r2, #4
 800ba20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	6812      	ldr	r2, [r2, #0]
 800ba2a:	69d1      	ldr	r1, [r2, #28]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	6912      	ldr	r2, [r2, #16]
 800ba30:	430a      	orrs	r2, r1
 800ba32:	61da      	str	r2, [r3, #28]
    }
    break;
 800ba34:	e021      	b.n	800ba7a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68b9      	ldr	r1, [r7, #8]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 f993 	bl	800cd68 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	69d2      	ldr	r2, [r2, #28]
 800ba4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba50:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	6812      	ldr	r2, [r2, #0]
 800ba5a:	69d2      	ldr	r2, [r2, #28]
 800ba5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	6812      	ldr	r2, [r2, #0]
 800ba6a:	69d1      	ldr	r1, [r2, #28]
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	6912      	ldr	r2, [r2, #16]
 800ba70:	0212      	lsls	r2, r2, #8
 800ba72:	430a      	orrs	r2, r1
 800ba74:	61da      	str	r2, [r3, #28]
    }
    break;
 800ba76:	e000      	b.n	800ba7a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 800ba78:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08c      	sub	sp, #48	; 0x30
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	f000 80af 	beq.w	800bc0a <HAL_TIM_OnePulse_ConfigChannel+0x176>
  {
    __HAL_LOCK(htim);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d101      	bne.n	800baba <HAL_TIM_OnePulse_ConfigChannel+0x26>
 800bab6:	2302      	movs	r3, #2
 800bab8:	e0a8      	b.n	800bc0c <HAL_TIM_OnePulse_ConfigChannel+0x178>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    htim->State = HAL_TIM_STATE_BUSY;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2202      	movs	r2, #2
 800bac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Extract the Output compare configuration from sConfig structure */  
    temp1.OCMode = sConfig->OCMode;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState; 
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    switch (OutputChannel)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <HAL_TIM_OnePulse_ConfigChannel+0x66>
 800baf4:	2b04      	cmp	r3, #4
 800baf6:	d009      	beq.n	800bb0c <HAL_TIM_OnePulse_ConfigChannel+0x78>
      
        TIM_OC2_SetConfig(htim->Instance, &temp1);
      }
      break;
      default:
      break;  
 800baf8:	e011      	b.n	800bb1e <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC1_SetConfig(htim->Instance, &temp1); 
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f107 0214 	add.w	r2, r7, #20
 800bb02:	4611      	mov	r1, r2
 800bb04:	4618      	mov	r0, r3
 800bb06:	f001 f85a 	bl	800cbbe <TIM_OC1_SetConfig>
      break;
 800bb0a:	e008      	b.n	800bb1e <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f107 0214 	add.w	r2, r7, #20
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 ff1a 	bl	800c950 <TIM_OC2_SetConfig>
      break;
 800bb1c:	bf00      	nop
    } 
    switch (InputChannel)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <HAL_TIM_OnePulse_ConfigChannel+0x96>
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d033      	beq.n	800bb90 <HAL_TIM_OnePulse_ConfigChannel+0xfc>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
      }
      break;
    
      default:
      break;  
 800bb28:	e065      	b.n	800bbf6 <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6818      	ldr	r0, [r3, #0]
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	6999      	ldr	r1, [r3, #24]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	69da      	ldr	r2, [r3, #28]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	f000 fe99 	bl	800c870 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	6992      	ldr	r2, [r2, #24]
 800bb48:	f022 020c 	bic.w	r2, r2, #12
 800bb4c:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	6892      	ldr	r2, [r2, #8]
 800bb58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bb5c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	6892      	ldr	r2, [r2, #8]
 800bb68:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800bb6c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	6812      	ldr	r2, [r2, #0]
 800bb76:	6892      	ldr	r2, [r2, #8]
 800bb78:	f022 0207 	bic.w	r2, r2, #7
 800bb7c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	6812      	ldr	r2, [r2, #0]
 800bb86:	6892      	ldr	r2, [r2, #8]
 800bb88:	f042 0206 	orr.w	r2, r2, #6
 800bb8c:	609a      	str	r2, [r3, #8]
      break;
 800bb8e:	e032      	b.n	800bbf6 <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6818      	ldr	r0, [r3, #0]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	6999      	ldr	r1, [r3, #24]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	69da      	ldr	r2, [r3, #28]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	f001 f9f6 	bl	800cf90 <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	6812      	ldr	r2, [r2, #0]
 800bbac:	6992      	ldr	r2, [r2, #24]
 800bbae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bbb2:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	6892      	ldr	r2, [r2, #8]
 800bbbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bbc2:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	6812      	ldr	r2, [r2, #0]
 800bbcc:	6892      	ldr	r2, [r2, #8]
 800bbce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bbd2:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	6812      	ldr	r2, [r2, #0]
 800bbdc:	6892      	ldr	r2, [r2, #8]
 800bbde:	f022 0207 	bic.w	r2, r2, #7
 800bbe2:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	6812      	ldr	r2, [r2, #0]
 800bbec:	6892      	ldr	r2, [r2, #8]
 800bbee:	f042 0206 	orr.w	r2, r2, #6
 800bbf2:	609a      	str	r2, [r3, #8]
      break;
 800bbf4:	bf00      	nop
    }
  
    htim->State = HAL_TIM_STATE_READY;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    __HAL_UNLOCK(htim);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    return HAL_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e000      	b.n	800bc0c <HAL_TIM_OnePulse_ConfigChannel+0x178>
  }
  else
  {
    return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
  }
} 
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3730      	adds	r7, #48	; 0x30
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_TIM_DMABurst_WriteStart>:
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t* BurstBuffer, uint32_t  BurstLength)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d101      	bne.n	800bc32 <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
     return HAL_BUSY;
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e0d3      	b.n	800bdda <HAL_TIM_DMABurst_WriteStart+0x1c6>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d10b      	bne.n	800bc56 <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d104      	bne.n	800bc4e <HAL_TIM_DMABurst_WriteStart+0x3a>
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;                                    
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e0c5      	b.n	800bdda <HAL_TIM_DMABurst_WriteStart+0x1c6>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2202      	movs	r2, #2
 800bc52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch(BurstRequestSrc)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc5c:	d056      	beq.n	800bd0c <HAL_TIM_DMABurst_WriteStart+0xf8>
 800bc5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc62:	d809      	bhi.n	800bc78 <HAL_TIM_DMABurst_WriteStart+0x64>
 800bc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc68:	d026      	beq.n	800bcb8 <HAL_TIM_DMABurst_WriteStart+0xa4>
 800bc6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc6e:	d038      	beq.n	800bce2 <HAL_TIM_DMABurst_WriteStart+0xce>
 800bc70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc74:	d00b      	beq.n	800bc8e <HAL_TIM_DMABurst_WriteStart+0x7a>
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
    }
    break;
    default:
    break;  
 800bc76:	e09d      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
  switch(BurstRequestSrc)
 800bc78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc7c:	d070      	beq.n	800bd60 <HAL_TIM_DMABurst_WriteStart+0x14c>
 800bc7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc82:	f000 8082 	beq.w	800bd8a <HAL_TIM_DMABurst_WriteStart+0x176>
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8a:	d054      	beq.n	800bd36 <HAL_TIM_DMABurst_WriteStart+0x122>
    break;  
 800bc8c:	e092      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	4a54      	ldr	r2, [pc, #336]	; (800bde4 <HAL_TIM_DMABurst_WriteStart+0x1d0>)
 800bc94:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	4a53      	ldr	r2, [pc, #332]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bc9c:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U); 
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	69d8      	ldr	r0, [r3, #28]
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	334c      	adds	r3, #76	; 0x4c
 800bcaa:	461a      	mov	r2, r3
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	0a1b      	lsrs	r3, r3, #8
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	f7f6 ff8a 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bcb6:	e07d      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
 800bcbc:	4a4b      	ldr	r2, [pc, #300]	; (800bdec <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800bcbe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	4a48      	ldr	r2, [pc, #288]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bcc6:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a18      	ldr	r0, [r3, #32]
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	334c      	adds	r3, #76	; 0x4c
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	3301      	adds	r3, #1
 800bcdc:	f7f6 ff75 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bce0:	e068      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	4a41      	ldr	r2, [pc, #260]	; (800bdec <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800bce8:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	4a3e      	ldr	r2, [pc, #248]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bcf0:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	334c      	adds	r3, #76	; 0x4c
 800bcfe:	461a      	mov	r2, r3
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	3301      	adds	r3, #1
 800bd06:	f7f6 ff60 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bd0a:	e053      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd10:	4a36      	ldr	r2, [pc, #216]	; (800bdec <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800bd12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd18:	4a33      	ldr	r2, [pc, #204]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bd1a:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	334c      	adds	r3, #76	; 0x4c
 800bd28:	461a      	mov	r2, r3
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	3301      	adds	r3, #1
 800bd30:	f7f6 ff4b 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bd34:	e03e      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3a:	4a2c      	ldr	r2, [pc, #176]	; (800bdec <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 800bd3c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd42:	4a29      	ldr	r2, [pc, #164]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bd44:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	334c      	adds	r3, #76	; 0x4c
 800bd52:	461a      	mov	r2, r3
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	0a1b      	lsrs	r3, r3, #8
 800bd58:	3301      	adds	r3, #1
 800bd5a:	f7f6 ff36 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bd5e:	e029      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	4a22      	ldr	r2, [pc, #136]	; (800bdf0 <HAL_TIM_DMABurst_WriteStart+0x1dc>)
 800bd66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6c:	4a1e      	ldr	r2, [pc, #120]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bd6e:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	334c      	adds	r3, #76	; 0x4c
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	0a1b      	lsrs	r3, r3, #8
 800bd82:	3301      	adds	r3, #1
 800bd84:	f7f6 ff21 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bd88:	e014      	b.n	800bdb4 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8e:	4a19      	ldr	r2, [pc, #100]	; (800bdf4 <HAL_TIM_DMABurst_WriteStart+0x1e0>)
 800bd90:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd96:	4a14      	ldr	r2, [pc, #80]	; (800bde8 <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800bd98:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	334c      	adds	r3, #76	; 0x4c
 800bda6:	461a      	mov	r2, r3
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	0a1b      	lsrs	r3, r3, #8
 800bdac:	3301      	adds	r3, #1
 800bdae:	f7f6 ff0c 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bdb2:	bf00      	nop
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	69ba      	ldr	r2, [r7, #24]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	649a      	str	r2, [r3, #72]	; 0x48
   
   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	68d1      	ldr	r1, [r2, #12]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	60da      	str	r2, [r3, #12]
   
   htim->State = HAL_TIM_STATE_READY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	0800cb77 	.word	0x0800cb77
 800bde8:	0800ca9d 	.word	0x0800ca9d
 800bdec:	0800ca2d 	.word	0x0800ca2d
 800bdf0:	0800e657 	.word	0x0800e657
 800bdf4:	0800cb9b 	.word	0x0800cb9b

0800bdf8 <HAL_TIM_DMABurst_WriteStop>:
  *                the configuration information for TIM module.
  * @param  BurstRequestSrc: TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be08:	d028      	beq.n	800be5c <HAL_TIM_DMABurst_WriteStop+0x64>
 800be0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be0e:	d809      	bhi.n	800be24 <HAL_TIM_DMABurst_WriteStop+0x2c>
 800be10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be14:	d016      	beq.n	800be44 <HAL_TIM_DMABurst_WriteStop+0x4c>
 800be16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be1a:	d019      	beq.n	800be50 <HAL_TIM_DMABurst_WriteStop+0x58>
 800be1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be20:	d00a      	beq.n	800be38 <HAL_TIM_DMABurst_WriteStop+0x40>
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800be22:	e033      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
  switch(BurstRequestSrc)
 800be24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be28:	d024      	beq.n	800be74 <HAL_TIM_DMABurst_WriteStop+0x7c>
 800be2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be2e:	d027      	beq.n	800be80 <HAL_TIM_DMABurst_WriteStop+0x88>
 800be30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be34:	d018      	beq.n	800be68 <HAL_TIM_DMABurst_WriteStop+0x70>
    break;
 800be36:	e029      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7f6 ff24 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be42:	e023      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a1b      	ldr	r3, [r3, #32]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f6 ff1e 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be4e:	e01d      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be54:	4618      	mov	r0, r3
 800be56:	f7f6 ff18 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be5a:	e017      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be60:	4618      	mov	r0, r3
 800be62:	f7f6 ff12 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be66:	e011      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f6 ff0c 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be72:	e00b      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f6 ff06 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be7e:	e005      	b.n	800be8c <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be84:	4618      	mov	r0, r3
 800be86:	f7f6 ff00 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800be8a:	bf00      	nop
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	6812      	ldr	r2, [r2, #0]
 800be94:	68d1      	ldr	r1, [r2, #12]
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	43d2      	mvns	r2, r2
 800be9a:	400a      	ands	r2, r1
 800be9c:	60da      	str	r2, [r3, #12]
      
  /* Return function status */
  return HAL_OK;  
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_TIM_DMABurst_ReadStart>:
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d101      	bne.n	800bec6 <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
     return HAL_BUSY;
 800bec2:	2302      	movs	r3, #2
 800bec4:	e0d3      	b.n	800c06e <HAL_TIM_DMABurst_ReadStart+0x1c6>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d10b      	bne.n	800beea <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d104      	bne.n	800bee2 <HAL_TIM_DMABurst_ReadStart+0x3a>
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;                                    
 800bede:	2301      	movs	r3, #1
 800bee0:	e0c5      	b.n	800c06e <HAL_TIM_DMABurst_ReadStart+0x1c6>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2202      	movs	r2, #2
 800bee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }  
  switch(BurstRequestSrc)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bef0:	d056      	beq.n	800bfa0 <HAL_TIM_DMABurst_ReadStart+0xf8>
 800bef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bef6:	d809      	bhi.n	800bf0c <HAL_TIM_DMABurst_ReadStart+0x64>
 800bef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800befc:	d026      	beq.n	800bf4c <HAL_TIM_DMABurst_ReadStart+0xa4>
 800befe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf02:	d038      	beq.n	800bf76 <HAL_TIM_DMABurst_ReadStart+0xce>
 800bf04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf08:	d00b      	beq.n	800bf22 <HAL_TIM_DMABurst_ReadStart+0x7a>
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
    }
    break;
    default:
    break;  
 800bf0a:	e09d      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
  switch(BurstRequestSrc)
 800bf0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf10:	d070      	beq.n	800bff4 <HAL_TIM_DMABurst_ReadStart+0x14c>
 800bf12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf16:	f000 8082 	beq.w	800c01e <HAL_TIM_DMABurst_ReadStart+0x176>
 800bf1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1e:	d054      	beq.n	800bfca <HAL_TIM_DMABurst_ReadStart+0x122>
    break;  
 800bf20:	e092      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	4a54      	ldr	r2, [pc, #336]	; (800c078 <HAL_TIM_DMABurst_ReadStart+0x1d0>)
 800bf28:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	4a53      	ldr	r2, [pc, #332]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800bf30:	64da      	str	r2, [r3, #76]	; 0x4c
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	69d8      	ldr	r0, [r3, #28]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	334c      	adds	r3, #76	; 0x4c
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	3301      	adds	r3, #1
 800bf46:	f7f6 fe40 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bf4a:	e07d      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	4a4b      	ldr	r2, [pc, #300]	; (800c080 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800bf52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	4a48      	ldr	r2, [pc, #288]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800bf5a:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6a18      	ldr	r0, [r3, #32]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	334c      	adds	r3, #76	; 0x4c
 800bf66:	4619      	mov	r1, r3
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	0a1b      	lsrs	r3, r3, #8
 800bf6e:	3301      	adds	r3, #1
 800bf70:	f7f6 fe2b 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bf74:	e068      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	4a41      	ldr	r2, [pc, #260]	; (800c080 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800bf7c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	4a3e      	ldr	r2, [pc, #248]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800bf84:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	334c      	adds	r3, #76	; 0x4c
 800bf90:	4619      	mov	r1, r3
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	0a1b      	lsrs	r3, r3, #8
 800bf98:	3301      	adds	r3, #1
 800bf9a:	f7f6 fe16 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bf9e:	e053      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa4:	4a36      	ldr	r2, [pc, #216]	; (800c080 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800bfa6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfac:	4a33      	ldr	r2, [pc, #204]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800bfae:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	334c      	adds	r3, #76	; 0x4c
 800bfba:	4619      	mov	r1, r3
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	0a1b      	lsrs	r3, r3, #8
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	f7f6 fe01 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bfc8:	e03e      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	4a2c      	ldr	r2, [pc, #176]	; (800c080 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800bfd0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd6:	4a29      	ldr	r2, [pc, #164]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800bfd8:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	334c      	adds	r3, #76	; 0x4c
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	0a1b      	lsrs	r3, r3, #8
 800bfec:	3301      	adds	r3, #1
 800bfee:	f7f6 fdec 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800bff2:	e029      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff8:	4a22      	ldr	r2, [pc, #136]	; (800c084 <HAL_TIM_DMABurst_ReadStart+0x1dc>)
 800bffa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	4a1e      	ldr	r2, [pc, #120]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800c002:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	334c      	adds	r3, #76	; 0x4c
 800c00e:	4619      	mov	r1, r3
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	0a1b      	lsrs	r3, r3, #8
 800c016:	3301      	adds	r3, #1
 800c018:	f7f6 fdd7 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800c01c:	e014      	b.n	800c048 <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c022:	4a19      	ldr	r2, [pc, #100]	; (800c088 <HAL_TIM_DMABurst_ReadStart+0x1e0>)
 800c024:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02a:	4a14      	ldr	r2, [pc, #80]	; (800c07c <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800c02c:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	334c      	adds	r3, #76	; 0x4c
 800c038:	4619      	mov	r1, r3
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	0a1b      	lsrs	r3, r3, #8
 800c040:	3301      	adds	r3, #1
 800c042:	f7f6 fdc2 	bl	8002bca <HAL_DMA_Start_IT>
    break;
 800c046:	bf00      	nop
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68b9      	ldr	r1, [r7, #8]
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	430a      	orrs	r2, r1
 800c052:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	6812      	ldr	r2, [r2, #0]
 800c05c:	68d1      	ldr	r1, [r2, #12]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	430a      	orrs	r2, r1
 800c062:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	0800cb77 	.word	0x0800cb77
 800c07c:	0800ca9d 	.word	0x0800ca9d
 800c080:	0800cac1 	.word	0x0800cac1
 800c084:	0800e657 	.word	0x0800e657
 800c088:	0800cb9b 	.word	0x0800cb9b

0800c08c <HAL_TIM_DMABurst_ReadStop>:
  *                the configuration information for TIM module.
  * @param  BurstRequestSrc: TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c09c:	d028      	beq.n	800c0f0 <HAL_TIM_DMABurst_ReadStop+0x64>
 800c09e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0a2:	d809      	bhi.n	800c0b8 <HAL_TIM_DMABurst_ReadStop+0x2c>
 800c0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0a8:	d016      	beq.n	800c0d8 <HAL_TIM_DMABurst_ReadStop+0x4c>
 800c0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ae:	d019      	beq.n	800c0e4 <HAL_TIM_DMABurst_ReadStop+0x58>
 800c0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b4:	d00a      	beq.n	800c0cc <HAL_TIM_DMABurst_ReadStop+0x40>
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;  
 800c0b6:	e033      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
  switch(BurstRequestSrc)
 800c0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0bc:	d024      	beq.n	800c108 <HAL_TIM_DMABurst_ReadStop+0x7c>
 800c0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0c2:	d027      	beq.n	800c114 <HAL_TIM_DMABurst_ReadStop+0x88>
 800c0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c8:	d018      	beq.n	800c0fc <HAL_TIM_DMABurst_ReadStop+0x70>
    break;  
 800c0ca:	e029      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	69db      	ldr	r3, [r3, #28]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f6 fdda 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c0d6:	e023      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f6 fdd4 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c0e2:	e01d      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7f6 fdce 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c0ee:	e017      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f6 fdc8 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c0fa:	e011      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	4618      	mov	r0, r3
 800c102:	f7f6 fdc2 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c106:	e00b      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7f6 fdbc 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c112:	e005      	b.n	800c120 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c118:	4618      	mov	r0, r3
 800c11a:	f7f6 fdb6 	bl	8002c8a <HAL_DMA_Abort>
    break;
 800c11e:	bf00      	nop
  }
  
  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	6812      	ldr	r2, [r2, #0]
 800c128:	68d1      	ldr	r1, [r2, #12]
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	43d2      	mvns	r2, r2
 800c12e:	400a      	ands	r2, r1
 800c130:	60da      	str	r2, [r3, #12]
      
  /* Return function status */
  return HAL_OK;  
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_TIM_GenerateEvent>:
  * @note   TIM_EVENTSOURCE_COM and TIM_EVENTSOURCE_BREAK are used only with TIM1 and TIM8.
  * @retval HAL status
  */ 

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_TIM_GenerateEvent+0x18>
 800c150:	2302      	movs	r3, #2
 800c152:	e014      	b.n	800c17e <HAL_TIM_GenerateEvent+0x42>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	615a      	str	r2, [r3, #20]
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Return function status */
  return HAL_OK;  
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <HAL_TIM_ConfigOCrefClear>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
{ 
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
   
  /* Process Locked */
  __HAL_LOCK(htim);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <HAL_TIM_ConfigOCrefClear+0x1a>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e097      	b.n	800c2d4 <HAL_TIM_ConfigOCrefClear+0x14a>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d109      	bne.n	800c1d0 <HAL_TIM_ConfigOCrefClear+0x46>
  {
    TIM_ETR_SetConfig(htim->Instance, 
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6818      	ldr	r0, [r3, #0]
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	68d9      	ldr	r1, [r3, #12]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	689a      	ldr	r2, [r3, #8]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	f000 fff6 	bl	800d1bc <TIM_ETR_SetConfig>
                      sClearInputConfig->ClearInputPrescaler,
                      sClearInputConfig->ClearInputPolarity,
                      sClearInputConfig->ClearInputFilter);
  }
  
  switch (Channel)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b0c      	cmp	r3, #12
 800c1d4:	d874      	bhi.n	800c2c0 <HAL_TIM_ConfigOCrefClear+0x136>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <HAL_TIM_ConfigOCrefClear+0x52>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c211 	.word	0x0800c211
 800c1e0:	0800c2c1 	.word	0x0800c2c1
 800c1e4:	0800c2c1 	.word	0x0800c2c1
 800c1e8:	0800c2c1 	.word	0x0800c2c1
 800c1ec:	0800c23d 	.word	0x0800c23d
 800c1f0:	0800c2c1 	.word	0x0800c2c1
 800c1f4:	0800c2c1 	.word	0x0800c2c1
 800c1f8:	0800c2c1 	.word	0x0800c2c1
 800c1fc:	0800c269 	.word	0x0800c269
 800c200:	0800c2c1 	.word	0x0800c2c1
 800c204:	0800c2c1 	.word	0x0800c2c1
 800c208:	0800c2c1 	.word	0x0800c2c1
 800c20c:	0800c295 	.word	0x0800c295
  {
    case TIM_CHANNEL_1:
    {        
      if(sClearInputConfig->ClearInputState != RESET)  
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d008      	beq.n	800c22a <HAL_TIM_ConfigOCrefClear+0xa0>
      {
        /* Enable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	6992      	ldr	r2, [r2, #24]
 800c222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c226:	619a      	str	r2, [r3, #24]
      {
        /* Disable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
      }
    }    
    break;
 800c228:	e04b      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	6992      	ldr	r2, [r2, #24]
 800c234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c238:	619a      	str	r2, [r3, #24]
    break;
 800c23a:	e042      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
    case TIM_CHANNEL_2:    
    { 
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      if(sClearInputConfig->ClearInputState != RESET)  
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d008      	beq.n	800c256 <HAL_TIM_ConfigOCrefClear+0xcc>
      {
        /* Enable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	6812      	ldr	r2, [r2, #0]
 800c24c:	6992      	ldr	r2, [r2, #24]
 800c24e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c252:	619a      	str	r2, [r3, #24]
      {
        /* Disable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
      }
    } 
    break;
 800c254:	e035      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	6812      	ldr	r2, [r2, #0]
 800c25e:	6992      	ldr	r2, [r2, #24]
 800c260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c264:	619a      	str	r2, [r3, #24]
    break;
 800c266:	e02c      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
    case TIM_CHANNEL_3:   
    {  
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d008      	beq.n	800c282 <HAL_TIM_ConfigOCrefClear+0xf8>
      {
        /* Enable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	69d2      	ldr	r2, [r2, #28]
 800c27a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c27e:	61da      	str	r2, [r3, #28]
      {
        /* Disable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
      }
    } 
    break;
 800c280:	e01f      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	69d2      	ldr	r2, [r2, #28]
 800c28c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c290:	61da      	str	r2, [r3, #28]
    break;
 800c292:	e016      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
    case TIM_CHANNEL_4:    
    {  
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d008      	beq.n	800c2ae <HAL_TIM_ConfigOCrefClear+0x124>
      {
        /* Enable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	6812      	ldr	r2, [r2, #0]
 800c2a4:	69d2      	ldr	r2, [r2, #28]
 800c2a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2aa:	61da      	str	r2, [r3, #28]
      {
        /* Disable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
      }
    } 
    break;
 800c2ac:	e009      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	6812      	ldr	r2, [r2, #0]
 800c2b6:	69d2      	ldr	r2, [r2, #28]
 800c2b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c2bc:	61da      	str	r2, [r3, #28]
    break;
 800c2be:	e000      	b.n	800c2c2 <HAL_TIM_ConfigOCrefClear+0x138>
    default:  
    break;
 800c2c0:	bf00      	nop
  } 

  htim->State = HAL_TIM_STATE_READY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 800c2d2:	2300      	movs	r3, #0
}  
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d101      	bne.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1c>
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	e0c8      	b.n	800c48a <HAL_TIM_ConfigClockSource+0x1ae>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2202      	movs	r2, #2
 800c304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c31e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b40      	cmp	r3, #64	; 0x40
 800c32e:	d077      	beq.n	800c420 <HAL_TIM_ConfigClockSource+0x144>
 800c330:	2b40      	cmp	r3, #64	; 0x40
 800c332:	d80e      	bhi.n	800c352 <HAL_TIM_ConfigClockSource+0x76>
 800c334:	2b10      	cmp	r3, #16
 800c336:	f000 808a 	beq.w	800c44e <HAL_TIM_ConfigClockSource+0x172>
 800c33a:	2b10      	cmp	r3, #16
 800c33c:	d802      	bhi.n	800c344 <HAL_TIM_ConfigClockSource+0x68>
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d07e      	beq.n	800c440 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 800c342:	e099      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800c344:	2b20      	cmp	r3, #32
 800c346:	f000 8089 	beq.w	800c45c <HAL_TIM_ConfigClockSource+0x180>
 800c34a:	2b30      	cmp	r3, #48	; 0x30
 800c34c:	f000 808d 	beq.w	800c46a <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 800c350:	e092      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800c352:	2b70      	cmp	r3, #112	; 0x70
 800c354:	d016      	beq.n	800c384 <HAL_TIM_ConfigClockSource+0xa8>
 800c356:	2b70      	cmp	r3, #112	; 0x70
 800c358:	d804      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x88>
 800c35a:	2b50      	cmp	r3, #80	; 0x50
 800c35c:	d040      	beq.n	800c3e0 <HAL_TIM_ConfigClockSource+0x104>
 800c35e:	2b60      	cmp	r3, #96	; 0x60
 800c360:	d04e      	beq.n	800c400 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 800c362:	e089      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800c364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c368:	d003      	beq.n	800c372 <HAL_TIM_ConfigClockSource+0x96>
 800c36a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c36e:	d024      	beq.n	800c3ba <HAL_TIM_ConfigClockSource+0xde>
    break;    
 800c370:	e082      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	6812      	ldr	r2, [r2, #0]
 800c37a:	6892      	ldr	r2, [r2, #8]
 800c37c:	f022 0207 	bic.w	r2, r2, #7
 800c380:	609a      	str	r2, [r3, #8]
    break;
 800c382:	e079      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6818      	ldr	r0, [r3, #0]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	6899      	ldr	r1, [r3, #8]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f000 ff12 	bl	800d1bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c3a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	609a      	str	r2, [r3, #8]
    break;
 800c3b8:	e05e      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	6899      	ldr	r1, [r3, #8]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	f000 fef7 	bl	800d1bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	6812      	ldr	r2, [r2, #0]
 800c3d6:	6892      	ldr	r2, [r2, #8]
 800c3d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3dc:	609a      	str	r2, [r3, #8]
    break;
 800c3de:	e04b      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	6859      	ldr	r1, [r3, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f000 fd9c 	bl	800cf2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2150      	movs	r1, #80	; 0x50
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 febf 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c3fe:	e03b      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	6859      	ldr	r1, [r3, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	461a      	mov	r2, r3
 800c40e:	f000 fe00 	bl	800d012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2160      	movs	r1, #96	; 0x60
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 feaf 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c41e:	e02b      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6818      	ldr	r0, [r3, #0]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	6859      	ldr	r1, [r3, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	461a      	mov	r2, r3
 800c42e:	f000 fd7c 	bl	800cf2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2140      	movs	r1, #64	; 0x40
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fe9f 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c43e:	e01b      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2100      	movs	r1, #0
 800c446:	4618      	mov	r0, r3
 800c448:	f000 fe98 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c44c:	e014      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2110      	movs	r1, #16
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fe91 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c45a:	e00d      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2120      	movs	r1, #32
 800c462:	4618      	mov	r0, r3
 800c464:	f000 fe8a 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c468:	e006      	b.n	800c478 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2130      	movs	r1, #48	; 0x30
 800c470:	4618      	mov	r0, r3
 800c472:	f000 fe83 	bl	800d17c <TIM_ITRx_SetConfig>
    break;
 800c476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2 = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4ae:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
   
  __HAL_LOCK(htim);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <HAL_TIM_SlaveConfigSynchronization+0x18>
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	e024      	b.n	800c530 <HAL_TIM_SlaveConfigSynchronization+0x62>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fc8b 	bl	800ce14 <TIM_SlaveTimer_SetConfig>
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	6812      	ldr	r2, [r2, #0]
 800c506:	68d2      	ldr	r2, [r2, #12]
 800c508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c50c:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	6812      	ldr	r2, [r2, #0]
 800c516:	68d2      	ldr	r2, [r2, #12]
 800c518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c51c:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     
  __HAL_UNLOCK(htim);  
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
} 
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <HAL_TIM_SlaveConfigSynchronization_IT>:
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, 
                                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d101      	bne.n	800c550 <HAL_TIM_SlaveConfigSynchronization_IT+0x18>
 800c54c:	2302      	movs	r3, #2
 800c54e:	e024      	b.n	800c59a <HAL_TIM_SlaveConfigSynchronization_IT+0x62>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fc56 	bl	800ce14 <TIM_SlaveTimer_SetConfig>
  
  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	6812      	ldr	r2, [r2, #0]
 800c570:	68d2      	ldr	r2, [r2, #12]
 800c572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c576:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	6812      	ldr	r2, [r2, #0]
 800c580:	68d2      	ldr	r2, [r2, #12]
 800c582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c586:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     
  __HAL_UNLOCK(htim);  
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b085      	sub	sp, #20
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]
  
  __HAL_LOCK(htim);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d101      	bne.n	800c5be <HAL_TIM_ReadCapturedValue+0x1c>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e03e      	b.n	800c63c <HAL_TIM_ReadCapturedValue+0x9a>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  switch (Channel)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b0c      	cmp	r3, #12
 800c5ca:	d831      	bhi.n	800c630 <HAL_TIM_ReadCapturedValue+0x8e>
 800c5cc:	a201      	add	r2, pc, #4	; (adr r2, 800c5d4 <HAL_TIM_ReadCapturedValue+0x32>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c609 	.word	0x0800c609
 800c5d8:	0800c631 	.word	0x0800c631
 800c5dc:	0800c631 	.word	0x0800c631
 800c5e0:	0800c631 	.word	0x0800c631
 800c5e4:	0800c613 	.word	0x0800c613
 800c5e8:	0800c631 	.word	0x0800c631
 800c5ec:	0800c631 	.word	0x0800c631
 800c5f0:	0800c631 	.word	0x0800c631
 800c5f4:	0800c61d 	.word	0x0800c61d
 800c5f8:	0800c631 	.word	0x0800c631
 800c5fc:	0800c631 	.word	0x0800c631
 800c600:	0800c631 	.word	0x0800c631
 800c604:	0800c627 	.word	0x0800c627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      
      /* Return the capture 1 value */
      tmpreg = htim->Instance->CCR1;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60e:	60fb      	str	r3, [r7, #12]
      
      break;
 800c610:	e00f      	b.n	800c632 <HAL_TIM_ReadCapturedValue+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      
      /* Return the capture 2 value */
      tmpreg = htim->Instance->CCR2;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c618:	60fb      	str	r3, [r7, #12]
      
      break;
 800c61a:	e00a      	b.n	800c632 <HAL_TIM_ReadCapturedValue+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      
      /* Return the capture 3 value */
      tmpreg = htim->Instance->CCR3;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c622:	60fb      	str	r3, [r7, #12]
      
      break;
 800c624:	e005      	b.n	800c632 <HAL_TIM_ReadCapturedValue+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      
      /* Return the capture 4 value */
      tmpreg = htim->Instance->CCR4;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62c:	60fb      	str	r3, [r7, #12]
      
      break;
 800c62e:	e000      	b.n	800c632 <HAL_TIM_ReadCapturedValue+0x90>
    }
    
    default:
    break;  
 800c630:	bf00      	nop
  }
     
  __HAL_UNLOCK(htim);  
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800c63a:	68fb      	ldr	r3, [r7, #12]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <HAL_TIM_ErrorCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <HAL_TIM_Base_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  return htim->State;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c6ce:	b2db      	uxtb	r3, r3
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <HAL_TIM_OC_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  return htim->State;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c6ea:	b2db      	uxtb	r3, r3
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_TIM_PWM_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  return htim->State;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c706:	b2db      	uxtb	r3, r3
}
 800c708:	4618      	mov	r0, r3
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <HAL_TIM_IC_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c722:	b2db      	uxtb	r3, r3
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <HAL_TIM_OnePulse_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  return htim->State;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c73e:	b2db      	uxtb	r3, r3
}
 800c740:	4618      	mov	r0, r3
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <HAL_TIM_Encoder_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  return htim->State;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c75a:	b2db      	uxtb	r3, r3
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a35      	ldr	r2, [pc, #212]	; (800c854 <TIM_Base_SetConfig+0xec>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d00f      	beq.n	800c7a4 <TIM_Base_SetConfig+0x3c>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c78a:	d00b      	beq.n	800c7a4 <TIM_Base_SetConfig+0x3c>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a32      	ldr	r2, [pc, #200]	; (800c858 <TIM_Base_SetConfig+0xf0>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d007      	beq.n	800c7a4 <TIM_Base_SetConfig+0x3c>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a31      	ldr	r2, [pc, #196]	; (800c85c <TIM_Base_SetConfig+0xf4>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d003      	beq.n	800c7a4 <TIM_Base_SetConfig+0x3c>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a30      	ldr	r2, [pc, #192]	; (800c860 <TIM_Base_SetConfig+0xf8>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d101      	bne.n	800c7a8 <TIM_Base_SetConfig+0x40>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e000      	b.n	800c7aa <TIM_Base_SetConfig+0x42>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d008      	beq.n	800c7c0 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a24      	ldr	r2, [pc, #144]	; (800c854 <TIM_Base_SetConfig+0xec>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d01b      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ce:	d017      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a21      	ldr	r2, [pc, #132]	; (800c858 <TIM_Base_SetConfig+0xf0>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d013      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a20      	ldr	r2, [pc, #128]	; (800c85c <TIM_Base_SetConfig+0xf4>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d00f      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a1f      	ldr	r2, [pc, #124]	; (800c860 <TIM_Base_SetConfig+0xf8>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d00b      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a1e      	ldr	r2, [pc, #120]	; (800c864 <TIM_Base_SetConfig+0xfc>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d007      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <TIM_Base_SetConfig+0x100>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d003      	beq.n	800c800 <TIM_Base_SetConfig+0x98>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a1c      	ldr	r2, [pc, #112]	; (800c86c <TIM_Base_SetConfig+0x104>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d101      	bne.n	800c804 <TIM_Base_SetConfig+0x9c>
 800c800:	2301      	movs	r3, #1
 800c802:	e000      	b.n	800c806 <TIM_Base_SetConfig+0x9e>
 800c804:	2300      	movs	r3, #0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d008      	beq.n	800c81c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	4313      	orrs	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	689a      	ldr	r2, [r3, #8]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a07      	ldr	r2, [pc, #28]	; (800c854 <TIM_Base_SetConfig+0xec>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d103      	bne.n	800c842 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	691a      	ldr	r2, [r3, #16]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	615a      	str	r2, [r3, #20]
}
 800c848:	bf00      	nop
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	40010000 	.word	0x40010000
 800c858:	40000400 	.word	0x40000400
 800c85c:	40000800 	.word	0x40000800
 800c860:	40000c00 	.word	0x40000c00
 800c864:	40014000 	.word	0x40014000
 800c868:	40014400 	.word	0x40014400
 800c86c:	40014800 	.word	0x40014800

0800c870 <TIM_TI1_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
 800c87c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800c87e:	2300      	movs	r3, #0
 800c880:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	f023 0201 	bic.w	r2, r3, #1
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1b      	ldr	r3, [r3, #32]
 800c89c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	4a26      	ldr	r2, [pc, #152]	; (800c93c <TIM_TI1_SetConfig+0xcc>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d013      	beq.n	800c8ce <TIM_TI1_SetConfig+0x5e>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8ac:	d00f      	beq.n	800c8ce <TIM_TI1_SetConfig+0x5e>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	4a23      	ldr	r2, [pc, #140]	; (800c940 <TIM_TI1_SetConfig+0xd0>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d00b      	beq.n	800c8ce <TIM_TI1_SetConfig+0x5e>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	4a22      	ldr	r2, [pc, #136]	; (800c944 <TIM_TI1_SetConfig+0xd4>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d007      	beq.n	800c8ce <TIM_TI1_SetConfig+0x5e>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	4a21      	ldr	r2, [pc, #132]	; (800c948 <TIM_TI1_SetConfig+0xd8>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d003      	beq.n	800c8ce <TIM_TI1_SetConfig+0x5e>
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4a20      	ldr	r2, [pc, #128]	; (800c94c <TIM_TI1_SetConfig+0xdc>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d101      	bne.n	800c8d2 <TIM_TI1_SetConfig+0x62>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <TIM_TI1_SetConfig+0x64>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d008      	beq.n	800c8ea <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f023 0303 	bic.w	r3, r3, #3
 800c8de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	e007      	b.n	800c8fa <TIM_TI1_SetConfig+0x8a>
  } 
  else
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f023 0303 	bic.w	r3, r3, #3
 800c8f0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f043 0301 	orr.w	r3, r3, #1
 800c8f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	b2db      	uxtb	r3, r3
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	f023 030a 	bic.w	r3, r3, #10
 800c914:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f003 030a 	and.w	r3, r3, #10
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	40010000 	.word	0x40010000
 800c940:	40000400 	.word	0x40000400
 800c944:	40000800 	.word	0x40000800
 800c948:	40000c00 	.word	0x40000c00
 800c94c:	40014000 	.word	0x40014000

0800c950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800c962:	2300      	movs	r3, #0
 800c964:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	f023 0210 	bic.w	r2, r3, #16
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c992:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f023 0320 	bic.w	r3, r3, #32
 800c9a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	011b      	lsls	r3, r3, #4
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a1c      	ldr	r2, [pc, #112]	; (800ca28 <TIM_OC2_SetConfig+0xd8>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d121      	bne.n	800ca00 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	011b      	lsls	r3, r3, #4
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9d6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	621a      	str	r2, [r3, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	371c      	adds	r7, #28
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	40010000 	.word	0x40010000

0800ca2c <TIM_DMADelayPulseCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca38:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY; 
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6a1a      	ldr	r2, [r3, #32]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d103      	bne.n	800ca54 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	761a      	strb	r2, [r3, #24]
 800ca52:	e019      	b.n	800ca88 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d103      	bne.n	800ca66 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2202      	movs	r2, #2
 800ca62:	761a      	strb	r2, [r3, #24]
 800ca64:	e010      	b.n	800ca88 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d103      	bne.n	800ca78 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2204      	movs	r2, #4
 800ca74:	761a      	strb	r2, [r3, #24]
 800ca76:	e007      	b.n	800ca88 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d102      	bne.n	800ca88 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2208      	movs	r2, #8
 800ca86:	761a      	strb	r2, [r3, #24]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7ff fdfb 	bl	800c684 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;  
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	761a      	strb	r2, [r3, #24]
}
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <TIM_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa8:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  HAL_TIM_ErrorCallback(htim);
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f7ff fdfa 	bl	800c6ac <HAL_TIM_ErrorCallback>
}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <TIM_DMACaptureCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cacc:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6a1a      	ldr	r2, [r3, #32]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d103      	bne.n	800cae8 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2201      	movs	r2, #1
 800cae4:	761a      	strb	r2, [r3, #24]
 800cae6:	e019      	b.n	800cb1c <TIM_DMACaptureCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d103      	bne.n	800cafa <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2202      	movs	r2, #2
 800caf6:	761a      	strb	r2, [r3, #24]
 800caf8:	e010      	b.n	800cb1c <TIM_DMACaptureCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d103      	bne.n	800cb0c <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2204      	movs	r2, #4
 800cb08:	761a      	strb	r2, [r3, #24]
 800cb0a:	e007      	b.n	800cb1c <TIM_DMACaptureCplt+0x5c>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d102      	bne.n	800cb1c <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2208      	movs	r2, #8
 800cb1a:	761a      	strb	r2, [r3, #24]
  }
  
  HAL_TIM_IC_CaptureCallback(htim); 
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7ff fda7 	bl	800c670 <HAL_TIM_IC_CaptureCallback>
  
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	761a      	strb	r2, [r3, #24]
}
 800cb28:	bf00      	nop
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b087      	sub	sp, #28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800cb40:	2201      	movs	r2, #1
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	fa02 f303 	lsl.w	r3, r2, r3
 800cb48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6a1a      	ldr	r2, [r3, #32]
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	43db      	mvns	r3, r3
 800cb52:	401a      	ands	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6a1a      	ldr	r2, [r3, #32]
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	fa01 f303 	lsl.w	r3, r1, r3
 800cb64:	431a      	orrs	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	621a      	str	r2, [r3, #32]
}
 800cb6a:	bf00      	nop
 800cb6c:	371c      	adds	r7, #28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <TIM_DMAPeriodElapsedCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb82:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  HAL_TIM_PeriodElapsedCallback(htim);
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f005 fb05 	bl	801219c <HAL_TIM_PeriodElapsedCallback>
}
 800cb92:	bf00      	nop
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <TIM_DMATriggerCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY; 
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  HAL_TIM_TriggerCallback(htim);
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff fd71 	bl	800c698 <HAL_TIM_TriggerCallback>
}
 800cbb6:	bf00      	nop
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	b087      	sub	sp, #28
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	f023 0201 	bic.w	r2, r3, #1
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	f023 0302 	bic.w	r3, r3, #2
 800cc12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a1a      	ldr	r2, [pc, #104]	; (800cc8c <TIM_OC1_SetConfig+0xce>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d11e      	bne.n	800cc64 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f023 0308 	bic.w	r3, r3, #8
 800cc2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f023 0304 	bic.w	r3, r3, #4
 800cc3e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	699b      	ldr	r3, [r3, #24]
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	621a      	str	r2, [r3, #32]
} 
 800cc7e:	bf00      	nop
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	40010000 	.word	0x40010000

0800cc90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800cca2:	2300      	movs	r3, #0
 800cca4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f023 0303 	bic.w	r3, r3, #3
 800ccd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	021b      	lsls	r3, r3, #8
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a1b      	ldr	r2, [pc, #108]	; (800cd64 <TIM_OC3_SetConfig+0xd4>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d121      	bne.n	800cd3e <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	021b      	lsls	r3, r3, #8
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd14:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	695b      	ldr	r3, [r3, #20]
 800cd2a:	011b      	lsls	r3, r3, #4
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	011b      	lsls	r3, r3, #4
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	621a      	str	r2, [r3, #32]
}
 800cd58:	bf00      	nop
 800cd5a:	371c      	adds	r7, #28
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	40010000 	.word	0x40010000

0800cd68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800cd72:	2300      	movs	r3, #0
 800cd74:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800cd76:	2300      	movs	r3, #0
 800cd78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	69db      	ldr	r3, [r3, #28]
 800cd9a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cda2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdaa:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	021b      	lsls	r3, r3, #8
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdbe:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	031b      	lsls	r3, r3, #12
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a10      	ldr	r2, [pc, #64]	; (800ce10 <TIM_OC4_SetConfig+0xa8>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d109      	bne.n	800cde8 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	019b      	lsls	r3, r3, #6
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	621a      	str	r2, [r3, #32]
}
 800ce02:	bf00      	nop
 800ce04:	371c      	adds	r7, #28
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	40010000 	.word	0x40010000

0800ce14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce38:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f023 0307 	bic.w	r3, r3, #7
 800ce4a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	697a      	ldr	r2, [r7, #20]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	609a      	str	r2, [r3, #8]
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	2b30      	cmp	r3, #48	; 0x30
 800ce64:	d056      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x100>
 800ce66:	2b30      	cmp	r3, #48	; 0x30
 800ce68:	d806      	bhi.n	800ce78 <TIM_SlaveTimer_SetConfig+0x64>
 800ce6a:	2b10      	cmp	r3, #16
 800ce6c:	d054      	beq.n	800cf18 <TIM_SlaveTimer_SetConfig+0x104>
 800ce6e:	2b20      	cmp	r3, #32
 800ce70:	d054      	beq.n	800cf1c <TIM_SlaveTimer_SetConfig+0x108>
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d054      	beq.n	800cf20 <TIM_SlaveTimer_SetConfig+0x10c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
       
  default:
    break;
 800ce76:	e054      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
  switch (sSlaveConfig->InputTrigger)
 800ce78:	2b50      	cmp	r3, #80	; 0x50
 800ce7a:	d037      	beq.n	800ceec <TIM_SlaveTimer_SetConfig+0xd8>
 800ce7c:	2b50      	cmp	r3, #80	; 0x50
 800ce7e:	d802      	bhi.n	800ce86 <TIM_SlaveTimer_SetConfig+0x72>
 800ce80:	2b40      	cmp	r3, #64	; 0x40
 800ce82:	d010      	beq.n	800cea6 <TIM_SlaveTimer_SetConfig+0x92>
    break;
 800ce84:	e04d      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
  switch (sSlaveConfig->InputTrigger)
 800ce86:	2b60      	cmp	r3, #96	; 0x60
 800ce88:	d03a      	beq.n	800cf00 <TIM_SlaveTimer_SetConfig+0xec>
 800ce8a:	2b70      	cmp	r3, #112	; 0x70
 800ce8c:	d000      	beq.n	800ce90 <TIM_SlaveTimer_SetConfig+0x7c>
    break;
 800ce8e:	e048      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_ETR_SetConfig(htim->Instance, 
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	68d9      	ldr	r1, [r3, #12]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	f000 f98c 	bl	800d1bc <TIM_ETR_SetConfig>
    break;
 800cea4:	e03d      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
      tmpccer = htim->Instance->CCER;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	6812      	ldr	r2, [r2, #0]
 800ceb6:	6a12      	ldr	r2, [r2, #32]
 800ceb8:	f022 0201 	bic.w	r2, r2, #1
 800cebc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	699b      	ldr	r3, [r3, #24]
 800cec4:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cecc:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	011b      	lsls	r3, r3, #4
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	621a      	str	r2, [r3, #32]
    break;
 800ceea:	e01a      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	6899      	ldr	r1, [r3, #8]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	461a      	mov	r2, r3
 800cefa:	f000 f816 	bl	800cf2a <TIM_TI1_ConfigInputStage>
    break;
 800cefe:	e010      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6818      	ldr	r0, [r3, #0]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	6899      	ldr	r1, [r3, #8]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	f000 f880 	bl	800d012 <TIM_TI2_ConfigInputStage>
    break;
 800cf12:	e006      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800cf14:	bf00      	nop
 800cf16:	e004      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800cf18:	bf00      	nop
 800cf1a:	e002      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800cf1c:	bf00      	nop
 800cf1e:	e000      	b.n	800cf22 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 800cf20:	bf00      	nop
  }
}
 800cf22:	bf00      	nop
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b087      	sub	sp, #28
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	60f8      	str	r0, [r7, #12]
 800cf32:	60b9      	str	r1, [r7, #8]
 800cf34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800cf36:	2300      	movs	r3, #0
 800cf38:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6a1b      	ldr	r3, [r3, #32]
 800cf48:	f023 0201 	bic.w	r2, r3, #1
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	011b      	lsls	r3, r3, #4
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f023 030a 	bic.w	r3, r3, #10
 800cf6e:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	621a      	str	r2, [r3, #32]
}
 800cf84:	bf00      	nop
 800cf86:	371c      	adds	r7, #28
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6a1b      	ldr	r3, [r3, #32]
 800cfaa:	f023 0210 	bic.w	r2, r3, #16
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	613b      	str	r3, [r7, #16]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	021b      	lsls	r3, r3, #8
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	031b      	lsls	r3, r3, #12
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cfea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	011b      	lsls	r3, r3, #4
 800cff0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	621a      	str	r2, [r3, #32]
}
 800d006:	bf00      	nop
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d012:	b480      	push	{r7}
 800d014:	b087      	sub	sp, #28
 800d016:	af00      	add	r7, sp, #0
 800d018:	60f8      	str	r0, [r7, #12]
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800d01e:	2300      	movs	r3, #0
 800d020:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800d022:	2300      	movs	r3, #0
 800d024:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	f023 0210 	bic.w	r2, r3, #16
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6a1b      	ldr	r3, [r3, #32]
 800d03c:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	031b      	lsls	r3, r3, #12
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	011b      	lsls	r3, r3, #4
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	4313      	orrs	r3, r2
 800d060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	697a      	ldr	r2, [r7, #20]
 800d066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	621a      	str	r2, [r3, #32]
}
 800d06e:	bf00      	nop
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b087      	sub	sp, #28
 800d07e:	af00      	add	r7, sp, #0
 800d080:	60f8      	str	r0, [r7, #12]
 800d082:	60b9      	str	r1, [r7, #8]
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800d088:	2300      	movs	r3, #0
 800d08a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800d08c:	2300      	movs	r3, #0
 800d08e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6a1b      	ldr	r3, [r3, #32]
 800d094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f023 0303 	bic.w	r3, r3, #3
 800d0ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	011b      	lsls	r3, r3, #4
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d0d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	021b      	lsls	r3, r3, #8
 800d0d8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	621a      	str	r2, [r3, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b087      	sub	sp, #28
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6a1b      	ldr	r3, [r3, #32]
 800d114:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6a1b      	ldr	r3, [r3, #32]
 800d126:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d12e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	021b      	lsls	r3, r3, #8
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	4313      	orrs	r3, r2
 800d138:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d140:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	031b      	lsls	r3, r3, #12
 800d146:	b29b      	uxth	r3, r3
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d154:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	031b      	lsls	r3, r3, #12
 800d15a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d15e:	693a      	ldr	r2, [r7, #16]
 800d160:	4313      	orrs	r3, r2
 800d162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	697a      	ldr	r2, [r7, #20]
 800d168:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	621a      	str	r2, [r3, #32]
}
 800d170:	bf00      	nop
 800d172:	371c      	adds	r7, #28
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	460b      	mov	r3, r1
 800d186:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800d188:	2300      	movs	r3, #0
 800d18a:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d198:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800d19a:	887b      	ldrh	r3, [r7, #2]
 800d19c:	f043 0307 	orr.w	r3, r3, #7
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	609a      	str	r2, [r3, #8]
}
 800d1b0:	bf00      	nop
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	021a      	lsls	r2, r3, #8
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	697a      	ldr	r2, [r7, #20]
 800d1f2:	609a      	str	r2, [r3, #8]
} 
 800d1f4:	bf00      	nop
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <HAL_TIMEx_HallSensor_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08a      	sub	sp, #40	; 0x28
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e07c      	b.n	800d30e <HAL_TIMEx_HallSensor_Init+0x10e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2202      	movs	r2, #2
 800d218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
  HAL_TIMEx_HallSensor_MspInit(htim);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f8aa 	bl	800d376 <HAL_TIMEx_HallSensor_MspInit>
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3304      	adds	r3, #4
 800d22a:	4619      	mov	r1, r3
 800d22c:	4610      	mov	r0, r2
 800d22e:	f7ff fa9b 	bl	800c768 <TIM_Base_SetConfig>
  
  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	6819      	ldr	r1, [r3, #0]
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	2203      	movs	r2, #3
 800d240:	f7ff fb16 	bl	800c870 <TIM_TI1_SetConfig>
  
  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	6992      	ldr	r2, [r2, #24]
 800d24e:	f022 020c 	bic.w	r2, r2, #12
 800d252:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	6812      	ldr	r2, [r2, #0]
 800d25c:	6991      	ldr	r1, [r2, #24]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	6852      	ldr	r2, [r2, #4]
 800d262:	430a      	orrs	r2, r1
 800d264:	619a      	str	r2, [r3, #24]
  
  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	6812      	ldr	r2, [r2, #0]
 800d26e:	6852      	ldr	r2, [r2, #4]
 800d270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d274:	605a      	str	r2, [r3, #4]
  
  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	6812      	ldr	r2, [r2, #0]
 800d27e:	6892      	ldr	r2, [r2, #8]
 800d280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d284:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	6892      	ldr	r2, [r2, #8]
 800d290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d294:	609a      	str	r2, [r3, #8]
  
  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	6812      	ldr	r2, [r2, #0]
 800d29e:	6892      	ldr	r2, [r2, #8]
 800d2a0:	f022 0207 	bic.w	r2, r2, #7
 800d2a4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	6812      	ldr	r2, [r2, #0]
 800d2ae:	6892      	ldr	r2, [r2, #8]
 800d2b0:	f042 0204 	orr.w	r2, r2, #4
 800d2b4:	609a      	str	r2, [r3, #8]
  
  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800d2be:	2370      	movs	r3, #112	; 0x70
 800d2c0:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay; 
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	613b      	str	r3, [r7, #16]
    
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f107 020c 	add.w	r2, r7, #12
 800d2dc:	4611      	mov	r1, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fb36 	bl	800c950 <TIM_OC2_SetConfig>
  
  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	6812      	ldr	r2, [r2, #0]
 800d2ec:	6852      	ldr	r2, [r2, #4]
 800d2ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2f2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	6812      	ldr	r2, [r2, #0]
 800d2fc:	6852      	ldr	r2, [r2, #4]
 800d2fe:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d302:	605a      	str	r2, [r3, #4]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3728      	adds	r7, #40	; 0x28
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <HAL_TIMEx_HallSensor_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2202      	movs	r2, #2
 800d322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6a1a      	ldr	r2, [r3, #32]
 800d32c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d330:	4013      	ands	r3, r2
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10f      	bne.n	800d356 <HAL_TIMEx_HallSensor_DeInit+0x40>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6a1a      	ldr	r2, [r3, #32]
 800d33c:	f240 4344 	movw	r3, #1092	; 0x444
 800d340:	4013      	ands	r3, r2
 800d342:	2b00      	cmp	r3, #0
 800d344:	d107      	bne.n	800d356 <HAL_TIMEx_HallSensor_DeInit+0x40>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	6812      	ldr	r2, [r2, #0]
 800d350:	f022 0201 	bic.w	r2, r2, #1
 800d354:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f817 	bl	800d38a <HAL_TIMEx_HallSensor_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <HAL_TIMEx_HallSensor_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800d37e:	bf00      	nop
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <HAL_TIMEx_HallSensor_MspDeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <HAL_TIMEx_HallSensor_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7ff fbbe 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	6812      	ldr	r2, [r2, #0]
 800d3bc:	6812      	ldr	r2, [r2, #0]
 800d3be:	f042 0201 	orr.w	r2, r2, #1
 800d3c2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <HAL_TIMEx_HallSensor_Stop>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	2100      	movs	r1, #0
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff fba6 	bl	800cb30 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6a1a      	ldr	r2, [r3, #32]
 800d3ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10f      	bne.n	800d414 <HAL_TIMEx_HallSensor_Stop+0x46>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6a1a      	ldr	r2, [r3, #32]
 800d3fa:	f240 4344 	movw	r3, #1092	; 0x444
 800d3fe:	4013      	ands	r3, r2
 800d400:	2b00      	cmp	r3, #0
 800d402:	d107      	bne.n	800d414 <HAL_TIMEx_HallSensor_Stop+0x46>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	6812      	ldr	r2, [r2, #0]
 800d40c:	6812      	ldr	r2, [r2, #0]
 800d40e:	f022 0201 	bic.w	r2, r2, #1
 800d412:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <HAL_TIMEx_HallSensor_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{ 
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6812      	ldr	r2, [r2, #0]
 800d42e:	68d2      	ldr	r2, [r2, #12]
 800d430:	f042 0202 	orr.w	r2, r2, #2
 800d434:	60da      	str	r2, [r3, #12]
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2201      	movs	r2, #1
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f7ff fb76 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	6812      	ldr	r2, [r2, #0]
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	f042 0201 	orr.w	r2, r2, #1
 800d452:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <HAL_TIMEx_HallSensor_Stop_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2200      	movs	r2, #0
 800d46c:	2100      	movs	r1, #0
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff fb5e 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	68d2      	ldr	r2, [r2, #12]
 800d47e:	f022 0202 	bic.w	r2, r2, #2
 800d482:	60da      	str	r2, [r3, #12]
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6a1a      	ldr	r2, [r3, #32]
 800d48a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d48e:	4013      	ands	r3, r2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10f      	bne.n	800d4b4 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6a1a      	ldr	r2, [r3, #32]
 800d49a:	f240 4344 	movw	r3, #1092	; 0x444
 800d49e:	4013      	ands	r3, r2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d107      	bne.n	800d4b4 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	6812      	ldr	r2, [r2, #0]
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	f022 0201 	bic.w	r2, r2, #1
 800d4b2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b084      	sub	sp, #16
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	60b9      	str	r1, [r7, #8]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
   if((htim->State == HAL_TIM_STATE_BUSY))
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d101      	bne.n	800d4dc <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e03b      	b.n	800d554 <HAL_TIMEx_HallSensor_Start_DMA+0x96>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d10b      	bne.n	800d500 <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d104      	bne.n	800d4f8 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 800d4ee:	88fb      	ldrh	r3, [r7, #6]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e02d      	b.n	800d554 <HAL_TIMEx_HallSensor_Start_DMA+0x96>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2201      	movs	r2, #1
 800d506:	2100      	movs	r1, #0
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff fb11 	bl	800cb30 <TIM_CCxChannelCmd>
  
  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	4a12      	ldr	r2, [pc, #72]	; (800d55c <HAL_TIMEx_HallSensor_Start_DMA+0x9e>)
 800d514:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	4a11      	ldr	r2, [pc, #68]	; (800d560 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>)
 800d51c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the DMA Stream for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6a18      	ldr	r0, [r3, #32]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3334      	adds	r3, #52	; 0x34
 800d528:	4619      	mov	r1, r3
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	88fb      	ldrh	r3, [r7, #6]
 800d52e:	f7f5 fb4c 	bl	8002bca <HAL_DMA_Start_IT>
  
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	6812      	ldr	r2, [r2, #0]
 800d53a:	68d2      	ldr	r2, [r2, #12]
 800d53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d540:	60da      	str	r2, [r3, #12]
 
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	6812      	ldr	r2, [r2, #0]
 800d54a:	6812      	ldr	r2, [r2, #0]
 800d54c:	f042 0201 	orr.w	r2, r2, #1
 800d550:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	0800cac1 	.word	0x0800cac1
 800d560:	0800ca9d 	.word	0x0800ca9d

0800d564 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	2100      	movs	r1, #0
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fadb 	bl	800cb30 <TIM_CCxChannelCmd>
 
  
  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	6812      	ldr	r2, [r2, #0]
 800d582:	68d2      	ldr	r2, [r2, #12]
 800d584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d588:	60da      	str	r2, [r3, #12]
 
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6a1a      	ldr	r2, [r3, #32]
 800d590:	f241 1311 	movw	r3, #4369	; 0x1111
 800d594:	4013      	ands	r3, r2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10f      	bne.n	800d5ba <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6a1a      	ldr	r2, [r3, #32]
 800d5a0:	f240 4344 	movw	r3, #1092	; 0x444
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d107      	bne.n	800d5ba <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	6812      	ldr	r2, [r2, #0]
 800d5b2:	6812      	ldr	r2, [r2, #0]
 800d5b4:	f022 0201 	bic.w	r2, r2, #1
 800d5b8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2204      	movs	r2, #4
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f001 f84f 	bl	800e67a <TIM_CCxNChannelCmd>
    
  /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d5e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	6812      	ldr	r2, [r2, #0]
 800d5f4:	6812      	ldr	r2, [r2, #0]
 800d5f6:	f042 0201 	orr.w	r2, r2, #1
 800d5fa:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
} 
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2200      	movs	r2, #0
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	4618      	mov	r0, r3
 800d61a:	f001 f82e 	bl	800e67a <TIM_CCxNChannelCmd>
    
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6a1a      	ldr	r2, [r3, #32]
 800d624:	f241 1311 	movw	r3, #4369	; 0x1111
 800d628:	4013      	ands	r3, r2
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10f      	bne.n	800d64e <HAL_TIMEx_OCN_Stop+0x48>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6a1a      	ldr	r2, [r3, #32]
 800d634:	f240 4344 	movw	r3, #1092	; 0x444
 800d638:	4013      	ands	r3, r2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d107      	bne.n	800d64e <HAL_TIMEx_OCN_Stop+0x48>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d64c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6a1a      	ldr	r2, [r3, #32]
 800d654:	f241 1311 	movw	r3, #4369	; 0x1111
 800d658:	4013      	ands	r3, r2
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10f      	bne.n	800d67e <HAL_TIMEx_OCN_Stop+0x78>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6a1a      	ldr	r2, [r3, #32]
 800d664:	f240 4344 	movw	r3, #1092	; 0x444
 800d668:	4013      	ands	r3, r2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d107      	bne.n	800d67e <HAL_TIMEx_OCN_Stop+0x78>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	6812      	ldr	r2, [r2, #0]
 800d676:	6812      	ldr	r2, [r2, #0]
 800d678:	f022 0201 	bic.w	r2, r2, #1
 800d67c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
} 
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b0c      	cmp	r3, #12
 800d696:	d841      	bhi.n	800d71c <HAL_TIMEx_OCN_Start_IT+0x94>
 800d698:	a201      	add	r2, pc, #4	; (adr r2, 800d6a0 <HAL_TIMEx_OCN_Start_IT+0x18>)
 800d69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d69e:	bf00      	nop
 800d6a0:	0800d6d5 	.word	0x0800d6d5
 800d6a4:	0800d71d 	.word	0x0800d71d
 800d6a8:	0800d71d 	.word	0x0800d71d
 800d6ac:	0800d71d 	.word	0x0800d71d
 800d6b0:	0800d6e7 	.word	0x0800d6e7
 800d6b4:	0800d71d 	.word	0x0800d71d
 800d6b8:	0800d71d 	.word	0x0800d71d
 800d6bc:	0800d71d 	.word	0x0800d71d
 800d6c0:	0800d6f9 	.word	0x0800d6f9
 800d6c4:	0800d71d 	.word	0x0800d71d
 800d6c8:	0800d71d 	.word	0x0800d71d
 800d6cc:	0800d71d 	.word	0x0800d71d
 800d6d0:	0800d70b 	.word	0x0800d70b
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	6812      	ldr	r2, [r2, #0]
 800d6dc:	68d2      	ldr	r2, [r2, #12]
 800d6de:	f042 0202 	orr.w	r2, r2, #2
 800d6e2:	60da      	str	r2, [r3, #12]
    }
    break;
 800d6e4:	e01b      	b.n	800d71e <HAL_TIMEx_OCN_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	6812      	ldr	r2, [r2, #0]
 800d6ee:	68d2      	ldr	r2, [r2, #12]
 800d6f0:	f042 0204 	orr.w	r2, r2, #4
 800d6f4:	60da      	str	r2, [r3, #12]
    }
    break;
 800d6f6:	e012      	b.n	800d71e <HAL_TIMEx_OCN_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	6812      	ldr	r2, [r2, #0]
 800d700:	68d2      	ldr	r2, [r2, #12]
 800d702:	f042 0208 	orr.w	r2, r2, #8
 800d706:	60da      	str	r2, [r3, #12]
    }
    break;
 800d708:	e009      	b.n	800d71e <HAL_TIMEx_OCN_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	6812      	ldr	r2, [r2, #0]
 800d712:	68d2      	ldr	r2, [r2, #12]
 800d714:	f042 0210 	orr.w	r2, r2, #16
 800d718:	60da      	str	r2, [r3, #12]
    }
    break;
 800d71a:	e000      	b.n	800d71e <HAL_TIMEx_OCN_Start_IT+0x96>
    
    default:
    break;
 800d71c:	bf00      	nop
  } 
  
  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	6812      	ldr	r2, [r2, #0]
 800d726:	68d2      	ldr	r2, [r2, #12]
 800d728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d72c:	60da      	str	r2, [r3, #12]
  
  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2204      	movs	r2, #4
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	4618      	mov	r0, r3
 800d738:	f000 ff9f 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d74a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	6812      	ldr	r2, [r2, #0]
 800d754:	6812      	ldr	r2, [r2, #0]
 800d756:	f042 0201 	orr.w	r2, r2, #1
 800d75a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d75c:	2300      	movs	r3, #0
} 
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b0c      	cmp	r3, #12
 800d774:	d840      	bhi.n	800d7f8 <HAL_TIMEx_OCN_Stop_IT+0x92>
 800d776:	a201      	add	r2, pc, #4	; (adr r2, 800d77c <HAL_TIMEx_OCN_Stop_IT+0x16>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d7b1 	.word	0x0800d7b1
 800d780:	0800d7f9 	.word	0x0800d7f9
 800d784:	0800d7f9 	.word	0x0800d7f9
 800d788:	0800d7f9 	.word	0x0800d7f9
 800d78c:	0800d7c3 	.word	0x0800d7c3
 800d790:	0800d7f9 	.word	0x0800d7f9
 800d794:	0800d7f9 	.word	0x0800d7f9
 800d798:	0800d7f9 	.word	0x0800d7f9
 800d79c:	0800d7d5 	.word	0x0800d7d5
 800d7a0:	0800d7f9 	.word	0x0800d7f9
 800d7a4:	0800d7f9 	.word	0x0800d7f9
 800d7a8:	0800d7f9 	.word	0x0800d7f9
 800d7ac:	0800d7e7 	.word	0x0800d7e7
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	68d2      	ldr	r2, [r2, #12]
 800d7ba:	f022 0202 	bic.w	r2, r2, #2
 800d7be:	60da      	str	r2, [r3, #12]
    }
    break;
 800d7c0:	e01b      	b.n	800d7fa <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	6812      	ldr	r2, [r2, #0]
 800d7ca:	68d2      	ldr	r2, [r2, #12]
 800d7cc:	f022 0204 	bic.w	r2, r2, #4
 800d7d0:	60da      	str	r2, [r3, #12]
    }
    break;
 800d7d2:	e012      	b.n	800d7fa <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	6812      	ldr	r2, [r2, #0]
 800d7dc:	68d2      	ldr	r2, [r2, #12]
 800d7de:	f022 0208 	bic.w	r2, r2, #8
 800d7e2:	60da      	str	r2, [r3, #12]
    }
    break;
 800d7e4:	e009      	b.n	800d7fa <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	6812      	ldr	r2, [r2, #0]
 800d7ee:	68d2      	ldr	r2, [r2, #12]
 800d7f0:	f022 0210 	bic.w	r2, r2, #16
 800d7f4:	60da      	str	r2, [r3, #12]
    }
    break;
 800d7f6:	e000      	b.n	800d7fa <HAL_TIMEx_OCN_Stop_IT+0x94>
    
    default:
    break; 
 800d7f8:	bf00      	nop
  }
  
  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2200      	movs	r2, #0
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 ff39 	bl	800e67a <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6a1a      	ldr	r2, [r3, #32]
 800d80e:	f240 4344 	movw	r3, #1092	; 0x444
 800d812:	4013      	ands	r3, r2
 800d814:	2b00      	cmp	r3, #0
 800d816:	d107      	bne.n	800d828 <HAL_TIMEx_OCN_Stop_IT+0xc2>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	6812      	ldr	r2, [r2, #0]
 800d820:	68d2      	ldr	r2, [r2, #12]
 800d822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d826:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6a1a      	ldr	r2, [r3, #32]
 800d82e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d832:	4013      	ands	r3, r2
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10f      	bne.n	800d858 <HAL_TIMEx_OCN_Stop_IT+0xf2>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	6a1a      	ldr	r2, [r3, #32]
 800d83e:	f240 4344 	movw	r3, #1092	; 0x444
 800d842:	4013      	ands	r3, r2
 800d844:	2b00      	cmp	r3, #0
 800d846:	d107      	bne.n	800d858 <HAL_TIMEx_OCN_Stop_IT+0xf2>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	6812      	ldr	r2, [r2, #0]
 800d850:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d856:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6a1a      	ldr	r2, [r3, #32]
 800d85e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d862:	4013      	ands	r3, r2
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10f      	bne.n	800d888 <HAL_TIMEx_OCN_Stop_IT+0x122>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6a1a      	ldr	r2, [r3, #32]
 800d86e:	f240 4344 	movw	r3, #1092	; 0x444
 800d872:	4013      	ands	r3, r2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d107      	bne.n	800d888 <HAL_TIMEx_OCN_Stop_IT+0x122>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	6812      	ldr	r2, [r2, #0]
 800d882:	f022 0201 	bic.w	r2, r2, #1
 800d886:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800d888:	2300      	movs	r3, #0
} 
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	60f8      	str	r0, [r7, #12]
 800d89a:	60b9      	str	r1, [r7, #8]
 800d89c:	607a      	str	r2, [r7, #4]
 800d89e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d101      	bne.n	800d8b0 <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	e0b8      	b.n	800da22 <HAL_TIMEx_OCN_Start_DMA+0x190>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d10b      	bne.n	800d8d4 <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d104      	bne.n	800d8cc <HAL_TIMEx_OCN_Start_DMA+0x3a>
 800d8c2:	887b      	ldrh	r3, [r7, #2]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e0aa      	b.n	800da22 <HAL_TIMEx_OCN_Start_DMA+0x190>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2b0c      	cmp	r3, #12
 800d8d8:	f200 808a 	bhi.w	800d9f0 <HAL_TIMEx_OCN_Start_DMA+0x15e>
 800d8dc:	a201      	add	r2, pc, #4	; (adr r2, 800d8e4 <HAL_TIMEx_OCN_Start_DMA+0x52>)
 800d8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e2:	bf00      	nop
 800d8e4:	0800d919 	.word	0x0800d919
 800d8e8:	0800d9f1 	.word	0x0800d9f1
 800d8ec:	0800d9f1 	.word	0x0800d9f1
 800d8f0:	0800d9f1 	.word	0x0800d9f1
 800d8f4:	0800d94f 	.word	0x0800d94f
 800d8f8:	0800d9f1 	.word	0x0800d9f1
 800d8fc:	0800d9f1 	.word	0x0800d9f1
 800d900:	0800d9f1 	.word	0x0800d9f1
 800d904:	0800d985 	.word	0x0800d985
 800d908:	0800d9f1 	.word	0x0800d9f1
 800d90c:	0800d9f1 	.word	0x0800d9f1
 800d910:	0800d9f1 	.word	0x0800d9f1
 800d914:	0800d9bb 	.word	0x0800d9bb
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	4a43      	ldr	r2, [pc, #268]	; (800da2c <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800d91e:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	4a42      	ldr	r2, [pc, #264]	; (800da30 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800d926:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6a18      	ldr	r0, [r3, #32]
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3334      	adds	r3, #52	; 0x34
 800d934:	461a      	mov	r2, r3
 800d936:	887b      	ldrh	r3, [r7, #2]
 800d938:	f7f5 f947 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	6812      	ldr	r2, [r2, #0]
 800d944:	68d2      	ldr	r2, [r2, #12]
 800d946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d94a:	60da      	str	r2, [r3, #12]
    }
    break;
 800d94c:	e051      	b.n	800d9f2 <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	4a36      	ldr	r2, [pc, #216]	; (800da2c <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800d954:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95a:	4a35      	ldr	r2, [pc, #212]	; (800da30 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800d95c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3338      	adds	r3, #56	; 0x38
 800d96a:	461a      	mov	r2, r3
 800d96c:	887b      	ldrh	r3, [r7, #2]
 800d96e:	f7f5 f92c 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	6812      	ldr	r2, [r2, #0]
 800d97a:	68d2      	ldr	r2, [r2, #12]
 800d97c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d980:	60da      	str	r2, [r3, #12]
    }
    break;
 800d982:	e036      	b.n	800d9f2 <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    case TIM_CHANNEL_3:
{
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d988:	4a28      	ldr	r2, [pc, #160]	; (800da2c <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800d98a:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d990:	4a27      	ldr	r2, [pc, #156]	; (800da30 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800d992:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d998:	6879      	ldr	r1, [r7, #4]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	333c      	adds	r3, #60	; 0x3c
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	887b      	ldrh	r3, [r7, #2]
 800d9a4:	f7f5 f911 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	6812      	ldr	r2, [r2, #0]
 800d9b0:	68d2      	ldr	r2, [r2, #12]
 800d9b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9b6:	60da      	str	r2, [r3, #12]
    }
    break;
 800d9b8:	e01b      	b.n	800d9f2 <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9be:	4a1b      	ldr	r2, [pc, #108]	; (800da2c <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 800d9c0:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c6:	4a1a      	ldr	r2, [pc, #104]	; (800da30 <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 800d9c8:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3340      	adds	r3, #64	; 0x40
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	887b      	ldrh	r3, [r7, #2]
 800d9da:	f7f5 f8f6 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	68d2      	ldr	r2, [r2, #12]
 800d9e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9ec:	60da      	str	r2, [r3, #12]
    }
    break;
 800d9ee:	e000      	b.n	800d9f2 <HAL_TIMEx_OCN_Start_DMA+0x160>
    
    default:
    break;
 800d9f0:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2204      	movs	r2, #4
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 fe3d 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	6812      	ldr	r2, [r2, #0]
 800da08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800da0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da0e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	6812      	ldr	r2, [r2, #0]
 800da18:	6812      	ldr	r2, [r2, #0]
 800da1a:	f042 0201 	orr.w	r2, r2, #1
 800da1e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0800ca2d 	.word	0x0800ca2d
 800da30:	0800ca9d 	.word	0x0800ca9d

0800da34 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	2b0c      	cmp	r3, #12
 800da42:	d841      	bhi.n	800dac8 <HAL_TIMEx_OCN_Stop_DMA+0x94>
 800da44:	a201      	add	r2, pc, #4	; (adr r2, 800da4c <HAL_TIMEx_OCN_Stop_DMA+0x18>)
 800da46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4a:	bf00      	nop
 800da4c:	0800da81 	.word	0x0800da81
 800da50:	0800dac9 	.word	0x0800dac9
 800da54:	0800dac9 	.word	0x0800dac9
 800da58:	0800dac9 	.word	0x0800dac9
 800da5c:	0800da93 	.word	0x0800da93
 800da60:	0800dac9 	.word	0x0800dac9
 800da64:	0800dac9 	.word	0x0800dac9
 800da68:	0800dac9 	.word	0x0800dac9
 800da6c:	0800daa5 	.word	0x0800daa5
 800da70:	0800dac9 	.word	0x0800dac9
 800da74:	0800dac9 	.word	0x0800dac9
 800da78:	0800dac9 	.word	0x0800dac9
 800da7c:	0800dab7 	.word	0x0800dab7
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	6812      	ldr	r2, [r2, #0]
 800da88:	68d2      	ldr	r2, [r2, #12]
 800da8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800da8e:	60da      	str	r2, [r3, #12]
    }
    break;
 800da90:	e01b      	b.n	800daca <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	6812      	ldr	r2, [r2, #0]
 800da9a:	68d2      	ldr	r2, [r2, #12]
 800da9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daa0:	60da      	str	r2, [r3, #12]
    }
    break;
 800daa2:	e012      	b.n	800daca <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	68d2      	ldr	r2, [r2, #12]
 800daae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dab2:	60da      	str	r2, [r3, #12]
    }
    break;
 800dab4:	e009      	b.n	800daca <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	6812      	ldr	r2, [r2, #0]
 800dabe:	68d2      	ldr	r2, [r2, #12]
 800dac0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dac4:	60da      	str	r2, [r3, #12]
    }
    break;
 800dac6:	e000      	b.n	800daca <HAL_TIMEx_OCN_Stop_DMA+0x96>
    
    default:
    break;
 800dac8:	bf00      	nop
  } 
  
  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2200      	movs	r2, #0
 800dad0:	6839      	ldr	r1, [r7, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 fdd1 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6a1a      	ldr	r2, [r3, #32]
 800dade:	f241 1311 	movw	r3, #4369	; 0x1111
 800dae2:	4013      	ands	r3, r2
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10f      	bne.n	800db08 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6a1a      	ldr	r2, [r3, #32]
 800daee:	f240 4344 	movw	r3, #1092	; 0x444
 800daf2:	4013      	ands	r3, r2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d107      	bne.n	800db08 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	6812      	ldr	r2, [r2, #0]
 800db00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800db02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800db06:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6a1a      	ldr	r2, [r3, #32]
 800db0e:	f241 1311 	movw	r3, #4369	; 0x1111
 800db12:	4013      	ands	r3, r2
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10f      	bne.n	800db38 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6a1a      	ldr	r2, [r3, #32]
 800db1e:	f240 4344 	movw	r3, #1092	; 0x444
 800db22:	4013      	ands	r3, r2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d107      	bne.n	800db38 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	6812      	ldr	r2, [r2, #0]
 800db30:	6812      	ldr	r2, [r2, #0]
 800db32:	f022 0201 	bic.w	r2, r2, #1
 800db36:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2204      	movs	r2, #4
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f000 fd8c 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	6812      	ldr	r2, [r2, #0]
 800db6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800db6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db70:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	6812      	ldr	r2, [r2, #0]
 800db7c:	f042 0201 	orr.w	r2, r2, #1
 800db80:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800db82:	2300      	movs	r3, #0
} 
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2200      	movs	r2, #0
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 fd6b 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6a1a      	ldr	r2, [r3, #32]
 800dbaa:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbae:	4013      	ands	r3, r2
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10f      	bne.n	800dbd4 <HAL_TIMEx_PWMN_Stop+0x48>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6a1a      	ldr	r2, [r3, #32]
 800dbba:	f240 4344 	movw	r3, #1092	; 0x444
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d107      	bne.n	800dbd4 <HAL_TIMEx_PWMN_Stop+0x48>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	6812      	ldr	r2, [r2, #0]
 800dbcc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800dbce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbd2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	6a1a      	ldr	r2, [r3, #32]
 800dbda:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbde:	4013      	ands	r3, r2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10f      	bne.n	800dc04 <HAL_TIMEx_PWMN_Stop+0x78>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6a1a      	ldr	r2, [r3, #32]
 800dbea:	f240 4344 	movw	r3, #1092	; 0x444
 800dbee:	4013      	ands	r3, r2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d107      	bne.n	800dc04 <HAL_TIMEx_PWMN_Stop+0x78>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	6812      	ldr	r2, [r2, #0]
 800dbfc:	6812      	ldr	r2, [r2, #0]
 800dbfe:	f022 0201 	bic.w	r2, r2, #1
 800dc02:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
} 
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2b0c      	cmp	r3, #12
 800dc1c:	d840      	bhi.n	800dca0 <HAL_TIMEx_PWMN_Start_IT+0x92>
 800dc1e:	a201      	add	r2, pc, #4	; (adr r2, 800dc24 <HAL_TIMEx_PWMN_Start_IT+0x16>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc59 	.word	0x0800dc59
 800dc28:	0800dca1 	.word	0x0800dca1
 800dc2c:	0800dca1 	.word	0x0800dca1
 800dc30:	0800dca1 	.word	0x0800dca1
 800dc34:	0800dc6b 	.word	0x0800dc6b
 800dc38:	0800dca1 	.word	0x0800dca1
 800dc3c:	0800dca1 	.word	0x0800dca1
 800dc40:	0800dca1 	.word	0x0800dca1
 800dc44:	0800dc7d 	.word	0x0800dc7d
 800dc48:	0800dca1 	.word	0x0800dca1
 800dc4c:	0800dca1 	.word	0x0800dca1
 800dc50:	0800dca1 	.word	0x0800dca1
 800dc54:	0800dc8f 	.word	0x0800dc8f
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	68d2      	ldr	r2, [r2, #12]
 800dc62:	f042 0202 	orr.w	r2, r2, #2
 800dc66:	60da      	str	r2, [r3, #12]
    }
    break;
 800dc68:	e01b      	b.n	800dca2 <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	6812      	ldr	r2, [r2, #0]
 800dc72:	68d2      	ldr	r2, [r2, #12]
 800dc74:	f042 0204 	orr.w	r2, r2, #4
 800dc78:	60da      	str	r2, [r3, #12]
    }
    break;
 800dc7a:	e012      	b.n	800dca2 <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	6812      	ldr	r2, [r2, #0]
 800dc84:	68d2      	ldr	r2, [r2, #12]
 800dc86:	f042 0208 	orr.w	r2, r2, #8
 800dc8a:	60da      	str	r2, [r3, #12]
    }
    break;
 800dc8c:	e009      	b.n	800dca2 <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	6812      	ldr	r2, [r2, #0]
 800dc96:	68d2      	ldr	r2, [r2, #12]
 800dc98:	f042 0210 	orr.w	r2, r2, #16
 800dc9c:	60da      	str	r2, [r3, #12]
    }
    break;
 800dc9e:	e000      	b.n	800dca2 <HAL_TIMEx_PWMN_Start_IT+0x94>
    
    default:
    break;
 800dca0:	bf00      	nop
  } 
  
  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	6812      	ldr	r2, [r2, #0]
 800dcaa:	68d2      	ldr	r2, [r2, #12]
 800dcac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dcb0:	60da      	str	r2, [r3, #12]
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2204      	movs	r2, #4
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fcdd 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	6812      	ldr	r2, [r2, #0]
 800dcc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800dcca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcce:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	6812      	ldr	r2, [r2, #0]
 800dcd8:	6812      	ldr	r2, [r2, #0]
 800dcda:	f042 0201 	orr.w	r2, r2, #1
 800dcde:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800dce0:	2300      	movs	r3, #0
} 
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 

  switch (Channel)
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b0c      	cmp	r3, #12
 800dcf8:	d840      	bhi.n	800dd7c <HAL_TIMEx_PWMN_Stop_IT+0x92>
 800dcfa:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <HAL_TIMEx_PWMN_Stop_IT+0x16>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd35 	.word	0x0800dd35
 800dd04:	0800dd7d 	.word	0x0800dd7d
 800dd08:	0800dd7d 	.word	0x0800dd7d
 800dd0c:	0800dd7d 	.word	0x0800dd7d
 800dd10:	0800dd47 	.word	0x0800dd47
 800dd14:	0800dd7d 	.word	0x0800dd7d
 800dd18:	0800dd7d 	.word	0x0800dd7d
 800dd1c:	0800dd7d 	.word	0x0800dd7d
 800dd20:	0800dd59 	.word	0x0800dd59
 800dd24:	0800dd7d 	.word	0x0800dd7d
 800dd28:	0800dd7d 	.word	0x0800dd7d
 800dd2c:	0800dd7d 	.word	0x0800dd7d
 800dd30:	0800dd6b 	.word	0x0800dd6b
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	6812      	ldr	r2, [r2, #0]
 800dd3c:	68d2      	ldr	r2, [r2, #12]
 800dd3e:	f022 0202 	bic.w	r2, r2, #2
 800dd42:	60da      	str	r2, [r3, #12]
    }
    break;
 800dd44:	e01b      	b.n	800dd7e <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	6812      	ldr	r2, [r2, #0]
 800dd4e:	68d2      	ldr	r2, [r2, #12]
 800dd50:	f022 0204 	bic.w	r2, r2, #4
 800dd54:	60da      	str	r2, [r3, #12]
    }
    break;
 800dd56:	e012      	b.n	800dd7e <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	6812      	ldr	r2, [r2, #0]
 800dd60:	68d2      	ldr	r2, [r2, #12]
 800dd62:	f022 0208 	bic.w	r2, r2, #8
 800dd66:	60da      	str	r2, [r3, #12]
    }
    break;
 800dd68:	e009      	b.n	800dd7e <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	6812      	ldr	r2, [r2, #0]
 800dd72:	68d2      	ldr	r2, [r2, #12]
 800dd74:	f022 0210 	bic.w	r2, r2, #16
 800dd78:	60da      	str	r2, [r3, #12]
    }
    break;
 800dd7a:	e000      	b.n	800dd7e <HAL_TIMEx_PWMN_Stop_IT+0x94>
    
    default:
    break; 
 800dd7c:	bf00      	nop
  }
  
  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2200      	movs	r2, #0
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f000 fc77 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Disable the TIM Break interrupt (only if no more channel is active) */
  if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6a1a      	ldr	r2, [r3, #32]
 800dd92:	f240 4344 	movw	r3, #1092	; 0x444
 800dd96:	4013      	ands	r3, r2
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d107      	bne.n	800ddac <HAL_TIMEx_PWMN_Stop_IT+0xc2>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	6812      	ldr	r2, [r2, #0]
 800dda4:	68d2      	ldr	r2, [r2, #12]
 800dda6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddaa:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6a1a      	ldr	r2, [r3, #32]
 800ddb2:	f241 1311 	movw	r3, #4369	; 0x1111
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10f      	bne.n	800dddc <HAL_TIMEx_PWMN_Stop_IT+0xf2>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6a1a      	ldr	r2, [r3, #32]
 800ddc2:	f240 4344 	movw	r3, #1092	; 0x444
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d107      	bne.n	800dddc <HAL_TIMEx_PWMN_Stop_IT+0xf2>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	6812      	ldr	r2, [r2, #0]
 800ddd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ddd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ddda:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6a1a      	ldr	r2, [r3, #32]
 800dde2:	f241 1311 	movw	r3, #4369	; 0x1111
 800dde6:	4013      	ands	r3, r2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10f      	bne.n	800de0c <HAL_TIMEx_PWMN_Stop_IT+0x122>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6a1a      	ldr	r2, [r3, #32]
 800ddf2:	f240 4344 	movw	r3, #1092	; 0x444
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d107      	bne.n	800de0c <HAL_TIMEx_PWMN_Stop_IT+0x122>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	6812      	ldr	r2, [r2, #0]
 800de04:	6812      	ldr	r2, [r2, #0]
 800de06:	f022 0201 	bic.w	r2, r2, #1
 800de0a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
} 
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	60f8      	str	r0, [r7, #12]
 800de1e:	60b9      	str	r1, [r7, #8]
 800de20:	607a      	str	r2, [r7, #4]
 800de22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d101      	bne.n	800de34 <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800de30:	2302      	movs	r3, #2
 800de32:	e0b8      	b.n	800dfa6 <HAL_TIMEx_PWMN_Start_DMA+0x190>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d10b      	bne.n	800de58 <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0)) 
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d104      	bne.n	800de50 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 800de46:	887b      	ldrh	r3, [r7, #2]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 800de4c:	2301      	movs	r3, #1
 800de4e:	e0aa      	b.n	800dfa6 <HAL_TIMEx_PWMN_Start_DMA+0x190>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2202      	movs	r2, #2
 800de54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }    
  switch (Channel)
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b0c      	cmp	r3, #12
 800de5c:	f200 808a 	bhi.w	800df74 <HAL_TIMEx_PWMN_Start_DMA+0x15e>
 800de60:	a201      	add	r2, pc, #4	; (adr r2, 800de68 <HAL_TIMEx_PWMN_Start_DMA+0x52>)
 800de62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de66:	bf00      	nop
 800de68:	0800de9d 	.word	0x0800de9d
 800de6c:	0800df75 	.word	0x0800df75
 800de70:	0800df75 	.word	0x0800df75
 800de74:	0800df75 	.word	0x0800df75
 800de78:	0800ded3 	.word	0x0800ded3
 800de7c:	0800df75 	.word	0x0800df75
 800de80:	0800df75 	.word	0x0800df75
 800de84:	0800df75 	.word	0x0800df75
 800de88:	0800df09 	.word	0x0800df09
 800de8c:	0800df75 	.word	0x0800df75
 800de90:	0800df75 	.word	0x0800df75
 800de94:	0800df75 	.word	0x0800df75
 800de98:	0800df3f 	.word	0x0800df3f
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6a1b      	ldr	r3, [r3, #32]
 800dea0:	4a43      	ldr	r2, [pc, #268]	; (800dfb0 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800dea2:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6a1b      	ldr	r3, [r3, #32]
 800dea8:	4a42      	ldr	r2, [pc, #264]	; (800dfb4 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800deaa:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6a18      	ldr	r0, [r3, #32]
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3334      	adds	r3, #52	; 0x34
 800deb8:	461a      	mov	r2, r3
 800deba:	887b      	ldrh	r3, [r7, #2]
 800debc:	f7f4 fe85 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	6812      	ldr	r2, [r2, #0]
 800dec8:	68d2      	ldr	r2, [r2, #12]
 800deca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dece:	60da      	str	r2, [r3, #12]
    }
    break;
 800ded0:	e051      	b.n	800df76 <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded6:	4a36      	ldr	r2, [pc, #216]	; (800dfb0 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800ded8:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dede:	4a35      	ldr	r2, [pc, #212]	; (800dfb4 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800dee0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3338      	adds	r3, #56	; 0x38
 800deee:	461a      	mov	r2, r3
 800def0:	887b      	ldrh	r3, [r7, #2]
 800def2:	f7f4 fe6a 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	6812      	ldr	r2, [r2, #0]
 800defe:	68d2      	ldr	r2, [r2, #12]
 800df00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df04:	60da      	str	r2, [r3, #12]
    }
    break;
 800df06:	e036      	b.n	800df76 <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df0c:	4a28      	ldr	r2, [pc, #160]	; (800dfb0 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800df0e:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df14:	4a27      	ldr	r2, [pc, #156]	; (800dfb4 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800df16:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800df1c:	6879      	ldr	r1, [r7, #4]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	333c      	adds	r3, #60	; 0x3c
 800df24:	461a      	mov	r2, r3
 800df26:	887b      	ldrh	r3, [r7, #2]
 800df28:	f7f4 fe4f 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	6812      	ldr	r2, [r2, #0]
 800df34:	68d2      	ldr	r2, [r2, #12]
 800df36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df3a:	60da      	str	r2, [r3, #12]
    }
    break;
 800df3c:	e01b      	b.n	800df76 <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df42:	4a1b      	ldr	r2, [pc, #108]	; (800dfb0 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800df44:	63da      	str	r2, [r3, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4a:	4a1a      	ldr	r2, [pc, #104]	; (800dfb4 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800df4c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	3340      	adds	r3, #64	; 0x40
 800df5a:	461a      	mov	r2, r3
 800df5c:	887b      	ldrh	r3, [r7, #2]
 800df5e:	f7f4 fe34 	bl	8002bca <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	6812      	ldr	r2, [r2, #0]
 800df6a:	68d2      	ldr	r2, [r2, #12]
 800df6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df70:	60da      	str	r2, [r3, #12]
    }
    break;
 800df72:	e000      	b.n	800df76 <HAL_TIMEx_PWMN_Start_DMA+0x160>
    
    default:
    break;
 800df74:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2204      	movs	r2, #4
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 fb7b 	bl	800e67a <TIM_CCxNChannelCmd>
    
  /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	6812      	ldr	r2, [r2, #0]
 800df8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800df8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df92:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	6812      	ldr	r2, [r2, #0]
 800df9c:	6812      	ldr	r2, [r2, #0]
 800df9e:	f042 0201 	orr.w	r2, r2, #1
 800dfa2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	0800ca2d 	.word	0x0800ca2d
 800dfb4:	0800ca9d 	.word	0x0800ca9d

0800dfb8 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2b0c      	cmp	r3, #12
 800dfc6:	d841      	bhi.n	800e04c <HAL_TIMEx_PWMN_Stop_DMA+0x94>
 800dfc8:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <HAL_TIMEx_PWMN_Stop_DMA+0x18>)
 800dfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfce:	bf00      	nop
 800dfd0:	0800e005 	.word	0x0800e005
 800dfd4:	0800e04d 	.word	0x0800e04d
 800dfd8:	0800e04d 	.word	0x0800e04d
 800dfdc:	0800e04d 	.word	0x0800e04d
 800dfe0:	0800e017 	.word	0x0800e017
 800dfe4:	0800e04d 	.word	0x0800e04d
 800dfe8:	0800e04d 	.word	0x0800e04d
 800dfec:	0800e04d 	.word	0x0800e04d
 800dff0:	0800e029 	.word	0x0800e029
 800dff4:	0800e04d 	.word	0x0800e04d
 800dff8:	0800e04d 	.word	0x0800e04d
 800dffc:	0800e04d 	.word	0x0800e04d
 800e000:	0800e03b 	.word	0x0800e03b
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	6812      	ldr	r2, [r2, #0]
 800e00c:	68d2      	ldr	r2, [r2, #12]
 800e00e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e012:	60da      	str	r2, [r3, #12]
    }
    break;
 800e014:	e01b      	b.n	800e04e <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	6812      	ldr	r2, [r2, #0]
 800e01e:	68d2      	ldr	r2, [r2, #12]
 800e020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e024:	60da      	str	r2, [r3, #12]
    }
    break;
 800e026:	e012      	b.n	800e04e <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	6812      	ldr	r2, [r2, #0]
 800e030:	68d2      	ldr	r2, [r2, #12]
 800e032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e036:	60da      	str	r2, [r3, #12]
    }
    break;
 800e038:	e009      	b.n	800e04e <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	6812      	ldr	r2, [r2, #0]
 800e042:	68d2      	ldr	r2, [r2, #12]
 800e044:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e048:	60da      	str	r2, [r3, #12]
    }
    break;
 800e04a:	e000      	b.n	800e04e <HAL_TIMEx_PWMN_Stop_DMA+0x96>
    
    default:
    break;
 800e04c:	bf00      	nop
  } 
  
  /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2200      	movs	r2, #0
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	4618      	mov	r0, r3
 800e058:	f000 fb0f 	bl	800e67a <TIM_CCxNChannelCmd>
     
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6a1a      	ldr	r2, [r3, #32]
 800e062:	f241 1311 	movw	r3, #4369	; 0x1111
 800e066:	4013      	ands	r3, r2
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10f      	bne.n	800e08c <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6a1a      	ldr	r2, [r3, #32]
 800e072:	f240 4344 	movw	r3, #1092	; 0x444
 800e076:	4013      	ands	r3, r2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d107      	bne.n	800e08c <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6812      	ldr	r2, [r2, #0]
 800e084:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e08a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6a1a      	ldr	r2, [r3, #32]
 800e092:	f241 1311 	movw	r3, #4369	; 0x1111
 800e096:	4013      	ands	r3, r2
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10f      	bne.n	800e0bc <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a1a      	ldr	r2, [r3, #32]
 800e0a2:	f240 4344 	movw	r3, #1092	; 0x444
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d107      	bne.n	800e0bc <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	6812      	ldr	r2, [r2, #0]
 800e0b4:	6812      	ldr	r2, [r2, #0]
 800e0b6:	f022 0201 	bic.w	r2, r2, #1
 800e0ba:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
  {
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b082      	sub	sp, #8
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2204      	movs	r2, #4
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 faca 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	6812      	ldr	r2, [r2, #0]
 800e0ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e0f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0f4:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Disable the complementary One Pulse output */
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2200      	movs	r2, #0
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	4618      	mov	r0, r3
 800e114:	f000 fab1 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6a1a      	ldr	r2, [r3, #32]
 800e11e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e122:	4013      	ands	r3, r2
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10f      	bne.n	800e148 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	6a1a      	ldr	r2, [r3, #32]
 800e12e:	f240 4344 	movw	r3, #1092	; 0x444
 800e132:	4013      	ands	r3, r2
 800e134:	2b00      	cmp	r3, #0
 800e136:	d107      	bne.n	800e148 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	6812      	ldr	r2, [r2, #0]
 800e140:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e146:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6a1a      	ldr	r2, [r3, #32]
 800e14e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e152:	4013      	ands	r3, r2
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10f      	bne.n	800e178 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	6a1a      	ldr	r2, [r3, #32]
 800e15e:	f240 4344 	movw	r3, #1092	; 0x444
 800e162:	4013      	ands	r3, r2
 800e164:	2b00      	cmp	r3, #0
 800e166:	d107      	bne.n	800e178 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	6812      	ldr	r2, [r2, #0]
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	f022 0201 	bic.w	r2, r2, #1
 800e176:	601a      	str	r2, [r3, #0]
   
  /* Return function status */
  return HAL_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b082      	sub	sp, #8
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	6812      	ldr	r2, [r2, #0]
 800e194:	68d2      	ldr	r2, [r2, #12]
 800e196:	f042 0202 	orr.w	r2, r2, #2
 800e19a:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	6812      	ldr	r2, [r2, #0]
 800e1a4:	68d2      	ldr	r2, [r2, #12]
 800e1a6:	f042 0204 	orr.w	r2, r2, #4
 800e1aa:	60da      	str	r2, [r3, #12]
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2204      	movs	r2, #4
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 fa60 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e1c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e1c8:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
  } 
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	6812      	ldr	r2, [r2, #0]
 800e1e6:	68d2      	ldr	r2, [r2, #12]
 800e1e8:	f022 0202 	bic.w	r2, r2, #2
 800e1ec:	60da      	str	r2, [r3, #12]
  
  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	6812      	ldr	r2, [r2, #0]
 800e1f6:	68d2      	ldr	r2, [r2, #12]
 800e1f8:	f022 0204 	bic.w	r2, r2, #4
 800e1fc:	60da      	str	r2, [r3, #12]
  
  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2200      	movs	r2, #0
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fa37 	bl	800e67a <TIM_CCxNChannelCmd>
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6a1a      	ldr	r2, [r3, #32]
 800e212:	f241 1311 	movw	r3, #4369	; 0x1111
 800e216:	4013      	ands	r3, r2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10f      	bne.n	800e23c <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6a1a      	ldr	r2, [r3, #32]
 800e222:	f240 4344 	movw	r3, #1092	; 0x444
 800e226:	4013      	ands	r3, r2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d107      	bne.n	800e23c <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	6812      	ldr	r2, [r2, #0]
 800e234:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e23a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);  
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	6a1a      	ldr	r2, [r3, #32]
 800e242:	f241 1311 	movw	r3, #4369	; 0x1111
 800e246:	4013      	ands	r3, r2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10f      	bne.n	800e26c <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6a1a      	ldr	r2, [r3, #32]
 800e252:	f240 4344 	movw	r3, #1092	; 0x444
 800e256:	4013      	ands	r3, r2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d107      	bne.n	800e26c <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	6812      	ldr	r2, [r2, #0]
 800e264:	6812      	ldr	r2, [r2, #0]
 800e266:	f022 0201 	bic.w	r2, r2, #1
 800e26a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <HAL_TIMEx_ConfigCommutationEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800e276:	b480      	push	{r7}
 800e278:	b085      	sub	sp, #20
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	60f8      	str	r0, [r7, #12]
 800e27e:	60b9      	str	r1, [r7, #8]
 800e280:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d101      	bne.n	800e290 <HAL_TIMEx_ConfigCommutationEvent+0x1a>
 800e28c:	2302      	movs	r3, #2
 800e28e:	e03c      	b.n	800e30a <HAL_TIMEx_ConfigCommutationEvent+0x94>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d008      	beq.n	800e2b0 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b10      	cmp	r3, #16
 800e2a2:	d005      	beq.n	800e2b0 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2b20      	cmp	r3, #32
 800e2a8:	d002      	beq.n	800e2b0 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b30      	cmp	r3, #48	; 0x30
 800e2ae:	d10f      	bne.n	800e2d0 <HAL_TIMEx_ConfigCommutationEvent+0x5a>
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	6812      	ldr	r2, [r2, #0]
 800e2b8:	6892      	ldr	r2, [r2, #8]
 800e2ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e2be:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	6812      	ldr	r2, [r2, #0]
 800e2c8:	6891      	ldr	r1, [r2, #8]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	430a      	orrs	r2, r1
 800e2ce:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	6812      	ldr	r2, [r2, #0]
 800e2d8:	6852      	ldr	r2, [r2, #4]
 800e2da:	f042 0201 	orr.w	r2, r2, #1
 800e2de:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	6852      	ldr	r2, [r2, #4]
 800e2ea:	f022 0204 	bic.w	r2, r2, #4
 800e2ee:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	6812      	ldr	r2, [r2, #0]
 800e2f8:	6851      	ldr	r1, [r2, #4]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	605a      	str	r2, [r3, #4]
    
  __HAL_UNLOCK(htim);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <HAL_TIMEx_ConfigCommutationEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800e316:	b480      	push	{r7}
 800e318:	b085      	sub	sp, #20
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60f8      	str	r0, [r7, #12]
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d101      	bne.n	800e330 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1a>
 800e32c:	2302      	movs	r3, #2
 800e32e:	e044      	b.n	800e3ba <HAL_TIMEx_ConfigCommutationEvent_IT+0xa4>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d008      	beq.n	800e350 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	2b10      	cmp	r3, #16
 800e342:	d005      	beq.n	800e350 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2b20      	cmp	r3, #32
 800e348:	d002      	beq.n	800e350 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	2b30      	cmp	r3, #48	; 0x30
 800e34e:	d10f      	bne.n	800e370 <HAL_TIMEx_ConfigCommutationEvent_IT+0x5a>
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	6812      	ldr	r2, [r2, #0]
 800e358:	6892      	ldr	r2, [r2, #8]
 800e35a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e35e:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	6812      	ldr	r2, [r2, #0]
 800e368:	6891      	ldr	r1, [r2, #8]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	430a      	orrs	r2, r1
 800e36e:	609a      	str	r2, [r3, #8]
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	68fa      	ldr	r2, [r7, #12]
 800e376:	6812      	ldr	r2, [r2, #0]
 800e378:	6852      	ldr	r2, [r2, #4]
 800e37a:	f042 0201 	orr.w	r2, r2, #1
 800e37e:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	6812      	ldr	r2, [r2, #0]
 800e388:	6852      	ldr	r2, [r2, #4]
 800e38a:	f022 0204 	bic.w	r2, r2, #4
 800e38e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	6812      	ldr	r2, [r2, #0]
 800e398:	6851      	ldr	r1, [r2, #4]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	430a      	orrs	r2, r1
 800e39e:	605a      	str	r2, [r3, #4]
    
  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	6812      	ldr	r2, [r2, #0]
 800e3a8:	68d2      	ldr	r2, [r2, #12]
 800e3aa:	f042 0220 	orr.w	r2, r2, #32
 800e3ae:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr

0800e3c6 <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800e3c6:	b480      	push	{r7}
 800e3c8:	b085      	sub	sp, #20
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	60b9      	str	r1, [r7, #8]
 800e3d0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d101      	bne.n	800e3e0 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1a>
 800e3dc:	2302      	movs	r3, #2
 800e3de:	e04c      	b.n	800e47a <HAL_TIMEx_ConfigCommutationEvent_DMA+0xb4>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d008      	beq.n	800e400 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b10      	cmp	r3, #16
 800e3f2:	d005      	beq.n	800e400 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b20      	cmp	r3, #32
 800e3f8:	d002      	beq.n	800e400 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2b30      	cmp	r3, #48	; 0x30
 800e3fe:	d10f      	bne.n	800e420 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	6812      	ldr	r2, [r2, #0]
 800e408:	6892      	ldr	r2, [r2, #8]
 800e40a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e40e:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	6812      	ldr	r2, [r2, #0]
 800e418:	6891      	ldr	r1, [r2, #8]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	430a      	orrs	r2, r1
 800e41e:	609a      	str	r2, [r3, #8]
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	6852      	ldr	r2, [r2, #4]
 800e42a:	f042 0201 	orr.w	r2, r2, #1
 800e42e:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	6812      	ldr	r2, [r2, #0]
 800e438:	6852      	ldr	r2, [r2, #4]
 800e43a:	f022 0204 	bic.w	r2, r2, #4
 800e43e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	6812      	ldr	r2, [r2, #0]
 800e448:	6851      	ldr	r1, [r2, #4]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	430a      	orrs	r2, r1
 800e44e:	605a      	str	r2, [r3, #4]
  
  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e454:	4a0c      	ldr	r2, [pc, #48]	; (800e488 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc2>)
 800e456:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45c:	4a0b      	ldr	r2, [pc, #44]	; (800e48c <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc6>)
 800e45e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68fa      	ldr	r2, [r7, #12]
 800e466:	6812      	ldr	r2, [r2, #0]
 800e468:	68d2      	ldr	r2, [r2, #12]
 800e46a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e46e:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	0800e657 	.word	0x0800e657
 800e48c:	0800ca9d 	.word	0x0800ca9d

0800e490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d101      	bne.n	800e4a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	e032      	b.n	800e50e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	6812      	ldr	r2, [r2, #0]
 800e4c0:	6852      	ldr	r2, [r2, #4]
 800e4c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e4c6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	6812      	ldr	r2, [r2, #0]
 800e4d0:	6851      	ldr	r1, [r2, #4]
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	6812      	ldr	r2, [r2, #0]
 800e4d6:	430a      	orrs	r2, r1
 800e4d8:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	6812      	ldr	r2, [r2, #0]
 800e4e2:	6892      	ldr	r2, [r2, #8]
 800e4e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4e8:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	6812      	ldr	r2, [r2, #0]
 800e4f2:	6891      	ldr	r1, [r2, #8]
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	6852      	ldr	r2, [r2, #4]
 800e4f8:	430a      	orrs	r2, r1
 800e4fa:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e50c:	2300      	movs	r3, #0
} 
 800e50e:	4618      	mov	r0, r3
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800e51a:	b480      	push	{r7}
 800e51c:	b085      	sub	sp, #20
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d101      	bne.n	800e536 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e532:	2302      	movs	r3, #2
 800e534:	e044      	b.n	800e5c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	4313      	orrs	r3, r2
 800e54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	4313      	orrs	r3, r2
 800e558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	4313      	orrs	r3, r2
 800e566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4313      	orrs	r3, r2
 800e574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	4313      	orrs	r3, r2
 800e582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	695b      	ldr	r3, [r3, #20]
 800e58e:	4313      	orrs	r3, r2
 800e590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	699b      	ldr	r3, [r3, #24]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	699b      	ldr	r3, [r3, #24]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3714      	adds	r7, #20
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <HAL_TIMEx_RemapConfig>:
  *            @arg TIM_TIM1_TIM3_TRGO: TIM1 ITR2 input is connected to TIM3 Trigger output(default)
  *            @arg TIM_TIM1_LPTIM:     TIM1 ITR2 input is connected to LPTIM.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d101      	bne.n	800e5e4 <HAL_TIMEx_RemapConfig+0x18>
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	e010      	b.n	800e606 <HAL_TIMEx_RemapConfig+0x3a>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Set the Timer remapping configuration */
    htim->Instance->OR = Remap;
  }
#else
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	683a      	ldr	r2, [r7, #0]
 800e5f2:	651a      	str	r2, [r3, #80]	; 0x50
#endif
  htim->State = HAL_TIM_STATE_READY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);  
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800e61a:	bf00      	nop
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e626:	b480      	push	{r7}
 800e628:	b083      	sub	sp, #12
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e62e:	bf00      	nop
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr

0800e63a <HAL_TIMEx_HallSensor_GetState>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 800e63a:	b480      	push	{r7}
 800e63c:	b083      	sub	sp, #12
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  return htim->State;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e648:	b2db      	uxtb	r3, r3
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	370c      	adds	r7, #12
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr

0800e656 <TIMEx_DMACommutationCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b084      	sub	sp, #16
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e662:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_TIMEx_CommutationCallback(htim); 
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff ffd0 	bl	800e612 <HAL_TIMEx_CommutationCallback>
}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b087      	sub	sp, #28
 800e67e:	af00      	add	r7, sp, #0
 800e680:	60f8      	str	r0, [r7, #12]
 800e682:	60b9      	str	r1, [r7, #8]
 800e684:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800e68a:	2204      	movs	r2, #4
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	fa02 f303 	lsl.w	r3, r2, r3
 800e692:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6a1a      	ldr	r2, [r3, #32]
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	43db      	mvns	r3, r3
 800e69c:	401a      	ands	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6a1a      	ldr	r2, [r3, #32]
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e6ae:	431a      	orrs	r2, r3
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	621a      	str	r2, [r3, #32]
}
 800e6b4:	bf00      	nop
 800e6b6:	371c      	adds	r7, #28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e03f      	b.n	800e752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d106      	bne.n	800e6ec <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f003 fcec 	bl	80120c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2224      	movs	r2, #36	; 0x24
 800e6f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	68d2      	ldr	r2, [r2, #12]
 800e6fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e702:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f001 fc90 	bl	801002a <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	6812      	ldr	r2, [r2, #0]
 800e712:	6912      	ldr	r2, [r2, #16]
 800e714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	6812      	ldr	r2, [r2, #0]
 800e722:	6952      	ldr	r2, [r2, #20]
 800e724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e728:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	6812      	ldr	r2, [r2, #0]
 800e732:	68d2      	ldr	r2, [r2, #12]
 800e734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e738:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2220      	movs	r2, #32
 800e744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2220      	movs	r2, #32
 800e74c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <HAL_HalfDuplex_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	e047      	b.n	800e7fc <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */ 
  assert_param(IS_UART_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b00      	cmp	r3, #0
 800e776:	d106      	bne.n	800e786 <HAL_HalfDuplex_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f003 fc9f 	bl	80120c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2224      	movs	r2, #36	; 0x24
 800e78a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	6812      	ldr	r2, [r2, #0]
 800e796:	68d2      	ldr	r2, [r2, #12]
 800e798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e79c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f001 fc43 	bl	801002a <UART_SetConfig>
  
  /* In half-duplex mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	6812      	ldr	r2, [r2, #0]
 800e7ac:	6912      	ldr	r2, [r2, #16]
 800e7ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	6812      	ldr	r2, [r2, #0]
 800e7bc:	6952      	ldr	r2, [r2, #20]
 800e7be:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800e7c2:	615a      	str	r2, [r3, #20]
  
  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	6812      	ldr	r2, [r2, #0]
 800e7cc:	6952      	ldr	r2, [r2, #20]
 800e7ce:	f042 0208 	orr.w	r2, r2, #8
 800e7d2:	615a      	str	r2, [r3, #20]
 
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	6812      	ldr	r2, [r2, #0]
 800e7dc:	68d2      	ldr	r2, [r2, #12]
 800e7de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7e2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2220      	movs	r2, #32
 800e7f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d101      	bne.n	800e818 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	e057      	b.n	800e8c8 <HAL_LIN_Init+0xc4>
  assert_param(IS_UART_INSTANCE(huart->Instance));
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d106      	bne.n	800e832 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f003 fc49 	bl	80120c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2224      	movs	r2, #36	; 0x24
 800e836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	68d2      	ldr	r2, [r2, #12]
 800e844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e848:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f001 fbed 	bl	801002a <UART_SetConfig>
  
  /* In LIN mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	6812      	ldr	r2, [r2, #0]
 800e858:	6912      	ldr	r2, [r2, #16]
 800e85a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e85e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	6812      	ldr	r2, [r2, #0]
 800e868:	6952      	ldr	r2, [r2, #20]
 800e86a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e86e:	615a      	str	r2, [r3, #20]
  
  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6812      	ldr	r2, [r2, #0]
 800e878:	6912      	ldr	r2, [r2, #16]
 800e87a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e87e:	611a      	str	r2, [r3, #16]
  
  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	6812      	ldr	r2, [r2, #0]
 800e888:	6912      	ldr	r2, [r2, #16]
 800e88a:	f022 0220 	bic.w	r2, r2, #32
 800e88e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	6812      	ldr	r2, [r2, #0]
 800e898:	6911      	ldr	r1, [r2, #16]
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	430a      	orrs	r2, r1
 800e89e:	611a      	str	r2, [r3, #16]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	6812      	ldr	r2, [r2, #0]
 800e8a8:	68d2      	ldr	r2, [r2, #12]
 800e8aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8ae:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2220      	movs	r2, #32
 800e8ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2220      	movs	r2, #32
 800e8c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	607a      	str	r2, [r7, #4]
 800e8dc:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e05f      	b.n	800e9a8 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d106      	bne.n	800e902 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f003 fbe1 	bl	80120c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2224      	movs	r2, #36	; 0x24
 800e906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	6812      	ldr	r2, [r2, #0]
 800e912:	68d2      	ldr	r2, [r2, #12]
 800e914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e918:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f001 fb85 	bl	801002a <UART_SetConfig>
  
  /* In Multi-Processor mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	6812      	ldr	r2, [r2, #0]
 800e928:	6912      	ldr	r2, [r2, #16]
 800e92a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e92e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	6812      	ldr	r2, [r2, #0]
 800e938:	6952      	ldr	r2, [r2, #20]
 800e93a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e93e:	615a      	str	r2, [r3, #20]
  
  /* Clear the USART address */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	6812      	ldr	r2, [r2, #0]
 800e948:	6912      	ldr	r2, [r2, #16]
 800e94a:	f022 020f 	bic.w	r2, r2, #15
 800e94e:	611a      	str	r2, [r3, #16]
  /* Set the USART address node */
  SET_BIT(huart->Instance->CR2, Address);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	6812      	ldr	r2, [r2, #0]
 800e958:	6911      	ldr	r1, [r2, #16]
 800e95a:	7afa      	ldrb	r2, [r7, #11]
 800e95c:	430a      	orrs	r2, r1
 800e95e:	611a      	str	r2, [r3, #16]
  
  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	6812      	ldr	r2, [r2, #0]
 800e968:	68d2      	ldr	r2, [r2, #12]
 800e96a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e96e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	6812      	ldr	r2, [r2, #0]
 800e978:	68d1      	ldr	r1, [r2, #12]
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	430a      	orrs	r2, r1
 800e97e:	60da      	str	r2, [r3, #12]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	6812      	ldr	r2, [r2, #0]
 800e988:	68d2      	ldr	r2, [r2, #12]
 800e98a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e98e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2220      	movs	r2, #32
 800e99a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2220      	movs	r2, #32
 800e9a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d101      	bne.n	800e9c2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e016      	b.n	800e9f0 <HAL_UART_DeInit+0x40>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2224      	movs	r2, #36	; 0x24
 800e9c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f003 fbb4 	bl	8012138 <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */ 
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800ea30:	2300      	movs	r3, #0
 800ea32:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b20      	cmp	r3, #32
 800ea3e:	f040 8082 	bne.w	800eb46 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <HAL_UART_Transmit+0x2e>
 800ea48:	88fb      	ldrh	r3, [r7, #6]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e07a      	b.n	800eb48 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d101      	bne.n	800ea60 <HAL_UART_Transmit+0x40>
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	e073      	b.n	800eb48 <HAL_UART_Transmit+0x128>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2201      	movs	r2, #1
 800ea64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2221      	movs	r2, #33	; 0x21
 800ea72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ea76:	f7f1 fc35 	bl	80002e4 <HAL_GetTick>
 800ea7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	88fa      	ldrh	r2, [r7, #6]
 800ea80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	88fa      	ldrh	r2, [r7, #6]
 800ea86:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800ea88:	e041      	b.n	800eb0e <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	3b01      	subs	r3, #1
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaa0:	d121      	bne.n	800eae6 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	2180      	movs	r1, #128	; 0x80
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f001 f8c0 	bl	800fc32 <UART_WaitOnFlagUntilTimeout>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	e045      	b.n	800eb48 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	8812      	ldrh	r2, [r2, #0]
 800eac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eacc:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d103      	bne.n	800eade <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	3302      	adds	r3, #2
 800eada:	60bb      	str	r3, [r7, #8]
 800eadc:	e017      	b.n	800eb0e <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	3301      	adds	r3, #1
 800eae2:	60bb      	str	r3, [r7, #8]
 800eae4:	e013      	b.n	800eb0e <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	2200      	movs	r2, #0
 800eaee:	2180      	movs	r1, #128	; 0x80
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f001 f89e 	bl	800fc32 <UART_WaitOnFlagUntilTimeout>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e023      	b.n	800eb48 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	1c59      	adds	r1, r3, #1
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1b8      	bne.n	800ea8a <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	2140      	movs	r1, #64	; 0x40
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f001 f885 	bl	800fc32 <UART_WaitOnFlagUntilTimeout>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e00a      	b.n	800eb48 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2220      	movs	r2, #32
 800eb36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e000      	b.n	800eb48 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800eb46:	2302      	movs	r3, #2
  }
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af02      	add	r7, sp, #8
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	603b      	str	r3, [r7, #0]
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800eb60:	2300      	movs	r3, #0
 800eb62:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	2b20      	cmp	r3, #32
 800eb6e:	f040 8090 	bne.w	800ec92 <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d002      	beq.n	800eb7e <HAL_UART_Receive+0x2e>
 800eb78:	88fb      	ldrh	r3, [r7, #6]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d101      	bne.n	800eb82 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e088      	b.n	800ec94 <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d101      	bne.n	800eb90 <HAL_UART_Receive+0x40>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	e081      	b.n	800ec94 <HAL_UART_Receive+0x144>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2222      	movs	r2, #34	; 0x22
 800eba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800eba6:	f7f1 fb9d 	bl	80002e4 <HAL_GetTick>
 800ebaa:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	88fa      	ldrh	r2, [r7, #6]
 800ebb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	88fa      	ldrh	r2, [r7, #6]
 800ebb6:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800ebb8:	e05c      	b.n	800ec74 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	b29a      	uxth	r2, r3
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebd0:	d12b      	bne.n	800ec2a <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	2120      	movs	r1, #32
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f001 f828 	bl	800fc32 <UART_WaitOnFlagUntilTimeout>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e053      	b.n	800ec94 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	691b      	ldr	r3, [r3, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10c      	bne.n	800ec12 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	3302      	adds	r3, #2
 800ec0e:	60bb      	str	r3, [r7, #8]
 800ec10:	e030      	b.n	800ec74 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	3301      	adds	r3, #1
 800ec26:	60bb      	str	r3, [r7, #8]
 800ec28:	e024      	b.n	800ec74 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	2200      	movs	r2, #0
 800ec32:	2120      	movs	r1, #32
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 fffc 	bl	800fc32 <UART_WaitOnFlagUntilTimeout>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d001      	beq.n	800ec44 <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 800ec40:	2303      	movs	r3, #3
 800ec42:	e027      	b.n	800ec94 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d108      	bne.n	800ec5e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	60ba      	str	r2, [r7, #8]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	6812      	ldr	r2, [r2, #0]
 800ec56:	6852      	ldr	r2, [r2, #4]
 800ec58:	b2d2      	uxtb	r2, r2
 800ec5a:	701a      	strb	r2, [r3, #0]
 800ec5c:	e00a      	b.n	800ec74 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	1c5a      	adds	r2, r3, #1
 800ec62:	60ba      	str	r2, [r7, #8]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	6812      	ldr	r2, [r2, #0]
 800ec68:	6852      	ldr	r2, [r2, #4]
 800ec6a:	b2d2      	uxtb	r2, r2
 800ec6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec70:	b2d2      	uxtb	r2, r2
 800ec72:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d19d      	bne.n	800ebba <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2220      	movs	r2, #32
 800ec82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e000      	b.n	800ec94 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 800ec92:	2302      	movs	r3, #2
  }
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b20      	cmp	r3, #32
 800ecb4:	d130      	bne.n	800ed18 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <HAL_UART_Transmit_IT+0x26>
 800ecbc:	88fb      	ldrh	r3, [r7, #6]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e029      	b.n	800ed1a <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d101      	bne.n	800ecd4 <HAL_UART_Transmit_IT+0x38>
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	e022      	b.n	800ed1a <HAL_UART_Transmit_IT+0x7e>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	88fa      	ldrh	r2, [r7, #6]
 800ece6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	88fa      	ldrh	r2, [r7, #6]
 800ecec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2221      	movs	r2, #33	; 0x21
 800ecf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	6812      	ldr	r2, [r2, #0]
 800ed0c:	68d2      	ldr	r2, [r2, #12]
 800ed0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed12:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800ed14:	2300      	movs	r3, #0
 800ed16:	e000      	b.n	800ed1a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 800ed18:	2302      	movs	r3, #2
  }
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed26:	b480      	push	{r7}
 800ed28:	b085      	sub	sp, #20
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	60f8      	str	r0, [r7, #12]
 800ed2e:	60b9      	str	r1, [r7, #8]
 800ed30:	4613      	mov	r3, r2
 800ed32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b20      	cmp	r3, #32
 800ed3e:	d138      	bne.n	800edb2 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d002      	beq.n	800ed4c <HAL_UART_Receive_IT+0x26>
 800ed46:	88fb      	ldrh	r3, [r7, #6]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d101      	bne.n	800ed50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e031      	b.n	800edb4 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d101      	bne.n	800ed5e <HAL_UART_Receive_IT+0x38>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	e02a      	b.n	800edb4 <HAL_UART_Receive_IT+0x8e>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	88fa      	ldrh	r2, [r7, #6]
 800ed70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	88fa      	ldrh	r2, [r7, #6]
 800ed76:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2222      	movs	r2, #34	; 0x22
 800ed82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	6812      	ldr	r2, [r2, #0]
 800ed96:	6952      	ldr	r2, [r2, #20]
 800ed98:	f042 0201 	orr.w	r2, r2, #1
 800ed9c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	6812      	ldr	r2, [r2, #0]
 800eda6:	68d2      	ldr	r2, [r2, #12]
 800eda8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800edac:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800edae:	2300      	movs	r3, #0
 800edb0:	e000      	b.n	800edb4 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 800edb2:	2302      	movs	r3, #2
  }
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	4613      	mov	r3, r2
 800edcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b20      	cmp	r3, #32
 800edd8:	d153      	bne.n	800ee82 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <HAL_UART_Transmit_DMA+0x26>
 800ede0:	88fb      	ldrh	r3, [r7, #6]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d101      	bne.n	800edea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ede6:	2301      	movs	r3, #1
 800ede8:	e04c      	b.n	800ee84 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d101      	bne.n	800edf8 <HAL_UART_Transmit_DMA+0x38>
 800edf4:	2302      	movs	r3, #2
 800edf6:	e045      	b.n	800ee84 <HAL_UART_Transmit_DMA+0xc4>
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2201      	movs	r2, #1
 800edfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	88fa      	ldrh	r2, [r7, #6]
 800ee0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	88fa      	ldrh	r2, [r7, #6]
 800ee10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2200      	movs	r2, #0
 800ee16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2221      	movs	r2, #33	; 0x21
 800ee1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee24:	4a19      	ldr	r2, [pc, #100]	; (800ee8c <HAL_UART_Transmit_DMA+0xcc>)
 800ee26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2c:	4a18      	ldr	r2, [pc, #96]	; (800ee90 <HAL_UART_Transmit_DMA+0xd0>)
 800ee2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee34:	4a17      	ldr	r2, [pc, #92]	; (800ee94 <HAL_UART_Transmit_DMA+0xd4>)
 800ee36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 800ee40:	f107 0308 	add.w	r3, r7, #8
 800ee44:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	6819      	ldr	r1, [r3, #0]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3304      	adds	r3, #4
 800ee54:	461a      	mov	r2, r3
 800ee56:	88fb      	ldrh	r3, [r7, #6]
 800ee58:	f7f3 feb7 	bl	8002bca <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee64:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	6812      	ldr	r2, [r2, #0]
 800ee76:	6952      	ldr	r2, [r2, #20]
 800ee78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ee7c:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e000      	b.n	800ee84 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ee82:	2302      	movs	r3, #2
  }
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3718      	adds	r7, #24
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	0800faad 	.word	0x0800faad
 800ee90:	0800faff 	.word	0x0800faff
 800ee94:	0800fb9f 	.word	0x0800fb9f

0800ee98 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	4613      	mov	r3, r2
 800eea4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b20      	cmp	r3, #32
 800eeb0:	d166      	bne.n	800ef80 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <HAL_UART_Receive_DMA+0x26>
 800eeb8:	88fb      	ldrh	r3, [r7, #6]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d101      	bne.n	800eec2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800eebe:	2301      	movs	r3, #1
 800eec0:	e05f      	b.n	800ef82 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d101      	bne.n	800eed0 <HAL_UART_Receive_DMA+0x38>
 800eecc:	2302      	movs	r3, #2
 800eece:	e058      	b.n	800ef82 <HAL_UART_Receive_DMA+0xea>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	88fa      	ldrh	r2, [r7, #6]
 800eee2:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2222      	movs	r2, #34	; 0x22
 800eeee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef6:	4a25      	ldr	r2, [pc, #148]	; (800ef8c <HAL_UART_Receive_DMA+0xf4>)
 800eef8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eefe:	4a24      	ldr	r2, [pc, #144]	; (800ef90 <HAL_UART_Receive_DMA+0xf8>)
 800ef00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef06:	4a23      	ldr	r2, [pc, #140]	; (800ef94 <HAL_UART_Receive_DMA+0xfc>)
 800ef08:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef0e:	2200      	movs	r2, #0
 800ef10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 800ef12:	f107 0308 	add.w	r3, r7, #8
 800ef16:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	3304      	adds	r3, #4
 800ef22:	4619      	mov	r1, r3
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	88fb      	ldrh	r3, [r7, #6]
 800ef2a:	f7f3 fe4e 	bl	8002bca <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ef2e:	2300      	movs	r3, #0
 800ef30:	613b      	str	r3, [r7, #16]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	613b      	str	r3, [r7, #16]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	613b      	str	r3, [r7, #16]
 800ef42:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	6812      	ldr	r2, [r2, #0]
 800ef54:	68d2      	ldr	r2, [r2, #12]
 800ef56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	6812      	ldr	r2, [r2, #0]
 800ef64:	6952      	ldr	r2, [r2, #20]
 800ef66:	f042 0201 	orr.w	r2, r2, #1
 800ef6a:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	6812      	ldr	r2, [r2, #0]
 800ef74:	6952      	ldr	r2, [r2, #20]
 800ef76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef7a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	e000      	b.n	800ef82 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 800ef80:	2302      	movs	r3, #2
  }
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3718      	adds	r7, #24
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	0800fb1b 	.word	0x0800fb1b
 800ef90:	0800fb83 	.word	0x0800fb83
 800ef94:	0800fb9f 	.word	0x0800fb9f

0800ef98 <HAL_UART_DMAPause>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
   uint32_t dmarequest = 0x00U;
 800efa0:	2300      	movs	r3, #0
 800efa2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d101      	bne.n	800efb2 <HAL_UART_DMAPause+0x1a>
 800efae:	2302      	movs	r3, #2
 800efb0:	e050      	b.n	800f054 <HAL_UART_DMAPause+0xbc>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	695b      	ldr	r3, [r3, #20]
 800efc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bf14      	ite	ne
 800efc8:	2301      	movne	r3, #1
 800efca:	2300      	moveq	r3, #0
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b21      	cmp	r3, #33	; 0x21
 800efda:	d10a      	bne.n	800eff2 <HAL_UART_DMAPause+0x5a>
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d007      	beq.n	800eff2 <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	6812      	ldr	r2, [r2, #0]
 800efea:	6952      	ldr	r2, [r2, #20]
 800efec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eff0:	615a      	str	r2, [r3, #20]
  }
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	695b      	ldr	r3, [r3, #20]
 800eff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800effc:	2b00      	cmp	r3, #0
 800effe:	bf14      	ite	ne
 800f000:	2301      	movne	r3, #1
 800f002:	2300      	moveq	r3, #0
 800f004:	b2db      	uxtb	r3, r3
 800f006:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	2b22      	cmp	r3, #34	; 0x22
 800f012:	d11a      	bne.n	800f04a <HAL_UART_DMAPause+0xb2>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d017      	beq.n	800f04a <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	6812      	ldr	r2, [r2, #0]
 800f022:	68d2      	ldr	r2, [r2, #12]
 800f024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f028:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	6812      	ldr	r2, [r2, #0]
 800f032:	6952      	ldr	r2, [r2, #20]
 800f034:	f022 0201 	bic.w	r2, r2, #1
 800f038:	615a      	str	r2, [r3, #20]
    
    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	6812      	ldr	r2, [r2, #0]
 800f042:	6952      	ldr	r2, [r2, #20]
 800f044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f048:	615a      	str	r2, [r3, #20]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <HAL_UART_DMAResume>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d101      	bne.n	800f076 <HAL_UART_DMAResume+0x16>
 800f072:	2302      	movs	r3, #2
 800f074:	e03f      	b.n	800f0f6 <HAL_UART_DMAResume+0x96>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f084:	b2db      	uxtb	r3, r3
 800f086:	2b21      	cmp	r3, #33	; 0x21
 800f088:	d107      	bne.n	800f09a <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	6812      	ldr	r2, [r2, #0]
 800f092:	6952      	ldr	r2, [r2, #20]
 800f094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f098:	615a      	str	r2, [r3, #20]
  }
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	2b22      	cmp	r3, #34	; 0x22
 800f0a4:	d122      	bne.n	800f0ec <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	60fb      	str	r3, [r7, #12]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	60fb      	str	r3, [r7, #12]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
    
    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	6812      	ldr	r2, [r2, #0]
 800f0c4:	68d2      	ldr	r2, [r2, #12]
 800f0c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f0ca:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	6812      	ldr	r2, [r2, #0]
 800f0d4:	6952      	ldr	r2, [r2, #20]
 800f0d6:	f042 0201 	orr.w	r2, r2, #1
 800f0da:	615a      	str	r2, [r3, #20]
    
    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	6812      	ldr	r2, [r2, #0]
 800f0e4:	6952      	ldr	r2, [r2, #20]
 800f0e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0ea:	615a      	str	r2, [r3, #20]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr

0800f102 <HAL_UART_DMAStop>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b084      	sub	sp, #16
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f10a:	2300      	movs	r3, #0
 800f10c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f118:	2b00      	cmp	r3, #0
 800f11a:	bf14      	ite	ne
 800f11c:	2301      	movne	r3, #1
 800f11e:	2300      	moveq	r3, #0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b21      	cmp	r3, #33	; 0x21
 800f12e:	d116      	bne.n	800f15e <HAL_UART_DMAStop+0x5c>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d013      	beq.n	800f15e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	6812      	ldr	r2, [r2, #0]
 800f13e:	6952      	ldr	r2, [r2, #20]
 800f140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f144:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d004      	beq.n	800f158 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f152:	4618      	mov	r0, r3
 800f154:	f7f3 fd99 	bl	8002c8a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fdb4 	bl	800fcc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	695b      	ldr	r3, [r3, #20]
 800f164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f168:	2b00      	cmp	r3, #0
 800f16a:	bf14      	ite	ne
 800f16c:	2301      	movne	r3, #1
 800f16e:	2300      	moveq	r3, #0
 800f170:	b2db      	uxtb	r3, r3
 800f172:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	2b22      	cmp	r3, #34	; 0x22
 800f17e:	d116      	bne.n	800f1ae <HAL_UART_DMAStop+0xac>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d013      	beq.n	800f1ae <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	6812      	ldr	r2, [r2, #0]
 800f18e:	6952      	ldr	r2, [r2, #20]
 800f190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f194:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d004      	beq.n	800f1a8 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7f3 fd71 	bl	8002c8a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 fda2 	bl	800fcf2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	6812      	ldr	r2, [r2, #0]
 800f1c8:	68d2      	ldr	r2, [r2, #12]
 800f1ca:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800f1ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	6812      	ldr	r2, [r2, #0]
 800f1d8:	6952      	ldr	r2, [r2, #20]
 800f1da:	f022 0201 	bic.w	r2, r2, #1
 800f1de:	615a      	str	r2, [r3, #20]
  
  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	695b      	ldr	r3, [r3, #20]
 800f1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d014      	beq.n	800f218 <HAL_UART_Abort+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	6812      	ldr	r2, [r2, #0]
 800f1f6:	6952      	ldr	r2, [r2, #20]
 800f1f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f1fc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f202:	2b00      	cmp	r3, #0
 800f204:	d008      	beq.n	800f218 <HAL_UART_Abort+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20a:	2200      	movs	r2, #0
 800f20c:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmatx);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f212:	4618      	mov	r0, r3
 800f214:	f7f3 fd39 	bl	8002c8a <HAL_DMA_Abort>
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f222:	2b00      	cmp	r3, #0
 800f224:	d014      	beq.n	800f250 <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	6812      	ldr	r2, [r2, #0]
 800f22e:	6952      	ldr	r2, [r2, #20]
 800f230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f234:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d008      	beq.n	800f250 <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f242:	2200      	movs	r2, #0
 800f244:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmarx);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7f3 fd1d 	bl	8002c8a <HAL_DMA_Abort>
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2220      	movs	r2, #32
 800f266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2220      	movs	r2, #32
 800f26e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800f272:	2300      	movs	r3, #0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	6812      	ldr	r2, [r2, #0]
 800f28c:	68d2      	ldr	r2, [r2, #12]
 800f28e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f292:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d014      	beq.n	800f2cc <HAL_UART_AbortTransmit+0x50>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	6812      	ldr	r2, [r2, #0]
 800f2aa:	6952      	ldr	r2, [r2, #20]
 800f2ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f2b0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d008      	beq.n	800f2cc <HAL_UART_AbortTransmit+0x50>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2be:	2200      	movs	r2, #0
 800f2c0:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmatx);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7f3 fcdf 	bl	8002c8a <HAL_DMA_Abort>
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2220      	movs	r2, #32
 800f2d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	6812      	ldr	r2, [r2, #0]
 800f2f4:	68d2      	ldr	r2, [r2, #12]
 800f2f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f2fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	6812      	ldr	r2, [r2, #0]
 800f304:	6952      	ldr	r2, [r2, #20]
 800f306:	f022 0201 	bic.w	r2, r2, #1
 800f30a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	695b      	ldr	r3, [r3, #20]
 800f312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f316:	2b00      	cmp	r3, #0
 800f318:	d014      	beq.n	800f344 <HAL_UART_AbortReceive+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	6812      	ldr	r2, [r2, #0]
 800f322:	6952      	ldr	r2, [r2, #20]
 800f324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f328:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d008      	beq.n	800f344 <HAL_UART_AbortReceive+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f336:	2200      	movs	r2, #0
 800f338:	651a      	str	r2, [r3, #80]	; 0x50

      HAL_DMA_Abort(huart->hdmarx);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f33e:	4618      	mov	r0, r3
 800f340:	f7f3 fca3 	bl	8002c8a <HAL_DMA_Abort>
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2220      	movs	r2, #32
 800f34e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f352:	2300      	movs	r3, #0
}
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800f364:	2301      	movs	r3, #1
 800f366:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	6812      	ldr	r2, [r2, #0]
 800f370:	68d2      	ldr	r2, [r2, #12]
 800f372:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800f376:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	6812      	ldr	r2, [r2, #0]
 800f380:	6952      	ldr	r2, [r2, #20]
 800f382:	f022 0201 	bic.w	r2, r2, #1
 800f386:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if(huart->hdmatx != NULL)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00f      	beq.n	800f3b0 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	695b      	ldr	r3, [r3, #20]
 800f396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d004      	beq.n	800f3a8 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a2:	4a3e      	ldr	r2, [pc, #248]	; (800f49c <HAL_UART_Abort_IT+0x140>)
 800f3a4:	651a      	str	r2, [r3, #80]	; 0x50
 800f3a6:	e003      	b.n	800f3b0 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if(huart->hdmarx != NULL)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00f      	beq.n	800f3d8 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d004      	beq.n	800f3d0 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ca:	4a35      	ldr	r2, [pc, #212]	; (800f4a0 <HAL_UART_Abort_IT+0x144>)
 800f3cc:	651a      	str	r2, [r3, #80]	; 0x50
 800f3ce:	e003      	b.n	800f3d8 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d01a      	beq.n	800f41c <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	6812      	ldr	r2, [r2, #0]
 800f3ee:	6952      	ldr	r2, [r2, #20]
 800f3f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmatx != NULL)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00e      	beq.n	800f41c <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f402:	4618      	mov	r0, r3
 800f404:	f7f3 fcb1 	bl	8002d6a <HAL_DMA_Abort_IT>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d004      	beq.n	800f418 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f412:	2200      	movs	r2, #0
 800f414:	651a      	str	r2, [r3, #80]	; 0x50
 800f416:	e001      	b.n	800f41c <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800f418:	2300      	movs	r3, #0
 800f41a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	695b      	ldr	r3, [r3, #20]
 800f422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f426:	2b00      	cmp	r3, #0
 800f428:	d01c      	beq.n	800f464 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	6812      	ldr	r2, [r2, #0]
 800f432:	6952      	ldr	r2, [r2, #20]
 800f434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f438:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmarx != NULL)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d010      	beq.n	800f464 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f446:	4618      	mov	r0, r3
 800f448:	f7f3 fc8f 	bl	8002d6a <HAL_DMA_Abort_IT>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d006      	beq.n	800f460 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f456:	2200      	movs	r2, #0
 800f458:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800f45a:	2301      	movs	r3, #1
 800f45c:	60fb      	str	r3, [r7, #12]
 800f45e:	e001      	b.n	800f464 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800f460:	2300      	movs	r3, #0
 800f462:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if(AbortCplt == 0x01U)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d113      	bne.n	800f492 <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U; 
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2220      	movs	r2, #32
 800f480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2220      	movs	r2, #32
 800f488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 f9df 	bl	800f850 <HAL_UART_AbortCpltCallback>
  }

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	0800fd57 	.word	0x0800fd57
 800f4a0:	0800fdb1 	.word	0x0800fdb1

0800f4a4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	6812      	ldr	r2, [r2, #0]
 800f4b4:	68d2      	ldr	r2, [r2, #12]
 800f4b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f4ba:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d02a      	beq.n	800f520 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	6812      	ldr	r2, [r2, #0]
 800f4d2:	6952      	ldr	r2, [r2, #20]
 800f4d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4d8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmatx != NULL)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d013      	beq.n	800f50a <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e6:	4a16      	ldr	r2, [pc, #88]	; (800f540 <HAL_UART_AbortTransmit_IT+0x9c>)
 800f4e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f3 fc3b 	bl	8002d6a <HAL_DMA_Abort_IT>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d01c      	beq.n	800f534 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f504:	4610      	mov	r0, r2
 800f506:	4798      	blx	r3
 800f508:	e014      	b.n	800f534 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {      
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2220      	movs	r2, #32
 800f514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 f9a3 	bl	800f864 <HAL_UART_AbortTransmitCpltCallback>
 800f51e:	e009      	b.n	800f534 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2220      	movs	r2, #32
 800f52a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f998 	bl	800f864 <HAL_UART_AbortTransmitCpltCallback>
  }

  return HAL_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	0800fe0b 	.word	0x0800fe0b

0800f544 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	6812      	ldr	r2, [r2, #0]
 800f554:	68d2      	ldr	r2, [r2, #12]
 800f556:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f55a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	6812      	ldr	r2, [r2, #0]
 800f564:	6952      	ldr	r2, [r2, #20]
 800f566:	f022 0201 	bic.w	r2, r2, #1
 800f56a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	695b      	ldr	r3, [r3, #20]
 800f572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f576:	2b00      	cmp	r3, #0
 800f578:	d02a      	beq.n	800f5d0 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	6812      	ldr	r2, [r2, #0]
 800f582:	6952      	ldr	r2, [r2, #20]
 800f584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f588:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d013      	beq.n	800f5ba <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f596:	4a16      	ldr	r2, [pc, #88]	; (800f5f0 <HAL_UART_AbortReceive_IT+0xac>)
 800f598:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7f3 fbe3 	bl	8002d6a <HAL_DMA_Abort_IT>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d01c      	beq.n	800f5e4 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4798      	blx	r3
 800f5b8:	e014      	b.n	800f5e4 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U; 
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2220      	movs	r2, #32
 800f5c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f955 	bl	800f878 <HAL_UART_AbortReceiveCpltCallback>
 800f5ce:	e009      	b.n	800f5e4 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U; 
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2220      	movs	r2, #32
 800f5da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f94a 	bl	800f878 <HAL_UART_AbortReceiveCpltCallback>
  }

  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	0800fe35 	.word	0x0800fe35

0800f5f4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b088      	sub	sp, #32
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	695b      	ldr	r3, [r3, #20]
 800f612:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800f614:	2300      	movs	r3, #0
 800f616:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800f618:	2300      	movs	r3, #0
 800f61a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	f003 030f 	and.w	r3, r3, #15
 800f622:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10d      	bne.n	800f646 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	f003 0320 	and.w	r3, r3, #32
 800f630:	2b00      	cmp	r3, #0
 800f632:	d008      	beq.n	800f646 <HAL_UART_IRQHandler+0x52>
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	f003 0320 	and.w	r3, r3, #32
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fc7a 	bl	800ff38 <UART_Receive_IT>
      return;
 800f644:	e0cc      	b.n	800f7e0 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f000 80ab 	beq.w	800f7a4 <HAL_UART_IRQHandler+0x1b0>
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	f003 0301 	and.w	r3, r3, #1
 800f654:	2b00      	cmp	r3, #0
 800f656:	d105      	bne.n	800f664 <HAL_UART_IRQHandler+0x70>
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f000 80a0 	beq.w	800f7a4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	f003 0301 	and.w	r3, r3, #1
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00a      	beq.n	800f684 <HAL_UART_IRQHandler+0x90>
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f674:	2b00      	cmp	r3, #0
 800f676:	d005      	beq.n	800f684 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67c:	f043 0201 	orr.w	r2, r3, #1
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	f003 0304 	and.w	r3, r3, #4
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00a      	beq.n	800f6a4 <HAL_UART_IRQHandler+0xb0>
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f003 0301 	and.w	r3, r3, #1
 800f694:	2b00      	cmp	r3, #0
 800f696:	d005      	beq.n	800f6a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f69c:	f043 0202 	orr.w	r2, r3, #2
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	f003 0302 	and.w	r3, r3, #2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00a      	beq.n	800f6c4 <HAL_UART_IRQHandler+0xd0>
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	f003 0301 	and.w	r3, r3, #1
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d005      	beq.n	800f6c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6bc:	f043 0204 	orr.w	r2, r3, #4
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	f003 0308 	and.w	r3, r3, #8
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00a      	beq.n	800f6e4 <HAL_UART_IRQHandler+0xf0>
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	f003 0301 	and.w	r3, r3, #1
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d005      	beq.n	800f6e4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6dc:	f043 0208 	orr.w	r2, r3, #8
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d078      	beq.n	800f7de <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	f003 0320 	and.w	r3, r3, #32
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d007      	beq.n	800f706 <HAL_UART_IRQHandler+0x112>
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	f003 0320 	and.w	r3, r3, #32
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fc19 	bl	800ff38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f710:	2b00      	cmp	r3, #0
 800f712:	bf14      	ite	ne
 800f714:	2301      	movne	r3, #1
 800f716:	2300      	moveq	r3, #0
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f720:	f003 0308 	and.w	r3, r3, #8
 800f724:	2b00      	cmp	r3, #0
 800f726:	d102      	bne.n	800f72e <HAL_UART_IRQHandler+0x13a>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d031      	beq.n	800f792 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 fadf 	bl	800fcf2 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	695b      	ldr	r3, [r3, #20]
 800f73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d023      	beq.n	800f78a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	6812      	ldr	r2, [r2, #0]
 800f74a:	6952      	ldr	r2, [r2, #20]
 800f74c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f750:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f756:	2b00      	cmp	r3, #0
 800f758:	d013      	beq.n	800f782 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f75e:	4a22      	ldr	r2, [pc, #136]	; (800f7e8 <HAL_UART_IRQHandler+0x1f4>)
 800f760:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f766:	4618      	mov	r0, r3
 800f768:	f7f3 faff 	bl	8002d6a <HAL_DMA_Abort_IT>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d016      	beq.n	800f7a0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f77c:	4610      	mov	r0, r2
 800f77e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f780:	e00e      	b.n	800f7a0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 f85a 	bl	800f83c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f788:	e00a      	b.n	800f7a0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 f856 	bl	800f83c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f790:	e006      	b.n	800f7a0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 f852 	bl	800f83c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f79e:	e01e      	b.n	800f7de <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7a0:	bf00      	nop
    return;
 800f7a2:	e01c      	b.n	800f7de <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d008      	beq.n	800f7c0 <HAL_UART_IRQHandler+0x1cc>
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d003      	beq.n	800f7c0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 fb50 	bl	800fe5e <UART_Transmit_IT>
    return;
 800f7be:	e00f      	b.n	800f7e0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00a      	beq.n	800f7e0 <HAL_UART_IRQHandler+0x1ec>
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 fb97 	bl	800ff08 <UART_EndTransmit_IT>
    return;
 800f7da:	bf00      	nop
 800f7dc:	e000      	b.n	800f7e0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800f7de:	bf00      	nop
  }
}
 800f7e0:	3720      	adds	r7, #32
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	0800fd2f 	.word	0x0800fd2f

0800f7ec <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800f7f4:	bf00      	nop
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f81c:	bf00      	nop
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800f844:	bf00      	nop
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800f86c:	bf00      	nop
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
{
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f880:	bf00      	nop
 800f882:	370c      	adds	r7, #12
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <HAL_LIN_SendBreak>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d101      	bne.n	800f8a2 <HAL_LIN_SendBreak+0x16>
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e018      	b.n	800f8d4 <HAL_LIN_SendBreak+0x48>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2224      	movs	r2, #36	; 0x24
 800f8ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	6812      	ldr	r2, [r2, #0]
 800f8ba:	68d2      	ldr	r2, [r2, #12]
 800f8bc:	f042 0201 	orr.w	r2, r2, #1
 800f8c0:	60da      	str	r2, [r3, #12]
 
  huart->gState = HAL_UART_STATE_READY;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2220      	movs	r2, #32
 800f8c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d101      	bne.n	800f8f6 <HAL_MultiProcessor_EnterMuteMode+0x16>
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	e018      	b.n	800f928 <HAL_MultiProcessor_EnterMuteMode+0x48>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2224      	movs	r2, #36	; 0x24
 800f902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	6812      	ldr	r2, [r2, #0]
 800f90e:	68d2      	ldr	r2, [r2, #12]
 800f910:	f042 0202 	orr.w	r2, r2, #2
 800f914:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2220      	movs	r2, #32
 800f91a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f942:	2b01      	cmp	r3, #1
 800f944:	d101      	bne.n	800f94a <HAL_MultiProcessor_ExitMuteMode+0x16>
 800f946:	2302      	movs	r3, #2
 800f948:	e018      	b.n	800f97c <HAL_MultiProcessor_ExitMuteMode+0x48>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2201      	movs	r2, #1
 800f94e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2224      	movs	r2, #36	; 0x24
 800f956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	6812      	ldr	r2, [r2, #0]
 800f962:	68d2      	ldr	r2, [r2, #12]
 800f964:	f022 0202 	bic.w	r2, r2, #2
 800f968:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2220      	movs	r2, #32
 800f96e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800f988:	b480      	push	{r7}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800f990:	2300      	movs	r3, #0
 800f992:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d101      	bne.n	800f9a2 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800f99e:	2302      	movs	r3, #2
 800f9a0:	e020      	b.n	800f9e4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2224      	movs	r2, #36	; 0x24
 800f9ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f023 030c 	bic.w	r3, r3, #12
 800f9c0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f043 0308 	orr.w	r3, r3, #8
 800f9c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	60da      	str	r2, [r3, #12]
 
  huart->gState = HAL_UART_STATE_READY;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2220      	movs	r2, #32
 800f9d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800f9e2:	2300      	movs	r3, #0
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3714      	adds	r7, #20
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d101      	bne.n	800fa0a <HAL_HalfDuplex_EnableReceiver+0x1a>
 800fa06:	2302      	movs	r3, #2
 800fa08:	e020      	b.n	800fa4c <HAL_HalfDuplex_EnableReceiver+0x5c>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->gState = HAL_UART_STATE_BUSY;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2224      	movs	r2, #36	; 0x24
 800fa16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	60fb      	str	r3, [r7, #12]
  
  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f023 030c 	bic.w	r3, r3, #12
 800fa28:	60fb      	str	r3, [r7, #12]
  
  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f043 0304 	orr.w	r3, r3, #4
 800fa30:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	60da      	str	r2, [r3, #12]
  
  huart->gState = HAL_UART_STATE_READY;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2220      	movs	r2, #32
 800fa3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3714      	adds	r7, #20
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <HAL_UART_GetState>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 800fa60:	2300      	movs	r3, #0
 800fa62:	60fb      	str	r3, [r7, #12]
 800fa64:	2300      	movs	r3, #0
 800fa66:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	b2da      	uxtb	r2, r3
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	4313      	orrs	r3, r2
 800fa86:	b2db      	uxtb	r3, r3
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <HAL_UART_GetError>:
  * @param  huart : pointer to a UART_HandleTypeDef structure that contains
  *              the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d113      	bne.n	800faf0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2200      	movs	r2, #0
 800facc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	6812      	ldr	r2, [r2, #0]
 800fad6:	6952      	ldr	r2, [r2, #20]
 800fad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fadc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	6812      	ldr	r2, [r2, #0]
 800fae6:	68d2      	ldr	r2, [r2, #12]
 800fae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800faec:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800faee:	e002      	b.n	800faf6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f7ff fe7b 	bl	800f7ec <HAL_UART_TxCpltCallback>
}
 800faf6:	bf00      	nop
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b084      	sub	sp, #16
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb0a:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7ff fe77 	bl	800f800 <HAL_UART_TxHalfCpltCallback>
}
 800fb12:	bf00      	nop
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b084      	sub	sp, #16
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb26:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d11e      	bne.n	800fb74 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	6812      	ldr	r2, [r2, #0]
 800fb44:	68d2      	ldr	r2, [r2, #12]
 800fb46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fb4a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	6812      	ldr	r2, [r2, #0]
 800fb54:	6952      	ldr	r2, [r2, #20]
 800fb56:	f022 0201 	bic.w	r2, r2, #1
 800fb5a:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	6812      	ldr	r2, [r2, #0]
 800fb64:	6952      	ldr	r2, [r2, #20]
 800fb66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb6a:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2220      	movs	r2, #32
 800fb70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7ff fe4d 	bl	800f814 <HAL_UART_RxCpltCallback>
}
 800fb7a:	bf00      	nop
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b084      	sub	sp, #16
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb8e:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f7ff fe49 	bl	800f828 <HAL_UART_RxHalfCpltCallback>
}
 800fb96:	bf00      	nop
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b084      	sub	sp, #16
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fba6:	2300      	movs	r3, #0
 800fba8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	695b      	ldr	r3, [r3, #20]
 800fbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	bf14      	ite	ne
 800fbbe:	2301      	movne	r3, #1
 800fbc0:	2300      	moveq	r3, #0
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b21      	cmp	r3, #33	; 0x21
 800fbd0:	d108      	bne.n	800fbe4 <UART_DMAError+0x46>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d005      	beq.n	800fbe4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800fbde:	68b8      	ldr	r0, [r7, #8]
 800fbe0:	f000 f871 	bl	800fcc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	695b      	ldr	r3, [r3, #20]
 800fbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	bf14      	ite	ne
 800fbf2:	2301      	movne	r3, #1
 800fbf4:	2300      	moveq	r3, #0
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b22      	cmp	r3, #34	; 0x22
 800fc04:	d108      	bne.n	800fc18 <UART_DMAError+0x7a>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d005      	beq.n	800fc18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fc12:	68b8      	ldr	r0, [r7, #8]
 800fc14:	f000 f86d 	bl	800fcf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc1c:	f043 0210 	orr.w	r2, r3, #16
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800fc24:	68b8      	ldr	r0, [r7, #8]
 800fc26:	f7ff fe09 	bl	800f83c <HAL_UART_ErrorCallback>
}
 800fc2a:	bf00      	nop
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b084      	sub	sp, #16
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	60b9      	str	r1, [r7, #8]
 800fc3c:	603b      	str	r3, [r7, #0]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800fc42:	e02c      	b.n	800fc9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc4a:	d028      	beq.n	800fc9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d007      	beq.n	800fc62 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc52:	f7f0 fb47 	bl	80002e4 <HAL_GetTick>
 800fc56:	4602      	mov	r2, r0
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	1ad2      	subs	r2, r2, r3
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d91d      	bls.n	800fc9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	6812      	ldr	r2, [r2, #0]
 800fc6a:	68d2      	ldr	r2, [r2, #12]
 800fc6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fc70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	6812      	ldr	r2, [r2, #0]
 800fc7a:	6952      	ldr	r2, [r2, #20]
 800fc7c:	f022 0201 	bic.w	r2, r2, #1
 800fc80:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2220      	movs	r2, #32
 800fc86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2220      	movs	r2, #32
 800fc8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800fc9a:	2303      	movs	r3, #3
 800fc9c:	e00f      	b.n	800fcbe <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	401a      	ands	r2, r3
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	bf0c      	ite	eq
 800fcae:	2301      	moveq	r3, #1
 800fcb0:	2300      	movne	r3, #0
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	79fb      	ldrb	r3, [r7, #7]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d0c3      	beq.n	800fc44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800fcbc:	2300      	movs	r3, #0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fcc6:	b480      	push	{r7}
 800fcc8:	b083      	sub	sp, #12
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	6812      	ldr	r2, [r2, #0]
 800fcd6:	68d2      	ldr	r2, [r2, #12]
 800fcd8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fcdc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2220      	movs	r2, #32
 800fce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800fce6:	bf00      	nop
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fcf2:	b480      	push	{r7}
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	6812      	ldr	r2, [r2, #0]
 800fd02:	68d2      	ldr	r2, [r2, #12]
 800fd04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fd08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	6812      	ldr	r2, [r2, #0]
 800fd12:	6952      	ldr	r2, [r2, #20]
 800fd14:	f022 0201 	bic.w	r2, r2, #1
 800fd18:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2220      	movs	r2, #32
 800fd1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800fd22:	bf00      	nop
 800fd24:	370c      	adds	r7, #12
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr

0800fd2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2200      	movs	r2, #0
 800fd46:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f7ff fd77 	bl	800f83c <HAL_UART_ErrorCallback>
}
 800fd4e:	bf00      	nop
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b084      	sub	sp, #16
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd62:	60fb      	str	r3, [r7, #12]
  
  huart->hdmatx->XferAbortCallback = NULL;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd68:	2200      	movs	r2, #0
 800fd6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if(huart->hdmarx != NULL)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d004      	beq.n	800fd7e <UART_DMATxAbortCallback+0x28>
  {
    if(huart->hdmarx->XferAbortCallback != NULL)
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d114      	bne.n	800fda8 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2200      	movs	r2, #0
 800fd82:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2200      	movs	r2, #0
 800fd88:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2220      	movs	r2, #32
 800fd94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2220      	movs	r2, #32
 800fd9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f7ff fd55 	bl	800f850 <HAL_UART_AbortCpltCallback>
 800fda6:	e000      	b.n	800fdaa <UART_DMATxAbortCallback+0x54>
      return;
 800fda8:	bf00      	nop
}
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdbc:	60fb      	str	r3, [r7, #12]
  
  huart->hdmarx->XferAbortCallback = NULL;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if(huart->hdmatx != NULL)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d004      	beq.n	800fdd8 <UART_DMARxAbortCallback+0x28>
  {
    if(huart->hdmatx->XferAbortCallback != NULL)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d114      	bne.n	800fe02 <UART_DMARxAbortCallback+0x52>
      return;
    }
  }
  
  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2200      	movs	r2, #0
 800fddc:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2200      	movs	r2, #0
 800fde2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2200      	movs	r2, #0
 800fde8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2220      	movs	r2, #32
 800fdee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2220      	movs	r2, #32
 800fdf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f7ff fd28 	bl	800f850 <HAL_UART_AbortCpltCallback>
 800fe00:	e000      	b.n	800fe04 <UART_DMARxAbortCallback+0x54>
      return;
 800fe02:	bf00      	nop
}
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe16:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2220      	movs	r2, #32
 800fe22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Call user Abort complete callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff fd1c 	bl	800f864 <HAL_UART_AbortTransmitCpltCallback>
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe40:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2200      	movs	r2, #0
 800fe46:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2220      	movs	r2, #32
 800fe4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Call user Abort complete callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f7ff fd11 	bl	800f878 <HAL_UART_AbortReceiveCpltCallback>
}
 800fe56:	bf00      	nop
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fe5e:	b480      	push	{r7}
 800fe60:	b085      	sub	sp, #20
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b21      	cmp	r3, #33	; 0x21
 800fe70:	d143      	bne.n	800fefa <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe7a:	d119      	bne.n	800feb0 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a1b      	ldr	r3, [r3, #32]
 800fe80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	8812      	ldrh	r2, [r2, #0]
 800fe8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe8e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d105      	bne.n	800fea4 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a1b      	ldr	r3, [r3, #32]
 800fe9c:	1c9a      	adds	r2, r3, #2
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	621a      	str	r2, [r3, #32]
 800fea2:	e00e      	b.n	800fec2 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6a1b      	ldr	r3, [r3, #32]
 800fea8:	1c5a      	adds	r2, r3, #1
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	621a      	str	r2, [r3, #32]
 800feae:	e008      	b.n	800fec2 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	1c58      	adds	r0, r3, #1
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	6208      	str	r0, [r1, #32]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	3b01      	subs	r3, #1
 800feca:	b29b      	uxth	r3, r3
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	4619      	mov	r1, r3
 800fed0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10f      	bne.n	800fef6 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	6812      	ldr	r2, [r2, #0]
 800fede:	68d2      	ldr	r2, [r2, #12]
 800fee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fee4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	6812      	ldr	r2, [r2, #0]
 800feee:	68d2      	ldr	r2, [r2, #12]
 800fef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fef4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fef6:	2300      	movs	r3, #0
 800fef8:	e000      	b.n	800fefc <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800fefa:	2302      	movs	r3, #2
  }
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	6812      	ldr	r2, [r2, #0]
 800ff18:	68d2      	ldr	r2, [r2, #12]
 800ff1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff1e:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2220      	movs	r2, #32
 800ff24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7ff fc5f 	bl	800f7ec <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	2b22      	cmp	r3, #34	; 0x22
 800ff4a:	d169      	bne.n	8010020 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff54:	d123      	bne.n	800ff9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff5a:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d10e      	bne.n	800ff82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff7a:	1c9a      	adds	r2, r3, #2
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	629a      	str	r2, [r3, #40]	; 0x28
 800ff80:	e029      	b.n	800ffd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff96:	1c5a      	adds	r2, r3, #1
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	629a      	str	r2, [r3, #40]	; 0x28
 800ff9c:	e01b      	b.n	800ffd6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d10a      	bne.n	800ffbc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffaa:	1c59      	adds	r1, r3, #1
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	6291      	str	r1, [r2, #40]	; 0x28
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	6812      	ldr	r2, [r2, #0]
 800ffb4:	6852      	ldr	r2, [r2, #4]
 800ffb6:	b2d2      	uxtb	r2, r2
 800ffb8:	701a      	strb	r2, [r3, #0]
 800ffba:	e00c      	b.n	800ffd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc0:	1c59      	adds	r1, r3, #1
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	6291      	str	r1, [r2, #40]	; 0x28
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	6812      	ldr	r2, [r2, #0]
 800ffca:	6852      	ldr	r2, [r2, #4]
 800ffcc:	b2d2      	uxtb	r2, r2
 800ffce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ffd2:	b2d2      	uxtb	r2, r2
 800ffd4:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d118      	bne.n	801001c <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	6812      	ldr	r2, [r2, #0]
 800fff2:	68d2      	ldr	r2, [r2, #12]
 800fff4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	6812      	ldr	r2, [r2, #0]
 8010002:	6952      	ldr	r2, [r2, #20]
 8010004:	f022 0201 	bic.w	r2, r2, #1
 8010008:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2220      	movs	r2, #32
 801000e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff fbfe 	bl	800f814 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	e002      	b.n	8010022 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	e000      	b.n	8010022 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010020:	2302      	movs	r3, #2
  }
}
 8010022:	4618      	mov	r0, r3
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801002a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801002c:	b085      	sub	sp, #20
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8010032:	2300      	movs	r3, #0
 8010034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010044:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	4313      	orrs	r3, r2
 801004e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010066:	f023 030c 	bic.w	r3, r3, #12
 801006a:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	689a      	ldr	r2, [r3, #8]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	691b      	ldr	r3, [r3, #16]
 8010074:	431a      	orrs	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	695b      	ldr	r3, [r3, #20]
 801007a:	431a      	orrs	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	69db      	ldr	r3, [r3, #28]
 8010080:	4313      	orrs	r3, r2
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	4313      	orrs	r3, r2
 8010086:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68fa      	ldr	r2, [r7, #12]
 801008e:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	695b      	ldr	r3, [r3, #20]
 8010096:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801009e:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	699b      	ldr	r3, [r3, #24]
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	4313      	orrs	r3, r2
 80100a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	69db      	ldr	r3, [r3, #28]
 80100b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100ba:	f040 80e4 	bne.w	8010286 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4aac      	ldr	r2, [pc, #688]	; (8010374 <UART_SetConfig+0x34a>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d004      	beq.n	80100d2 <UART_SetConfig+0xa8>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4aaa      	ldr	r2, [pc, #680]	; (8010378 <UART_SetConfig+0x34e>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d16c      	bne.n	80101ac <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681c      	ldr	r4, [r3, #0]
 80100d6:	f7f9 f943 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 80100da:	4602      	mov	r2, r0
 80100dc:	4613      	mov	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4413      	add	r3, r2
 80100e2:	009a      	lsls	r2, r3, #2
 80100e4:	441a      	add	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	005b      	lsls	r3, r3, #1
 80100ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80100f0:	4aa2      	ldr	r2, [pc, #648]	; (801037c <UART_SetConfig+0x352>)
 80100f2:	fba2 2303 	umull	r2, r3, r2, r3
 80100f6:	095b      	lsrs	r3, r3, #5
 80100f8:	011d      	lsls	r5, r3, #4
 80100fa:	f7f9 f931 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 80100fe:	4602      	mov	r2, r0
 8010100:	4613      	mov	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	4413      	add	r3, r2
 8010106:	009a      	lsls	r2, r3, #2
 8010108:	441a      	add	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	fbb2 f6f3 	udiv	r6, r2, r3
 8010114:	f7f9 f924 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 8010118:	4602      	mov	r2, r0
 801011a:	4613      	mov	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	009a      	lsls	r2, r3, #2
 8010122:	441a      	add	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	005b      	lsls	r3, r3, #1
 801012a:	fbb2 f3f3 	udiv	r3, r2, r3
 801012e:	4a93      	ldr	r2, [pc, #588]	; (801037c <UART_SetConfig+0x352>)
 8010130:	fba2 2303 	umull	r2, r3, r2, r3
 8010134:	095b      	lsrs	r3, r3, #5
 8010136:	2264      	movs	r2, #100	; 0x64
 8010138:	fb02 f303 	mul.w	r3, r2, r3
 801013c:	1af3      	subs	r3, r6, r3
 801013e:	00db      	lsls	r3, r3, #3
 8010140:	3332      	adds	r3, #50	; 0x32
 8010142:	4a8e      	ldr	r2, [pc, #568]	; (801037c <UART_SetConfig+0x352>)
 8010144:	fba2 2303 	umull	r2, r3, r2, r3
 8010148:	095b      	lsrs	r3, r3, #5
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010150:	441d      	add	r5, r3
 8010152:	f7f9 f905 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 8010156:	4602      	mov	r2, r0
 8010158:	4613      	mov	r3, r2
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	4413      	add	r3, r2
 801015e:	009a      	lsls	r2, r3, #2
 8010160:	441a      	add	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	fbb2 f6f3 	udiv	r6, r2, r3
 801016c:	f7f9 f8f8 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 8010170:	4602      	mov	r2, r0
 8010172:	4613      	mov	r3, r2
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4413      	add	r3, r2
 8010178:	009a      	lsls	r2, r3, #2
 801017a:	441a      	add	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	005b      	lsls	r3, r3, #1
 8010182:	fbb2 f3f3 	udiv	r3, r2, r3
 8010186:	4a7d      	ldr	r2, [pc, #500]	; (801037c <UART_SetConfig+0x352>)
 8010188:	fba2 2303 	umull	r2, r3, r2, r3
 801018c:	095b      	lsrs	r3, r3, #5
 801018e:	2264      	movs	r2, #100	; 0x64
 8010190:	fb02 f303 	mul.w	r3, r2, r3
 8010194:	1af3      	subs	r3, r6, r3
 8010196:	00db      	lsls	r3, r3, #3
 8010198:	3332      	adds	r3, #50	; 0x32
 801019a:	4a78      	ldr	r2, [pc, #480]	; (801037c <UART_SetConfig+0x352>)
 801019c:	fba2 2303 	umull	r2, r3, r2, r3
 80101a0:	095b      	lsrs	r3, r3, #5
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	442b      	add	r3, r5
 80101a8:	60a3      	str	r3, [r4, #8]
 80101aa:	e155      	b.n	8010458 <UART_SetConfig+0x42e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681c      	ldr	r4, [r3, #0]
 80101b0:	f7f9 f8b4 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 80101b4:	4602      	mov	r2, r0
 80101b6:	4613      	mov	r3, r2
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	4413      	add	r3, r2
 80101bc:	009a      	lsls	r2, r3, #2
 80101be:	441a      	add	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80101ca:	4a6c      	ldr	r2, [pc, #432]	; (801037c <UART_SetConfig+0x352>)
 80101cc:	fba2 2303 	umull	r2, r3, r2, r3
 80101d0:	095b      	lsrs	r3, r3, #5
 80101d2:	011d      	lsls	r5, r3, #4
 80101d4:	f7f9 f8a2 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 80101d8:	4602      	mov	r2, r0
 80101da:	4613      	mov	r3, r2
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	4413      	add	r3, r2
 80101e0:	009a      	lsls	r2, r3, #2
 80101e2:	441a      	add	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80101ee:	f7f9 f895 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 80101f2:	4602      	mov	r2, r0
 80101f4:	4613      	mov	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	009a      	lsls	r2, r3, #2
 80101fc:	441a      	add	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	005b      	lsls	r3, r3, #1
 8010204:	fbb2 f3f3 	udiv	r3, r2, r3
 8010208:	4a5c      	ldr	r2, [pc, #368]	; (801037c <UART_SetConfig+0x352>)
 801020a:	fba2 2303 	umull	r2, r3, r2, r3
 801020e:	095b      	lsrs	r3, r3, #5
 8010210:	2264      	movs	r2, #100	; 0x64
 8010212:	fb02 f303 	mul.w	r3, r2, r3
 8010216:	1af3      	subs	r3, r6, r3
 8010218:	00db      	lsls	r3, r3, #3
 801021a:	3332      	adds	r3, #50	; 0x32
 801021c:	4a57      	ldr	r2, [pc, #348]	; (801037c <UART_SetConfig+0x352>)
 801021e:	fba2 2303 	umull	r2, r3, r2, r3
 8010222:	095b      	lsrs	r3, r3, #5
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801022a:	441d      	add	r5, r3
 801022c:	f7f9 f876 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 8010230:	4602      	mov	r2, r0
 8010232:	4613      	mov	r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4413      	add	r3, r2
 8010238:	009a      	lsls	r2, r3, #2
 801023a:	441a      	add	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	fbb2 f6f3 	udiv	r6, r2, r3
 8010246:	f7f9 f869 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 801024a:	4602      	mov	r2, r0
 801024c:	4613      	mov	r3, r2
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	4413      	add	r3, r2
 8010252:	009a      	lsls	r2, r3, #2
 8010254:	441a      	add	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	005b      	lsls	r3, r3, #1
 801025c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010260:	4a46      	ldr	r2, [pc, #280]	; (801037c <UART_SetConfig+0x352>)
 8010262:	fba2 2303 	umull	r2, r3, r2, r3
 8010266:	095b      	lsrs	r3, r3, #5
 8010268:	2264      	movs	r2, #100	; 0x64
 801026a:	fb02 f303 	mul.w	r3, r2, r3
 801026e:	1af3      	subs	r3, r6, r3
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	3332      	adds	r3, #50	; 0x32
 8010274:	4a41      	ldr	r2, [pc, #260]	; (801037c <UART_SetConfig+0x352>)
 8010276:	fba2 2303 	umull	r2, r3, r2, r3
 801027a:	095b      	lsrs	r3, r3, #5
 801027c:	f003 0307 	and.w	r3, r3, #7
 8010280:	442b      	add	r3, r5
 8010282:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8010284:	e0e8      	b.n	8010458 <UART_SetConfig+0x42e>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a3a      	ldr	r2, [pc, #232]	; (8010374 <UART_SetConfig+0x34a>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d004      	beq.n	801029a <UART_SetConfig+0x270>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a38      	ldr	r2, [pc, #224]	; (8010378 <UART_SetConfig+0x34e>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d172      	bne.n	8010380 <UART_SetConfig+0x356>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681c      	ldr	r4, [r3, #0]
 801029e:	f7f9 f85f 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4613      	mov	r3, r2
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	4413      	add	r3, r2
 80102aa:	009a      	lsls	r2, r3, #2
 80102ac:	441a      	add	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80102b8:	4a30      	ldr	r2, [pc, #192]	; (801037c <UART_SetConfig+0x352>)
 80102ba:	fba2 2303 	umull	r2, r3, r2, r3
 80102be:	095b      	lsrs	r3, r3, #5
 80102c0:	011d      	lsls	r5, r3, #4
 80102c2:	f7f9 f84d 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 80102c6:	4602      	mov	r2, r0
 80102c8:	4613      	mov	r3, r2
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	009a      	lsls	r2, r3, #2
 80102d0:	441a      	add	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80102dc:	f7f9 f840 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 80102e0:	4602      	mov	r2, r0
 80102e2:	4613      	mov	r3, r2
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	4413      	add	r3, r2
 80102e8:	009a      	lsls	r2, r3, #2
 80102ea:	441a      	add	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102f6:	4a21      	ldr	r2, [pc, #132]	; (801037c <UART_SetConfig+0x352>)
 80102f8:	fba2 2303 	umull	r2, r3, r2, r3
 80102fc:	095b      	lsrs	r3, r3, #5
 80102fe:	2264      	movs	r2, #100	; 0x64
 8010300:	fb02 f303 	mul.w	r3, r2, r3
 8010304:	1af3      	subs	r3, r6, r3
 8010306:	011b      	lsls	r3, r3, #4
 8010308:	3332      	adds	r3, #50	; 0x32
 801030a:	4a1c      	ldr	r2, [pc, #112]	; (801037c <UART_SetConfig+0x352>)
 801030c:	fba2 2303 	umull	r2, r3, r2, r3
 8010310:	095b      	lsrs	r3, r3, #5
 8010312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010316:	441d      	add	r5, r3
 8010318:	f7f9 f822 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 801031c:	4602      	mov	r2, r0
 801031e:	4613      	mov	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	4413      	add	r3, r2
 8010324:	009a      	lsls	r2, r3, #2
 8010326:	441a      	add	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010332:	f7f9 f815 	bl	8009360 <HAL_RCC_GetPCLK2Freq>
 8010336:	4602      	mov	r2, r0
 8010338:	4613      	mov	r3, r2
 801033a:	009b      	lsls	r3, r3, #2
 801033c:	4413      	add	r3, r2
 801033e:	009a      	lsls	r2, r3, #2
 8010340:	441a      	add	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	fbb2 f3f3 	udiv	r3, r2, r3
 801034c:	4a0b      	ldr	r2, [pc, #44]	; (801037c <UART_SetConfig+0x352>)
 801034e:	fba2 2303 	umull	r2, r3, r2, r3
 8010352:	095b      	lsrs	r3, r3, #5
 8010354:	2264      	movs	r2, #100	; 0x64
 8010356:	fb02 f303 	mul.w	r3, r2, r3
 801035a:	1af3      	subs	r3, r6, r3
 801035c:	011b      	lsls	r3, r3, #4
 801035e:	3332      	adds	r3, #50	; 0x32
 8010360:	4a06      	ldr	r2, [pc, #24]	; (801037c <UART_SetConfig+0x352>)
 8010362:	fba2 2303 	umull	r2, r3, r2, r3
 8010366:	095b      	lsrs	r3, r3, #5
 8010368:	f003 030f 	and.w	r3, r3, #15
 801036c:	442b      	add	r3, r5
 801036e:	60a3      	str	r3, [r4, #8]
 8010370:	e072      	b.n	8010458 <UART_SetConfig+0x42e>
 8010372:	bf00      	nop
 8010374:	40011000 	.word	0x40011000
 8010378:	40011400 	.word	0x40011400
 801037c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681c      	ldr	r4, [r3, #0]
 8010384:	f7f8 ffca 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 8010388:	4602      	mov	r2, r0
 801038a:	4613      	mov	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4413      	add	r3, r2
 8010390:	009a      	lsls	r2, r3, #2
 8010392:	441a      	add	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	fbb2 f3f3 	udiv	r3, r2, r3
 801039e:	4a30      	ldr	r2, [pc, #192]	; (8010460 <UART_SetConfig+0x436>)
 80103a0:	fba2 2303 	umull	r2, r3, r2, r3
 80103a4:	095b      	lsrs	r3, r3, #5
 80103a6:	011d      	lsls	r5, r3, #4
 80103a8:	f7f8 ffb8 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 80103ac:	4602      	mov	r2, r0
 80103ae:	4613      	mov	r3, r2
 80103b0:	009b      	lsls	r3, r3, #2
 80103b2:	4413      	add	r3, r2
 80103b4:	009a      	lsls	r2, r3, #2
 80103b6:	441a      	add	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	fbb2 f6f3 	udiv	r6, r2, r3
 80103c2:	f7f8 ffab 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 80103c6:	4602      	mov	r2, r0
 80103c8:	4613      	mov	r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	4413      	add	r3, r2
 80103ce:	009a      	lsls	r2, r3, #2
 80103d0:	441a      	add	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80103dc:	4a20      	ldr	r2, [pc, #128]	; (8010460 <UART_SetConfig+0x436>)
 80103de:	fba2 2303 	umull	r2, r3, r2, r3
 80103e2:	095b      	lsrs	r3, r3, #5
 80103e4:	2264      	movs	r2, #100	; 0x64
 80103e6:	fb02 f303 	mul.w	r3, r2, r3
 80103ea:	1af3      	subs	r3, r6, r3
 80103ec:	011b      	lsls	r3, r3, #4
 80103ee:	3332      	adds	r3, #50	; 0x32
 80103f0:	4a1b      	ldr	r2, [pc, #108]	; (8010460 <UART_SetConfig+0x436>)
 80103f2:	fba2 2303 	umull	r2, r3, r2, r3
 80103f6:	095b      	lsrs	r3, r3, #5
 80103f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103fc:	441d      	add	r5, r3
 80103fe:	f7f8 ff8d 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 8010402:	4602      	mov	r2, r0
 8010404:	4613      	mov	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4413      	add	r3, r2
 801040a:	009a      	lsls	r2, r3, #2
 801040c:	441a      	add	r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	fbb2 f6f3 	udiv	r6, r2, r3
 8010418:	f7f8 ff80 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 801041c:	4602      	mov	r2, r0
 801041e:	4613      	mov	r3, r2
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	4413      	add	r3, r2
 8010424:	009a      	lsls	r2, r3, #2
 8010426:	441a      	add	r2, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010432:	4a0b      	ldr	r2, [pc, #44]	; (8010460 <UART_SetConfig+0x436>)
 8010434:	fba2 2303 	umull	r2, r3, r2, r3
 8010438:	095b      	lsrs	r3, r3, #5
 801043a:	2264      	movs	r2, #100	; 0x64
 801043c:	fb02 f303 	mul.w	r3, r2, r3
 8010440:	1af3      	subs	r3, r6, r3
 8010442:	011b      	lsls	r3, r3, #4
 8010444:	3332      	adds	r3, #50	; 0x32
 8010446:	4a06      	ldr	r2, [pc, #24]	; (8010460 <UART_SetConfig+0x436>)
 8010448:	fba2 2303 	umull	r2, r3, r2, r3
 801044c:	095b      	lsrs	r3, r3, #5
 801044e:	f003 030f 	and.w	r3, r3, #15
 8010452:	442b      	add	r3, r5
 8010454:	60a3      	str	r3, [r4, #8]
}
 8010456:	e7ff      	b.n	8010458 <UART_SetConfig+0x42e>
 8010458:	bf00      	nop
 801045a:	3714      	adds	r7, #20
 801045c:	46bd      	mov	sp, r7
 801045e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010460:	51eb851f 	.word	0x51eb851f

08010464 <hw_init>:
extern uint32_t tick;
extern SD_MPU6050 mpu1;
extern State quad_state;


void hw_init(){
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801046a:	f7ef feb5 	bl	80001d8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 801046e:	f000 f87d 	bl	801056c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010472:	f000 faaf 	bl	80109d4 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8010476:	2201      	movs	r2, #1
 8010478:	2120      	movs	r1, #32
 801047a:	4834      	ldr	r0, [pc, #208]	; (801054c <hw_init+0xe8>)
 801047c:	f7f3 fb3c 	bl	8003af8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8010480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010484:	f7ef ff3a 	bl	80002fc <HAL_Delay>


  MX_I2C1_Init();
 8010488:	f000 f93c 	bl	8010704 <MX_I2C1_Init>
  MX_TIM1_Init();
 801048c:	f000 f970 	bl	8010770 <MX_TIM1_Init>
  MX_ADC1_Init();
 8010490:	f000 f8e4 	bl	801065c <MX_ADC1_Init>
  MX_TIM3_Init();
 8010494:	f000 fa26 	bl	80108e4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8010498:	f000 fa6e 	bl	8010978 <MX_USART2_UART_Init>

  /*Start TIMER3*/
  HAL_TIM_Base_Start_IT(&htim3);
 801049c:	482c      	ldr	r0, [pc, #176]	; (8010550 <hw_init+0xec>)
 801049e:	f7f9 f942 	bl	8009726 <HAL_TIM_Base_Start_IT>

  /*Start motor outputs (pwm)*/
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80104a2:	210c      	movs	r1, #12
 80104a4:	482b      	ldr	r0, [pc, #172]	; (8010554 <hw_init+0xf0>)
 80104a6:	f7f9 fdb2 	bl	800a00e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80104aa:	2108      	movs	r1, #8
 80104ac:	4829      	ldr	r0, [pc, #164]	; (8010554 <hw_init+0xf0>)
 80104ae:	f7f9 fdae 	bl	800a00e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80104b2:	2104      	movs	r1, #4
 80104b4:	4827      	ldr	r0, [pc, #156]	; (8010554 <hw_init+0xf0>)
 80104b6:	f7f9 fdaa 	bl	800a00e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80104ba:	2100      	movs	r1, #0
 80104bc:	4825      	ldr	r0, [pc, #148]	; (8010554 <hw_init+0xf0>)
 80104be:	f7f9 fda6 	bl	800a00e <HAL_TIM_PWM_Start>

  diagnostics_timer = HAL_GetTick();
 80104c2:	f7ef ff0f 	bl	80002e4 <HAL_GetTick>
 80104c6:	4602      	mov	r2, r0
 80104c8:	4b23      	ldr	r3, [pc, #140]	; (8010558 <hw_init+0xf4>)
 80104ca:	601a      	str	r2, [r3, #0]

  /* Initialize MPU6050 */
  SD_MPU6050_Result result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,
 80104cc:	2300      	movs	r3, #0
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	2300      	movs	r3, #0
 80104d2:	2200      	movs	r2, #0
 80104d4:	4921      	ldr	r1, [pc, #132]	; (801055c <hw_init+0xf8>)
 80104d6:	4822      	ldr	r0, [pc, #136]	; (8010560 <hw_init+0xfc>)
 80104d8:	f000 fd9a 	bl	8011010 <SD_MPU6050_Init>
 80104dc:	4603      	mov	r3, r0
 80104de:	71fb      	strb	r3, [r7, #7]
		  SD_MPU6050_Gyroscope_250s );

  /* If failed to initialize, blink LED */
  while (result != SD_MPU6050_Result_Ok ){
 80104e0:	e011      	b.n	8010506 <hw_init+0xa2>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80104e2:	2120      	movs	r1, #32
 80104e4:	481f      	ldr	r0, [pc, #124]	; (8010564 <hw_init+0x100>)
 80104e6:	f7f3 fb20 	bl	8003b2a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80104ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80104ee:	f7ef ff05 	bl	80002fc <HAL_Delay>
	  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,
 80104f2:	2301      	movs	r3, #1
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	2300      	movs	r3, #0
 80104f8:	2200      	movs	r2, #0
 80104fa:	4918      	ldr	r1, [pc, #96]	; (801055c <hw_init+0xf8>)
 80104fc:	4818      	ldr	r0, [pc, #96]	; (8010560 <hw_init+0xfc>)
 80104fe:	f000 fd87 	bl	8011010 <SD_MPU6050_Init>
 8010502:	4603      	mov	r3, r0
 8010504:	71fb      	strb	r3, [r7, #7]
  while (result != SD_MPU6050_Result_Ok ){
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d1ea      	bne.n	80104e2 <hw_init+0x7e>
	 		  SD_MPU6050_Gyroscope_500s );
  }

  SD_MPU6050_EnableInterrupts(&hi2c1, &mpu1);
 801050c:	4913      	ldr	r1, [pc, #76]	; (801055c <hw_init+0xf8>)
 801050e:	4814      	ldr	r0, [pc, #80]	; (8010560 <hw_init+0xfc>)
 8010510:	f001 f866 	bl	80115e0 <SD_MPU6050_EnableInterrupts>

  tick = HAL_GetTick();
 8010514:	f7ef fee6 	bl	80002e4 <HAL_GetTick>
 8010518:	4602      	mov	r2, r0
 801051a:	4b13      	ldr	r3, [pc, #76]	; (8010568 <hw_init+0x104>)
 801051c:	601a      	str	r2, [r3, #0]

  /*ESC's must be initialized with 0 power*/
  motor_output(MOTOR_1, 0);
 801051e:	2100      	movs	r1, #0
 8010520:	2001      	movs	r0, #1
 8010522:	f000 fcf9 	bl	8010f18 <motor_output>
  motor_output(MOTOR_2, 0);
 8010526:	2100      	movs	r1, #0
 8010528:	2002      	movs	r0, #2
 801052a:	f000 fcf5 	bl	8010f18 <motor_output>
  motor_output(MOTOR_3, 0);
 801052e:	2100      	movs	r1, #0
 8010530:	2003      	movs	r0, #3
 8010532:	f000 fcf1 	bl	8010f18 <motor_output>
  motor_output(MOTOR_4, 0);
 8010536:	2100      	movs	r1, #0
 8010538:	2004      	movs	r0, #4
 801053a:	f000 fced 	bl	8010f18 <motor_output>

  /*Initialize quadcopter state*/
  initState();
 801053e:	f001 f8df 	bl	8011700 <initState>
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	40020400 	.word	0x40020400
 8010550:	20000078 	.word	0x20000078
 8010554:	200000fc 	.word	0x200000fc
 8010558:	20000178 	.word	0x20000178
 801055c:	20000194 	.word	0x20000194
 8010560:	20000024 	.word	0x20000024
 8010564:	40020000 	.word	0x40020000
 8010568:	20000248 	.word	0x20000248

0801056c <SystemClock_Config>:

void SystemClock_Config(void)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b094      	sub	sp, #80	; 0x50
 8010570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010572:	2300      	movs	r3, #0
 8010574:	60bb      	str	r3, [r7, #8]
 8010576:	4a35      	ldr	r2, [pc, #212]	; (801064c <SystemClock_Config+0xe0>)
 8010578:	4b34      	ldr	r3, [pc, #208]	; (801064c <SystemClock_Config+0xe0>)
 801057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010580:	6413      	str	r3, [r2, #64]	; 0x40
 8010582:	4b32      	ldr	r3, [pc, #200]	; (801064c <SystemClock_Config+0xe0>)
 8010584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801058a:	60bb      	str	r3, [r7, #8]
 801058c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801058e:	2300      	movs	r3, #0
 8010590:	607b      	str	r3, [r7, #4]
 8010592:	4a2f      	ldr	r2, [pc, #188]	; (8010650 <SystemClock_Config+0xe4>)
 8010594:	4b2e      	ldr	r3, [pc, #184]	; (8010650 <SystemClock_Config+0xe4>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801059c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105a0:	6013      	str	r3, [r2, #0]
 80105a2:	4b2b      	ldr	r3, [pc, #172]	; (8010650 <SystemClock_Config+0xe4>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80105aa:	607b      	str	r3, [r7, #4]
 80105ac:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80105ae:	2302      	movs	r3, #2
 80105b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80105b2:	2301      	movs	r3, #1
 80105b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80105b6:	2310      	movs	r3, #16
 80105b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80105ba:	2302      	movs	r3, #2
 80105bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80105be:	2300      	movs	r3, #0
 80105c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80105c2:	2310      	movs	r3, #16
 80105c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80105c6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80105ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80105cc:	2304      	movs	r3, #4
 80105ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80105d0:	2307      	movs	r3, #7
 80105d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80105d4:	f107 0320 	add.w	r3, r7, #32
 80105d8:	4618      	mov	r0, r3
 80105da:	f7f8 fa28 	bl	8008a2e <HAL_RCC_OscConfig>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d003      	beq.n	80105ec <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80105e4:	2161      	movs	r1, #97	; 0x61
 80105e6:	481b      	ldr	r0, [pc, #108]	; (8010654 <SystemClock_Config+0xe8>)
 80105e8:	f000 faae 	bl	8010b48 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80105ec:	230f      	movs	r3, #15
 80105ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80105f0:	2302      	movs	r3, #2
 80105f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80105f4:	2300      	movs	r3, #0
 80105f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80105f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80105fe:	2300      	movs	r3, #0
 8010600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	2102      	movs	r1, #2
 8010608:	4618      	mov	r0, r3
 801060a:	f7f8 fc6b 	bl	8008ee4 <HAL_RCC_ClockConfig>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d003      	beq.n	801061c <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010614:	216f      	movs	r1, #111	; 0x6f
 8010616:	480f      	ldr	r0, [pc, #60]	; (8010654 <SystemClock_Config+0xe8>)
 8010618:	f000 fa96 	bl	8010b48 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801061c:	f7f8 fe72 	bl	8009304 <HAL_RCC_GetHCLKFreq>
 8010620:	4602      	mov	r2, r0
 8010622:	4b0d      	ldr	r3, [pc, #52]	; (8010658 <SystemClock_Config+0xec>)
 8010624:	fba3 2302 	umull	r2, r3, r3, r2
 8010628:	099b      	lsrs	r3, r3, #6
 801062a:	4618      	mov	r0, r3
 801062c:	f7f2 f891 	bl	8002752 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8010630:	2004      	movs	r0, #4
 8010632:	f7f2 f96a 	bl	800290a <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8010636:	2200      	movs	r2, #0
 8010638:	2100      	movs	r1, #0
 801063a:	f04f 30ff 	mov.w	r0, #4294967295
 801063e:	f7f2 f84a 	bl	80026d6 <HAL_NVIC_SetPriority>
}
 8010642:	bf00      	nop
 8010644:	3750      	adds	r7, #80	; 0x50
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	40023800 	.word	0x40023800
 8010650:	40007000 	.word	0x40007000
 8010654:	08013548 	.word	0x08013548
 8010658:	10624dd3 	.word	0x10624dd3

0801065c <MX_ADC1_Init>:

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0

  HAL_ADC_Stop(&hadc1);
 8010662:	4824      	ldr	r0, [pc, #144]	; (80106f4 <MX_ADC1_Init+0x98>)
 8010664:	f7f0 f88e 	bl	8000784 <HAL_ADC_Stop>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc1.Instance = ADC1;
 8010668:	4b22      	ldr	r3, [pc, #136]	; (80106f4 <MX_ADC1_Init+0x98>)
 801066a:	4a23      	ldr	r2, [pc, #140]	; (80106f8 <MX_ADC1_Init+0x9c>)
 801066c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801066e:	4b21      	ldr	r3, [pc, #132]	; (80106f4 <MX_ADC1_Init+0x98>)
 8010670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8010676:	4b1f      	ldr	r3, [pc, #124]	; (80106f4 <MX_ADC1_Init+0x98>)
 8010678:	2200      	movs	r2, #0
 801067a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801067c:	4b1d      	ldr	r3, [pc, #116]	; (80106f4 <MX_ADC1_Init+0x98>)
 801067e:	2200      	movs	r2, #0
 8010680:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8010682:	4b1c      	ldr	r3, [pc, #112]	; (80106f4 <MX_ADC1_Init+0x98>)
 8010684:	2200      	movs	r2, #0
 8010686:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010688:	4b1a      	ldr	r3, [pc, #104]	; (80106f4 <MX_ADC1_Init+0x98>)
 801068a:	2200      	movs	r2, #0
 801068c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801068e:	4b19      	ldr	r3, [pc, #100]	; (80106f4 <MX_ADC1_Init+0x98>)
 8010690:	2200      	movs	r2, #0
 8010692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010694:	4b17      	ldr	r3, [pc, #92]	; (80106f4 <MX_ADC1_Init+0x98>)
 8010696:	4a19      	ldr	r2, [pc, #100]	; (80106fc <MX_ADC1_Init+0xa0>)
 8010698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801069a:	4b16      	ldr	r3, [pc, #88]	; (80106f4 <MX_ADC1_Init+0x98>)
 801069c:	2200      	movs	r2, #0
 801069e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80106a0:	4b14      	ldr	r3, [pc, #80]	; (80106f4 <MX_ADC1_Init+0x98>)
 80106a2:	2201      	movs	r2, #1
 80106a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80106a6:	4b13      	ldr	r3, [pc, #76]	; (80106f4 <MX_ADC1_Init+0x98>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80106ac:	4b11      	ldr	r3, [pc, #68]	; (80106f4 <MX_ADC1_Init+0x98>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80106b2:	4810      	ldr	r0, [pc, #64]	; (80106f4 <MX_ADC1_Init+0x98>)
 80106b4:	f7ef ff38 	bl	8000528 <HAL_ADC_Init>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d003      	beq.n	80106c6 <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80106be:	2196      	movs	r1, #150	; 0x96
 80106c0:	480f      	ldr	r0, [pc, #60]	; (8010700 <MX_ADC1_Init+0xa4>)
 80106c2:	f000 fa41 	bl	8010b48 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ADC_CHANNEL_0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80106ca:	2301      	movs	r3, #1
 80106cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80106ce:	2300      	movs	r3, #0
 80106d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80106d2:	463b      	mov	r3, r7
 80106d4:	4619      	mov	r1, r3
 80106d6:	4807      	ldr	r0, [pc, #28]	; (80106f4 <MX_ADC1_Init+0x98>)
 80106d8:	f7f0 fcdb 	bl	8001092 <HAL_ADC_ConfigChannel>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <MX_ADC1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80106e2:	21a0      	movs	r1, #160	; 0xa0
 80106e4:	4806      	ldr	r0, [pc, #24]	; (8010700 <MX_ADC1_Init+0xa4>)
 80106e6:	f000 fa2f 	bl	8010b48 <_Error_Handler>
  }

}
 80106ea:	bf00      	nop
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	200000b4 	.word	0x200000b4
 80106f8:	40012000 	.word	0x40012000
 80106fc:	0f000001 	.word	0x0f000001
 8010700:	08013548 	.word	0x08013548

08010704 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8010708:	4b15      	ldr	r3, [pc, #84]	; (8010760 <MX_I2C1_Init+0x5c>)
 801070a:	4a16      	ldr	r2, [pc, #88]	; (8010764 <MX_I2C1_Init+0x60>)
 801070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801070e:	4b14      	ldr	r3, [pc, #80]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010710:	4a15      	ldr	r2, [pc, #84]	; (8010768 <MX_I2C1_Init+0x64>)
 8010712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010714:	4b12      	ldr	r3, [pc, #72]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010716:	2200      	movs	r2, #0
 8010718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801071a:	4b11      	ldr	r3, [pc, #68]	; (8010760 <MX_I2C1_Init+0x5c>)
 801071c:	2200      	movs	r2, #0
 801071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010720:	4b0f      	ldr	r3, [pc, #60]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010728:	4b0d      	ldr	r3, [pc, #52]	; (8010760 <MX_I2C1_Init+0x5c>)
 801072a:	2200      	movs	r2, #0
 801072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801072e:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010730:	2200      	movs	r2, #0
 8010732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010734:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010736:	2200      	movs	r2, #0
 8010738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801073a:	4b09      	ldr	r3, [pc, #36]	; (8010760 <MX_I2C1_Init+0x5c>)
 801073c:	2200      	movs	r2, #0
 801073e:	621a      	str	r2, [r3, #32]

  HAL_I2C_DeInit(&hi2c1);
 8010740:	4807      	ldr	r0, [pc, #28]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010742:	f7f3 fb31 	bl	8003da8 <HAL_I2C_DeInit>

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010746:	4806      	ldr	r0, [pc, #24]	; (8010760 <MX_I2C1_Init+0x5c>)
 8010748:	f7f3 fa4e 	bl	8003be8 <HAL_I2C_Init>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d003      	beq.n	801075a <MX_I2C1_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010752:	21b7      	movs	r1, #183	; 0xb7
 8010754:	4805      	ldr	r0, [pc, #20]	; (801076c <MX_I2C1_Init+0x68>)
 8010756:	f000 f9f7 	bl	8010b48 <_Error_Handler>
  }

}
 801075a:	bf00      	nop
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20000024 	.word	0x20000024
 8010764:	40005400 	.word	0x40005400
 8010768:	000186a0 	.word	0x000186a0
 801076c:	08013548 	.word	0x08013548

08010770 <MX_TIM1_Init>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b094      	sub	sp, #80	; 0x50
 8010774:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8010776:	4b58      	ldr	r3, [pc, #352]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010778:	4a58      	ldr	r2, [pc, #352]	; (80108dc <MX_TIM1_Init+0x16c>)
 801077a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIMER1_PRESCALLER;
 801077c:	4b56      	ldr	r3, [pc, #344]	; (80108d8 <MX_TIM1_Init+0x168>)
 801077e:	221c      	movs	r2, #28
 8010780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010782:	4b55      	ldr	r3, [pc, #340]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010784:	2200      	movs	r2, #0
 8010786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIMER1_PERIOD;
 8010788:	4b53      	ldr	r3, [pc, #332]	; (80108d8 <MX_TIM1_Init+0x168>)
 801078a:	f242 7210 	movw	r2, #10000	; 0x2710
 801078e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010790:	4b51      	ldr	r3, [pc, #324]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010792:	2200      	movs	r2, #0
 8010794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8010796:	4b50      	ldr	r3, [pc, #320]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010798:	2200      	movs	r2, #0
 801079a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801079c:	484e      	ldr	r0, [pc, #312]	; (80108d8 <MX_TIM1_Init+0x168>)
 801079e:	f7f8 ff0d 	bl	80095bc <HAL_TIM_Base_Init>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d003      	beq.n	80107b0 <MX_TIM1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80107a8:	21cd      	movs	r1, #205	; 0xcd
 80107aa:	484d      	ldr	r0, [pc, #308]	; (80108e0 <MX_TIM1_Init+0x170>)
 80107ac:	f000 f9cc 	bl	8010b48 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80107b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107b4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80107b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80107ba:	4619      	mov	r1, r3
 80107bc:	4846      	ldr	r0, [pc, #280]	; (80108d8 <MX_TIM1_Init+0x168>)
 80107be:	f7fb fd8d 	bl	800c2dc <HAL_TIM_ConfigClockSource>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d003      	beq.n	80107d0 <MX_TIM1_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 80107c8:	21d3      	movs	r1, #211	; 0xd3
 80107ca:	4845      	ldr	r0, [pc, #276]	; (80108e0 <MX_TIM1_Init+0x170>)
 80107cc:	f000 f9bc 	bl	8010b48 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80107d0:	4841      	ldr	r0, [pc, #260]	; (80108d8 <MX_TIM1_Init+0x168>)
 80107d2:	f7f9 fbad 	bl	8009f30 <HAL_TIM_PWM_Init>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d003      	beq.n	80107e4 <MX_TIM1_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 80107dc:	21d8      	movs	r1, #216	; 0xd8
 80107de:	4840      	ldr	r0, [pc, #256]	; (80108e0 <MX_TIM1_Init+0x170>)
 80107e0:	f000 f9b2 	bl	8010b48 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80107e4:	2300      	movs	r3, #0
 80107e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80107e8:	2300      	movs	r3, #0
 80107ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80107ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80107f0:	4619      	mov	r1, r3
 80107f2:	4839      	ldr	r0, [pc, #228]	; (80108d8 <MX_TIM1_Init+0x168>)
 80107f4:	f7fd fe4c 	bl	800e490 <HAL_TIMEx_MasterConfigSynchronization>
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d003      	beq.n	8010806 <MX_TIM1_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 80107fe:	21df      	movs	r1, #223	; 0xdf
 8010800:	4837      	ldr	r0, [pc, #220]	; (80108e0 <MX_TIM1_Init+0x170>)
 8010802:	f000 f9a1 	bl	8010b48 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010806:	2360      	movs	r3, #96	; 0x60
 8010808:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801080e:	2300      	movs	r3, #0
 8010810:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010812:	2300      	movs	r3, #0
 8010814:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010816:	2300      	movs	r3, #0
 8010818:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801081a:	2300      	movs	r3, #0
 801081c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801081e:	2300      	movs	r3, #0
 8010820:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010822:	f107 031c 	add.w	r3, r7, #28
 8010826:	2200      	movs	r2, #0
 8010828:	4619      	mov	r1, r3
 801082a:	482b      	ldr	r0, [pc, #172]	; (80108d8 <MX_TIM1_Init+0x168>)
 801082c:	f7fb f86c 	bl	800b908 <HAL_TIM_PWM_ConfigChannel>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d003      	beq.n	801083e <MX_TIM1_Init+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010836:	21eb      	movs	r1, #235	; 0xeb
 8010838:	4829      	ldr	r0, [pc, #164]	; (80108e0 <MX_TIM1_Init+0x170>)
 801083a:	f000 f985 	bl	8010b48 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801083e:	f107 031c 	add.w	r3, r7, #28
 8010842:	2204      	movs	r2, #4
 8010844:	4619      	mov	r1, r3
 8010846:	4824      	ldr	r0, [pc, #144]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010848:	f7fb f85e 	bl	800b908 <HAL_TIM_PWM_ConfigChannel>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d003      	beq.n	801085a <MX_TIM1_Init+0xea>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010852:	21f0      	movs	r1, #240	; 0xf0
 8010854:	4822      	ldr	r0, [pc, #136]	; (80108e0 <MX_TIM1_Init+0x170>)
 8010856:	f000 f977 	bl	8010b48 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801085a:	f107 031c 	add.w	r3, r7, #28
 801085e:	2208      	movs	r2, #8
 8010860:	4619      	mov	r1, r3
 8010862:	481d      	ldr	r0, [pc, #116]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010864:	f7fb f850 	bl	800b908 <HAL_TIM_PWM_ConfigChannel>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d003      	beq.n	8010876 <MX_TIM1_Init+0x106>
  {
    _Error_Handler(__FILE__, __LINE__);
 801086e:	21f5      	movs	r1, #245	; 0xf5
 8010870:	481b      	ldr	r0, [pc, #108]	; (80108e0 <MX_TIM1_Init+0x170>)
 8010872:	f000 f969 	bl	8010b48 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8010876:	f107 031c 	add.w	r3, r7, #28
 801087a:	220c      	movs	r2, #12
 801087c:	4619      	mov	r1, r3
 801087e:	4816      	ldr	r0, [pc, #88]	; (80108d8 <MX_TIM1_Init+0x168>)
 8010880:	f7fb f842 	bl	800b908 <HAL_TIM_PWM_ConfigChannel>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d003      	beq.n	8010892 <MX_TIM1_Init+0x122>
  {
    _Error_Handler(__FILE__, __LINE__);
 801088a:	21fa      	movs	r1, #250	; 0xfa
 801088c:	4814      	ldr	r0, [pc, #80]	; (80108e0 <MX_TIM1_Init+0x170>)
 801088e:	f000 f95b 	bl	8010b48 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010892:	2300      	movs	r3, #0
 8010894:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8010896:	2300      	movs	r3, #0
 8010898:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801089a:	2300      	movs	r3, #0
 801089c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 801089e:	2300      	movs	r3, #0
 80108a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80108a2:	2300      	movs	r3, #0
 80108a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80108a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80108ac:	2300      	movs	r3, #0
 80108ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80108b0:	463b      	mov	r3, r7
 80108b2:	4619      	mov	r1, r3
 80108b4:	4808      	ldr	r0, [pc, #32]	; (80108d8 <MX_TIM1_Init+0x168>)
 80108b6:	f7fd fe30 	bl	800e51a <HAL_TIMEx_ConfigBreakDeadTime>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d004      	beq.n	80108ca <MX_TIM1_Init+0x15a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80108c0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80108c4:	4806      	ldr	r0, [pc, #24]	; (80108e0 <MX_TIM1_Init+0x170>)
 80108c6:	f000 f93f 	bl	8010b48 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80108ca:	4803      	ldr	r0, [pc, #12]	; (80108d8 <MX_TIM1_Init+0x168>)
 80108cc:	f001 fbb0 	bl	8012030 <HAL_TIM_MspPostInit>

}
 80108d0:	bf00      	nop
 80108d2:	3750      	adds	r7, #80	; 0x50
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	200000fc 	.word	0x200000fc
 80108dc:	40010000 	.word	0x40010000
 80108e0:	08013548 	.word	0x08013548

080108e4 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b086      	sub	sp, #24
 80108e8:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80108ea:	4b20      	ldr	r3, [pc, #128]	; (801096c <MX_TIM3_Init+0x88>)
 80108ec:	4a20      	ldr	r2, [pc, #128]	; (8010970 <MX_TIM3_Init+0x8c>)
 80108ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIMER3_PRESCALLER;
 80108f0:	4b1e      	ldr	r3, [pc, #120]	; (801096c <MX_TIM3_Init+0x88>)
 80108f2:	221e      	movs	r2, #30
 80108f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80108f6:	4b1d      	ldr	r3, [pc, #116]	; (801096c <MX_TIM3_Init+0x88>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMER3_PERIOD;
 80108fc:	4b1b      	ldr	r3, [pc, #108]	; (801096c <MX_TIM3_Init+0x88>)
 80108fe:	f646 5260 	movw	r2, #28000	; 0x6d60
 8010902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010904:	4b19      	ldr	r3, [pc, #100]	; (801096c <MX_TIM3_Init+0x88>)
 8010906:	2200      	movs	r2, #0
 8010908:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801090a:	4818      	ldr	r0, [pc, #96]	; (801096c <MX_TIM3_Init+0x88>)
 801090c:	f7f8 fe56 	bl	80095bc <HAL_TIM_Base_Init>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d004      	beq.n	8010920 <MX_TIM3_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010916:	f240 111b 	movw	r1, #283	; 0x11b
 801091a:	4816      	ldr	r0, [pc, #88]	; (8010974 <MX_TIM3_Init+0x90>)
 801091c:	f000 f914 	bl	8010b48 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8010926:	f107 0308 	add.w	r3, r7, #8
 801092a:	4619      	mov	r1, r3
 801092c:	480f      	ldr	r0, [pc, #60]	; (801096c <MX_TIM3_Init+0x88>)
 801092e:	f7fb fcd5 	bl	800c2dc <HAL_TIM_ConfigClockSource>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d004      	beq.n	8010942 <MX_TIM3_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010938:	f240 1121 	movw	r1, #289	; 0x121
 801093c:	480d      	ldr	r0, [pc, #52]	; (8010974 <MX_TIM3_Init+0x90>)
 801093e:	f000 f903 	bl	8010b48 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010942:	2320      	movs	r3, #32
 8010944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010946:	2300      	movs	r3, #0
 8010948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801094a:	463b      	mov	r3, r7
 801094c:	4619      	mov	r1, r3
 801094e:	4807      	ldr	r0, [pc, #28]	; (801096c <MX_TIM3_Init+0x88>)
 8010950:	f7fd fd9e 	bl	800e490 <HAL_TIMEx_MasterConfigSynchronization>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d004      	beq.n	8010964 <MX_TIM3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 801095a:	f44f 7194 	mov.w	r1, #296	; 0x128
 801095e:	4805      	ldr	r0, [pc, #20]	; (8010974 <MX_TIM3_Init+0x90>)
 8010960:	f000 f8f2 	bl	8010b48 <_Error_Handler>
  }

}
 8010964:	bf00      	nop
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	20000078 	.word	0x20000078
 8010970:	40000400 	.word	0x40000400
 8010974:	08013548 	.word	0x08013548

08010978 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 801097c:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 801097e:	4a13      	ldr	r2, [pc, #76]	; (80109cc <MX_USART2_UART_Init+0x54>)
 8010980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8010982:	4b11      	ldr	r3, [pc, #68]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 8010984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801098a:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 801098c:	2200      	movs	r2, #0
 801098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010990:	4b0d      	ldr	r3, [pc, #52]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 8010992:	2200      	movs	r2, #0
 8010994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010996:	4b0c      	ldr	r3, [pc, #48]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 8010998:	2200      	movs	r2, #0
 801099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801099c:	4b0a      	ldr	r3, [pc, #40]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 801099e:	220c      	movs	r2, #12
 80109a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80109a2:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80109a8:	4b07      	ldr	r3, [pc, #28]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80109ae:	4806      	ldr	r0, [pc, #24]	; (80109c8 <MX_USART2_UART_Init+0x50>)
 80109b0:	f7fd fe86 	bl	800e6c0 <HAL_UART_Init>
 80109b4:	4603      	mov	r3, r0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d004      	beq.n	80109c4 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80109ba:	f240 113b 	movw	r1, #315	; 0x13b
 80109be:	4804      	ldr	r0, [pc, #16]	; (80109d0 <MX_USART2_UART_Init+0x58>)
 80109c0:	f000 f8c2 	bl	8010b48 <_Error_Handler>
  }

}
 80109c4:	bf00      	nop
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	20000138 	.word	0x20000138
 80109cc:	40004400 	.word	0x40004400
 80109d0:	08013548 	.word	0x08013548

080109d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b08a      	sub	sp, #40	; 0x28
 80109d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80109da:	2300      	movs	r3, #0
 80109dc:	613b      	str	r3, [r7, #16]
 80109de:	4a55      	ldr	r2, [pc, #340]	; (8010b34 <MX_GPIO_Init+0x160>)
 80109e0:	4b54      	ldr	r3, [pc, #336]	; (8010b34 <MX_GPIO_Init+0x160>)
 80109e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109e4:	f043 0304 	orr.w	r3, r3, #4
 80109e8:	6313      	str	r3, [r2, #48]	; 0x30
 80109ea:	4b52      	ldr	r3, [pc, #328]	; (8010b34 <MX_GPIO_Init+0x160>)
 80109ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ee:	f003 0304 	and.w	r3, r3, #4
 80109f2:	613b      	str	r3, [r7, #16]
 80109f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80109f6:	2300      	movs	r3, #0
 80109f8:	60fb      	str	r3, [r7, #12]
 80109fa:	4a4e      	ldr	r2, [pc, #312]	; (8010b34 <MX_GPIO_Init+0x160>)
 80109fc:	4b4d      	ldr	r3, [pc, #308]	; (8010b34 <MX_GPIO_Init+0x160>)
 80109fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a04:	6313      	str	r3, [r2, #48]	; 0x30
 8010a06:	4b4b      	ldr	r3, [pc, #300]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a12:	2300      	movs	r3, #0
 8010a14:	60bb      	str	r3, [r7, #8]
 8010a16:	4a47      	ldr	r2, [pc, #284]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a18:	4b46      	ldr	r3, [pc, #280]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a1c:	f043 0301 	orr.w	r3, r3, #1
 8010a20:	6313      	str	r3, [r2, #48]	; 0x30
 8010a22:	4b44      	ldr	r3, [pc, #272]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a26:	f003 0301 	and.w	r3, r3, #1
 8010a2a:	60bb      	str	r3, [r7, #8]
 8010a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010a2e:	2300      	movs	r3, #0
 8010a30:	607b      	str	r3, [r7, #4]
 8010a32:	4a40      	ldr	r2, [pc, #256]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a34:	4b3f      	ldr	r3, [pc, #252]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a38:	f043 0302 	orr.w	r3, r3, #2
 8010a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a3e:	4b3d      	ldr	r3, [pc, #244]	; (8010b34 <MX_GPIO_Init+0x160>)
 8010a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a42:	f003 0302 	and.w	r3, r3, #2
 8010a46:	607b      	str	r3, [r7, #4]
 8010a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	2120      	movs	r1, #32
 8010a4e:	483a      	ldr	r0, [pc, #232]	; (8010b38 <MX_GPIO_Init+0x164>)
 8010a50:	f7f3 f852 	bl	8003af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8010a54:	2200      	movs	r2, #0
 8010a56:	2120      	movs	r1, #32
 8010a58:	4838      	ldr	r0, [pc, #224]	; (8010b3c <MX_GPIO_Init+0x168>)
 8010a5a:	f7f3 f84d 	bl	8003af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_2 |GPIO_PIN_8, GPIO_PIN_RESET);
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010a64:	4835      	ldr	r0, [pc, #212]	; (8010b3c <MX_GPIO_Init+0x168>)
 8010a66:	f7f3 f847 	bl	8003af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2140      	movs	r1, #64	; 0x40
 8010a6e:	4832      	ldr	r0, [pc, #200]	; (8010b38 <MX_GPIO_Init+0x164>)
 8010a70:	f7f3 f842 	bl	8003af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8010a74:	2200      	movs	r2, #0
 8010a76:	2110      	movs	r1, #16
 8010a78:	4831      	ldr	r0, [pc, #196]	; (8010b40 <MX_GPIO_Init+0x16c>)
 8010a7a:	f7f3 f83d 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2 Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8010a7e:	2320      	movs	r3, #32
 8010a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010a82:	2301      	movs	r3, #1
 8010a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8010a8e:	f107 0314 	add.w	r3, r7, #20
 8010a92:	4619      	mov	r1, r3
 8010a94:	4828      	ldr	r0, [pc, #160]	; (8010b38 <MX_GPIO_Init+0x164>)
 8010a96:	f7f2 fdb1 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8010a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010aa0:	4b28      	ldr	r3, [pc, #160]	; (8010b44 <MX_GPIO_Init+0x170>)
 8010aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8010aa8:	f107 0314 	add.w	r3, r7, #20
 8010aac:	4619      	mov	r1, r3
 8010aae:	4824      	ldr	r0, [pc, #144]	; (8010b40 <MX_GPIO_Init+0x16c>)
 8010ab0:	f7f2 fda4 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050 INT Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_PIN;
 8010ab4:	2310      	movs	r3, #16
 8010ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010abc:	2300      	movs	r3, #0
 8010abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MPU6050_PORT, &GPIO_InitStruct);
 8010ac4:	f107 0314 	add.w	r3, r7, #20
 8010ac8:	4619      	mov	r1, r3
 8010aca:	481c      	ldr	r0, [pc, #112]	; (8010b3c <MX_GPIO_Init+0x168>)
 8010acc:	f7f2 fd96 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050 Power Pin */
  GPIO_InitStruct.Pin = MPU6050_POWER_PIN;
 8010ad0:	2320      	movs	r3, #32
 8010ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010adc:	2300      	movs	r3, #0
 8010ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MPU6050_PORT, &GPIO_InitStruct);
 8010ae0:	f107 0314 	add.w	r3, r7, #20
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	4815      	ldr	r0, [pc, #84]	; (8010b3c <MX_GPIO_Init+0x168>)
 8010ae8:	f7f2 fd88 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GND pins*/
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_8;
 8010aec:	f44f 7383 	mov.w	r3, #262	; 0x106
 8010af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010af2:	2301      	movs	r3, #1
 8010af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010af6:	2300      	movs	r3, #0
 8010af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010afa:	2300      	movs	r3, #0
 8010afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010afe:	f107 0314 	add.w	r3, r7, #20
 8010b02:	4619      	mov	r1, r3
 8010b04:	480d      	ldr	r0, [pc, #52]	; (8010b3c <MX_GPIO_Init+0x168>)
 8010b06:	f7f2 fd79 	bl	80035fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8010b0a:	2340      	movs	r3, #64	; 0x40
 8010b0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b0e:	f107 0314 	add.w	r3, r7, #20
 8010b12:	4619      	mov	r1, r3
 8010b14:	4808      	ldr	r0, [pc, #32]	; (8010b38 <MX_GPIO_Init+0x164>)
 8010b16:	f7f2 fd71 	bl	80035fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010b1a:	2310      	movs	r3, #16
 8010b1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010b1e:	f107 0314 	add.w	r3, r7, #20
 8010b22:	4619      	mov	r1, r3
 8010b24:	4806      	ldr	r0, [pc, #24]	; (8010b40 <MX_GPIO_Init+0x16c>)
 8010b26:	f7f2 fd69 	bl	80035fc <HAL_GPIO_Init>

}
 8010b2a:	bf00      	nop
 8010b2c:	3728      	adds	r7, #40	; 0x28
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	40023800 	.word	0x40023800
 8010b38:	40020000 	.word	0x40020000
 8010b3c:	40020400 	.word	0x40020400
 8010b40:	40020800 	.word	0x40020800
 8010b44:	10210000 	.word	0x10210000

08010b48 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8010b52:	e7fe      	b.n	8010b52 <_Error_Handler+0xa>

08010b54 <initKalman>:
 */

#include "Kalman.h"

void initKalman(Kalman* kalman)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
    kalman->Q_angle = 0.001f;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4a13      	ldr	r2, [pc, #76]	; (8010bac <initKalman+0x58>)
 8010b60:	601a      	str	r2, [r3, #0]
    kalman->Q_bias = 0.003f;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4a12      	ldr	r2, [pc, #72]	; (8010bb0 <initKalman+0x5c>)
 8010b66:	605a      	str	r2, [r3, #4]
    kalman->R_measure = 0.03f;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	4a12      	ldr	r2, [pc, #72]	; (8010bb4 <initKalman+0x60>)
 8010b6c:	609a      	str	r2, [r3, #8]

    kalman->angle = 0.0f; // Reset the angle
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f04f 0200 	mov.w	r2, #0
 8010b74:	60da      	str	r2, [r3, #12]
    kalman->bias = 0.0f; // Reset bias
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f04f 0200 	mov.w	r2, #0
 8010b7c:	611a      	str	r2, [r3, #16]

    kalman->P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f04f 0200 	mov.w	r2, #0
 8010b84:	619a      	str	r2, [r3, #24]
    kalman->P[0][1] = 0.0f;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f04f 0200 	mov.w	r2, #0
 8010b8c:	61da      	str	r2, [r3, #28]
    kalman->P[1][0] = 0.0f;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f04f 0200 	mov.w	r2, #0
 8010b94:	621a      	str	r2, [r3, #32]
    kalman->P[1][1] = 0.0f;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f04f 0200 	mov.w	r2, #0
 8010b9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010b9e:	bf00      	nop
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	3a83126f 	.word	0x3a83126f
 8010bb0:	3b449ba6 	.word	0x3b449ba6
 8010bb4:	3cf5c28f 	.word	0x3cf5c28f

08010bb8 <getAngle>:


float getAngle(Kalman* kalman, float newAngle, float newRate, float dt) {
 8010bb8:	b480      	push	{r7}
 8010bba:	b08b      	sub	sp, #44	; 0x2c
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8010bc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8010bc8:	ed87 1a00 	vstr	s2, [r7]
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    kalman->rate = newRate - kalman->bias;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	edd3 7a04 	vldr	s15, [r3, #16]
 8010bd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8010bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->angle += dt * kalman->rate;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	ed93 7a03 	vldr	s14, [r3, #12]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	edd3 6a05 	vldr	s13, [r3, #20]
 8010bec:	edd7 7a00 	vldr	s15, [r7]
 8010bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	ed93 7a06 	vldr	s14, [r3, #24]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8010c0a:	edd7 7a00 	vldr	s15, [r7]
 8010c0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	edd3 7a07 	vldr	s15, [r3, #28]
 8010c18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8010c22:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	edd3 7a00 	vldr	s15, [r3]
 8010c2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010c30:	edd7 7a00 	vldr	s15, [r7]
 8010c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	edc3 7a06 	vstr	s15, [r3, #24]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	ed93 7a07 	vldr	s14, [r3, #28]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8010c4e:	edd7 7a00 	vldr	s15, [r7]
 8010c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	edc3 7a07 	vstr	s15, [r3, #28]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	ed93 7a08 	vldr	s14, [r3, #32]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8010c6c:	edd7 7a00 	vldr	s15, [r7]
 8010c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	edc3 7a08 	vstr	s15, [r3, #32]
    kalman->P[1][1] += kalman->Q_bias * dt;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	edd3 6a01 	vldr	s13, [r3, #4]
 8010c8a:	edd7 7a00 	vldr	s15, [r7]
 8010c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = kalman->P[0][0] + kalman->R_measure; // Estimate error
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8010ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = kalman->P[0][0] / S;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	edd3 6a06 	vldr	s13, [r3, #24]
 8010cb6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cbe:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = kalman->P[1][0] / S;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	edd3 6a08 	vldr	s13, [r3, #32]
 8010cc8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cd0:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - kalman->angle; // Angle difference
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8010cda:	ed97 7a02 	vldr	s14, [r7, #8]
 8010cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ce2:	edc7 7a08 	vstr	s15, [r7, #32]
    /* Step 6 */
    kalman->angle += K[0] * y;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	ed93 7a03 	vldr	s14, [r3, #12]
 8010cec:	edd7 6a04 	vldr	s13, [r7, #16]
 8010cf0:	edd7 7a08 	vldr	s15, [r7, #32]
 8010cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->bias += K[1] * y;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	ed93 7a04 	vldr	s14, [r3, #16]
 8010d08:	edd7 6a05 	vldr	s13, [r7, #20]
 8010d0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = kalman->P[0][0];
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	61fb      	str	r3, [r7, #28]
    float P01_temp = kalman->P[0][1];
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	69db      	ldr	r3, [r3, #28]
 8010d28:	61bb      	str	r3, [r7, #24]

    kalman->P[0][0] -= K[0] * P00_temp;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d30:	edd7 6a04 	vldr	s13, [r7, #16]
 8010d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	edc3 7a06 	vstr	s15, [r3, #24]
    kalman->P[0][1] -= K[0] * P01_temp;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	ed93 7a07 	vldr	s14, [r3, #28]
 8010d4c:	edd7 6a04 	vldr	s13, [r7, #16]
 8010d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	edc3 7a07 	vstr	s15, [r3, #28]
    kalman->P[1][0] -= K[1] * P00_temp;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	ed93 7a08 	vldr	s14, [r3, #32]
 8010d68:	edd7 6a05 	vldr	s13, [r7, #20]
 8010d6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	edc3 7a08 	vstr	s15, [r3, #32]
    kalman->P[1][1] -= K[1] * P01_temp;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010d84:	edd7 6a05 	vldr	s13, [r7, #20]
 8010d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return kalman->angle;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	ee07 3a90 	vmov	s15, r3
};
 8010da2:	eeb0 0a67 	vmov.f32	s0, s15
 8010da6:	372c      	adds	r7, #44	; 0x2c
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <setAngle>:

void setAngle(Kalman* kalman, float angle) { kalman->angle = angle; }; // Used to set angle, this should be set as the starting angle
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	ed87 0a00 	vstr	s0, [r7]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	60da      	str	r2, [r3, #12]
 8010dc2:	bf00      	nop
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <getRate>:
float getRate(Kalman* kalman) { return kalman->rate; }; // Return the unbiased rate
 8010dce:	b480      	push	{r7}
 8010dd0:	b083      	sub	sp, #12
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	695b      	ldr	r3, [r3, #20]
 8010dda:	ee07 3a90 	vmov	s15, r3
 8010dde:	eeb0 0a67 	vmov.f32	s0, s15
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <setQangle>:

/* These are used to tune the Kalman filter */
void setQangle(Kalman* kalman, float Q_angle) { kalman->Q_angle = Q_angle; };
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	ed87 0a00 	vstr	s0, [r7]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	683a      	ldr	r2, [r7, #0]
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	bf00      	nop
 8010e00:	370c      	adds	r7, #12
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr

08010e0a <setQbias>:
void setQbias(Kalman* kalman, float Q_bias) { kalman->Q_bias = Q_bias; };
 8010e0a:	b480      	push	{r7}
 8010e0c:	b083      	sub	sp, #12
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	ed87 0a00 	vstr	s0, [r7]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	683a      	ldr	r2, [r7, #0]
 8010e1a:	605a      	str	r2, [r3, #4]
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <setRmeasure>:
void setRmeasure(Kalman* kalman, float R_measure) { kalman->R_measure = R_measure; };
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	ed87 0a00 	vstr	s0, [r7]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	609a      	str	r2, [r3, #8]
 8010e3a:	bf00      	nop
 8010e3c:	370c      	adds	r7, #12
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <getQangle>:

float getQangle(Kalman* kalman) { return kalman->Q_angle; };
 8010e46:	b480      	push	{r7}
 8010e48:	b083      	sub	sp, #12
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	ee07 3a90 	vmov	s15, r3
 8010e56:	eeb0 0a67 	vmov.f32	s0, s15
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr

08010e64 <getQbias>:
float getQbias(Kalman* kalman) { return kalman->Q_bias; };
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	ee07 3a90 	vmov	s15, r3
 8010e74:	eeb0 0a67 	vmov.f32	s0, s15
 8010e78:	370c      	adds	r7, #12
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr

08010e82 <getRmeasure>:
float getRmeasure(Kalman* kalman) { return kalman->R_measure; };
 8010e82:	b480      	push	{r7}
 8010e84:	b083      	sub	sp, #12
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	ee07 3a90 	vmov	s15, r3
 8010e92:	eeb0 0a67 	vmov.f32	s0, s15
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <NVIC_EnableIRQ>:
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010eaa:	4909      	ldr	r1, [pc, #36]	; (8010ed0 <NVIC_EnableIRQ+0x30>)
 8010eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eb0:	095b      	lsrs	r3, r3, #5
 8010eb2:	79fa      	ldrb	r2, [r7, #7]
 8010eb4:	f002 021f 	and.w	r2, r2, #31
 8010eb8:	2001      	movs	r0, #1
 8010eba:	fa00 f202 	lsl.w	r2, r0, r2
 8010ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010ec2:	bf00      	nop
 8010ec4:	370c      	adds	r7, #12
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	e000e100 	.word	0xe000e100

08010ed4 <main>:
//
/*************************************************************/


int main(void)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0

  hw_init();
 8010eda:	f7ff fac3 	bl	8010464 <hw_init>


  while (1)
  {
	/*After initializations, listen() is called*/
	listen_status = listen();
 8010ede:	f000 fe71 	bl	8011bc4 <listen>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	71fb      	strb	r3, [r7, #7]

//	/*LED to indicate traffic*/
//	if (listen_status == SERIAL_OK) HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	/*Re-enable timer 3 interrupt*/
	NVIC_EnableIRQ(TIM3_IRQn);
 8010ee6:	201d      	movs	r0, #29
 8010ee8:	f7ff ffda 	bl	8010ea0 <NVIC_EnableIRQ>
	listen_status = listen();
 8010eec:	e7f7      	b.n	8010ede <main+0xa>

08010eee <HardFault_Handler>:
  }
}

void HardFault_Handler(void)
{
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	af00      	add	r7, sp, #0
   motor_output(MOTOR_1, 0);
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	2001      	movs	r0, #1
 8010ef6:	f000 f80f 	bl	8010f18 <motor_output>
   motor_output(MOTOR_2, 0);
 8010efa:	2100      	movs	r1, #0
 8010efc:	2002      	movs	r0, #2
 8010efe:	f000 f80b 	bl	8010f18 <motor_output>
   motor_output(MOTOR_3, 0);
 8010f02:	2100      	movs	r1, #0
 8010f04:	2003      	movs	r0, #3
 8010f06:	f000 f807 	bl	8010f18 <motor_output>
   motor_output(MOTOR_4, 0);
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	2004      	movs	r0, #4
 8010f0e:	f000 f803 	bl	8010f18 <motor_output>
   while(1);
 8010f12:	e7fe      	b.n	8010f12 <HardFault_Handler+0x24>
 8010f14:	0000      	movs	r0, r0
	...

08010f18 <motor_output>:
#include "motor_control.h"
#include "math.h"

extern TIM_HandleTypeDef htim1;

void motor_output(uint16_t MOTOR, uint16_t value){
 8010f18:	b590      	push	{r4, r7, lr}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	4603      	mov	r3, r0
 8010f20:	460a      	mov	r2, r1
 8010f22:	80fb      	strh	r3, [r7, #6]
 8010f24:	4613      	mov	r3, r2
 8010f26:	80bb      	strh	r3, [r7, #4]

  /* convert to microseconds (T-ON duration of the pwm pulse)*/
  uint32_t microseconds = (uint32_t)round(0.9*(double)value) + 1100;
 8010f28:	88bb      	ldrh	r3, [r7, #4]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f001 fc5a 	bl	80127e4 <__aeabi_ui2d>
 8010f30:	a335      	add	r3, pc, #212	; (adr r3, 8011008 <motor_output+0xf0>)
 8010f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f36:	f001 fccb 	bl	80128d0 <__aeabi_dmul>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	ec44 3b17 	vmov	d7, r3, r4
 8010f42:	eeb0 0a47 	vmov.f32	s0, s14
 8010f46:	eef0 0a67 	vmov.f32	s1, s15
 8010f4a:	f002 f819 	bl	8012f80 <round>
 8010f4e:	ec54 3b10 	vmov	r3, r4, d0
 8010f52:	4618      	mov	r0, r3
 8010f54:	4621      	mov	r1, r4
 8010f56:	f001 ff55 	bl	8012e04 <__aeabi_d2uiz>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8010f60:	60fb      	str	r3, [r7, #12]

  /*saturate output*/
  if (microseconds < 0) microseconds = 0;
  if (microseconds > 1750) microseconds = 1750;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d902      	bls.n	8010f72 <motor_output+0x5a>
 8010f6c:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8010f70:	60fb      	str	r3, [r7, #12]

  /* Calculate the value of the output compare register*/
  uint32_t OC_REG = TIMER1_PERIOD * PWM_FREQUENCY / 1e3;
 8010f72:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010f76:	60bb      	str	r3, [r7, #8]
  OC_REG = OC_REG * microseconds / 1e3;
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	fb02 f303 	mul.w	r3, r2, r3
 8010f80:	4618      	mov	r0, r3
 8010f82:	f001 fc2f 	bl	80127e4 <__aeabi_ui2d>
 8010f86:	f04f 0200 	mov.w	r2, #0
 8010f8a:	4b1d      	ldr	r3, [pc, #116]	; (8011000 <motor_output+0xe8>)
 8010f8c:	f001 fdca 	bl	8012b24 <__aeabi_ddiv>
 8010f90:	4603      	mov	r3, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4618      	mov	r0, r3
 8010f96:	4621      	mov	r1, r4
 8010f98:	f001 ff34 	bl	8012e04 <__aeabi_d2uiz>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	60bb      	str	r3, [r7, #8]

  switch (MOTOR) {
 8010fa0:	88fb      	ldrh	r3, [r7, #6]
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d825      	bhi.n	8010ff4 <motor_output+0xdc>
 8010fa8:	a201      	add	r2, pc, #4	; (adr r2, 8010fb0 <motor_output+0x98>)
 8010faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fae:	bf00      	nop
 8010fb0:	08010fc1 	.word	0x08010fc1
 8010fb4:	08010fcb 	.word	0x08010fcb
 8010fb8:	08010fd9 	.word	0x08010fd9
 8010fbc:	08010fe7 	.word	0x08010fe7
    case 1:
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, OC_REG);
 8010fc0:	4b10      	ldr	r3, [pc, #64]	; (8011004 <motor_output+0xec>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8010fc8:	e014      	b.n	8010ff4 <motor_output+0xdc>
    case 2:
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, OC_REG);
 8010fca:	4b0e      	ldr	r3, [pc, #56]	; (8011004 <motor_output+0xec>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	3334      	adds	r3, #52	; 0x34
 8010fd0:	3304      	adds	r3, #4
 8010fd2:	68ba      	ldr	r2, [r7, #8]
 8010fd4:	601a      	str	r2, [r3, #0]
      break;
 8010fd6:	e00d      	b.n	8010ff4 <motor_output+0xdc>
    case 3:
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, OC_REG);
 8010fd8:	4b0a      	ldr	r3, [pc, #40]	; (8011004 <motor_output+0xec>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	3334      	adds	r3, #52	; 0x34
 8010fde:	3308      	adds	r3, #8
 8010fe0:	68ba      	ldr	r2, [r7, #8]
 8010fe2:	601a      	str	r2, [r3, #0]
      break;
 8010fe4:	e006      	b.n	8010ff4 <motor_output+0xdc>
    case 4:
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, OC_REG);
 8010fe6:	4b07      	ldr	r3, [pc, #28]	; (8011004 <motor_output+0xec>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	3334      	adds	r3, #52	; 0x34
 8010fec:	330c      	adds	r3, #12
 8010fee:	68ba      	ldr	r2, [r7, #8]
 8010ff0:	601a      	str	r2, [r3, #0]
      break;
 8010ff2:	bf00      	nop
  }
}
 8010ff4:	bf00      	nop
 8010ff6:	3714      	adds	r7, #20
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd90      	pop	{r4, r7, pc}
 8010ffc:	f3af 8000 	nop.w
 8011000:	408f4000 	.word	0x408f4000
 8011004:	200000fc 	.word	0x200000fc
 8011008:	cccccccd 	.word	0xcccccccd
 801100c:	3feccccc 	.word	0x3feccccc

08011010 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b08a      	sub	sp, #40	; 0x28
 8011014:	af02      	add	r7, sp, #8
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	4611      	mov	r1, r2
 801101c:	461a      	mov	r2, r3
 801101e:	460b      	mov	r3, r1
 8011020:	71fb      	strb	r3, [r7, #7]
 8011022:	4613      	mov	r3, r2
 8011024:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8011026:	2375      	movs	r3, #117	; 0x75
 8011028:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 801102e:	79fb      	ldrb	r3, [r7, #7]
 8011030:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8011034:	b2da      	uxtb	r2, r3
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8011040:	7efb      	ldrb	r3, [r7, #27]
 8011042:	b299      	uxth	r1, r3
 8011044:	2305      	movs	r3, #5
 8011046:	2202      	movs	r2, #2
 8011048:	69f8      	ldr	r0, [r7, #28]
 801104a:	f7f5 fc2d 	bl	80068a8 <HAL_I2C_IsDeviceReady>
 801104e:	4603      	mov	r3, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	d001      	beq.n	8011058 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8011054:	2301      	movs	r3, #1
 8011056:	e04c      	b.n	80110f2 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8011058:	7efb      	ldrb	r3, [r7, #27]
 801105a:	b299      	uxth	r1, r3
 801105c:	f107 021a 	add.w	r2, r7, #26
 8011060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	2301      	movs	r3, #1
 8011068:	69f8      	ldr	r0, [r7, #28]
 801106a:	f7f2 fee0 	bl	8003e2e <HAL_I2C_Master_Transmit>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d001      	beq.n	8011078 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8011074:	2301      	movs	r3, #1
 8011076:	e03c      	b.n	80110f2 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8011078:	7efb      	ldrb	r3, [r7, #27]
 801107a:	b299      	uxth	r1, r3
 801107c:	f107 0219 	add.w	r2, r7, #25
 8011080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	2301      	movs	r3, #1
 8011088:	69f8      	ldr	r0, [r7, #28]
 801108a:	f7f2 ffdd 	bl	8004048 <HAL_I2C_Master_Receive>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d003      	beq.n	801109c <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8011094:	2301      	movs	r3, #1
 8011096:	e02c      	b.n	80110f2 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8011098:	2303      	movs	r3, #3
 801109a:	e02a      	b.n	80110f2 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 801109c:	bf00      	nop
 801109e:	7e7b      	ldrb	r3, [r7, #25]
 80110a0:	2b68      	cmp	r3, #104	; 0x68
 80110a2:	d1f9      	bne.n	8011098 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 80110a4:	236b      	movs	r3, #107	; 0x6b
 80110a6:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 80110a8:	2300      	movs	r3, #0
 80110aa:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80110ac:	7efb      	ldrb	r3, [r7, #27]
 80110ae:	b299      	uxth	r1, r3
 80110b0:	f107 0214 	add.w	r2, r7, #20
 80110b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	2302      	movs	r3, #2
 80110bc:	69f8      	ldr	r0, [r7, #28]
 80110be:	f7f2 feb6 	bl	8003e2e <HAL_I2C_Master_Transmit>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 80110c8:	2301      	movs	r3, #1
 80110ca:	e012      	b.n	80110f2 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 80110cc:	2207      	movs	r2, #7
 80110ce:	68b9      	ldr	r1, [r7, #8]
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f000 f812 	bl	80110fa <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80110d6:	79bb      	ldrb	r3, [r7, #6]
 80110d8:	461a      	mov	r2, r3
 80110da:	68b9      	ldr	r1, [r7, #8]
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f000 f830 	bl	8011142 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80110e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80110e6:	461a      	mov	r2, r3
 80110e8:	68b9      	ldr	r1, [r7, #8]
 80110ea:	68f8      	ldr	r0, [r7, #12]
 80110ec:	f000 f898 	bl	8011220 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80110f0:	2300      	movs	r3, #0
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3720      	adds	r7, #32
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b088      	sub	sp, #32
 80110fe:	af02      	add	r7, sp, #8
 8011100:	60f8      	str	r0, [r7, #12]
 8011102:	60b9      	str	r1, [r7, #8]
 8011104:	4613      	mov	r3, r2
 8011106:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8011112:	2319      	movs	r3, #25
 8011114:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 801111a:	bf00      	nop
 801111c:	7cfb      	ldrb	r3, [r7, #19]
 801111e:	b299      	uxth	r1, r3
 8011120:	f107 0210 	add.w	r2, r7, #16
 8011124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	2302      	movs	r3, #2
 801112c:	6978      	ldr	r0, [r7, #20]
 801112e:	f7f2 fe7e 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d1f1      	bne.n	801111c <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3718      	adds	r7, #24
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b088      	sub	sp, #32
 8011146:	af02      	add	r7, sp, #8
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	60b9      	str	r1, [r7, #8]
 801114c:	4613      	mov	r3, r2
 801114e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 801115a:	231c      	movs	r3, #28
 801115c:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 801115e:	bf00      	nop
 8011160:	7cfb      	ldrb	r3, [r7, #19]
 8011162:	b299      	uxth	r1, r3
 8011164:	f107 0211 	add.w	r2, r7, #17
 8011168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801116c:	9300      	str	r3, [sp, #0]
 801116e:	2301      	movs	r3, #1
 8011170:	6978      	ldr	r0, [r7, #20]
 8011172:	f7f2 fe5c 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1f1      	bne.n	8011160 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 801117c:	bf00      	nop
 801117e:	7cfb      	ldrb	r3, [r7, #19]
 8011180:	b299      	uxth	r1, r3
 8011182:	f107 0212 	add.w	r2, r7, #18
 8011186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	2301      	movs	r3, #1
 801118e:	6978      	ldr	r0, [r7, #20]
 8011190:	f7f2 ff5a 	bl	8004048 <HAL_I2C_Master_Receive>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d1f1      	bne.n	801117e <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 801119a:	7cbb      	ldrb	r3, [r7, #18]
 801119c:	b25b      	sxtb	r3, r3
 801119e:	f023 0318 	bic.w	r3, r3, #24
 80111a2:	b25a      	sxtb	r2, r3
 80111a4:	79fb      	ldrb	r3, [r7, #7]
 80111a6:	00db      	lsls	r3, r3, #3
 80111a8:	b25b      	sxtb	r3, r3
 80111aa:	4313      	orrs	r3, r2
 80111ac:	b25b      	sxtb	r3, r3
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80111b2:	bf00      	nop
 80111b4:	7cfb      	ldrb	r3, [r7, #19]
 80111b6:	b299      	uxth	r1, r3
 80111b8:	f107 0212 	add.w	r2, r7, #18
 80111bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	2301      	movs	r3, #1
 80111c4:	6978      	ldr	r0, [r7, #20]
 80111c6:	f7f2 fe32 	bl	8003e2e <HAL_I2C_Master_Transmit>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d1f1      	bne.n	80111b4 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80111d0:	79fb      	ldrb	r3, [r7, #7]
 80111d2:	2b03      	cmp	r3, #3
 80111d4:	d81e      	bhi.n	8011214 <SD_MPU6050_SetAccelerometer+0xd2>
 80111d6:	a201      	add	r2, pc, #4	; (adr r2, 80111dc <SD_MPU6050_SetAccelerometer+0x9a>)
 80111d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111dc:	080111ed 	.word	0x080111ed
 80111e0:	080111f7 	.word	0x080111f7
 80111e4:	08011201 	.word	0x08011201
 80111e8:	0801120b 	.word	0x0801120b
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80111f2:	609a      	str	r2, [r3, #8]
			break;
 80111f4:	e00f      	b.n	8011216 <SD_MPU6050_SetAccelerometer+0xd4>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80111fc:	609a      	str	r2, [r3, #8]
			break;
 80111fe:	e00a      	b.n	8011216 <SD_MPU6050_SetAccelerometer+0xd4>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8011206:	609a      	str	r2, [r3, #8]
			break;
 8011208:	e005      	b.n	8011216 <SD_MPU6050_SetAccelerometer+0xd4>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8011210:	609a      	str	r2, [r3, #8]
			break;
 8011212:	e000      	b.n	8011216 <SD_MPU6050_SetAccelerometer+0xd4>
		default:
			break;
 8011214:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8011216:	2300      	movs	r3, #0
}
 8011218:	4618      	mov	r0, r3
 801121a:	3718      	adds	r7, #24
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af02      	add	r7, sp, #8
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	4613      	mov	r3, r2
 801122c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8011238:	231b      	movs	r3, #27
 801123a:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 801123c:	bf00      	nop
 801123e:	7cfb      	ldrb	r3, [r7, #19]
 8011240:	b299      	uxth	r1, r3
 8011242:	f107 0211 	add.w	r2, r7, #17
 8011246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	2301      	movs	r3, #1
 801124e:	6978      	ldr	r0, [r7, #20]
 8011250:	f7f2 fded 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d1f1      	bne.n	801123e <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 801125a:	bf00      	nop
 801125c:	7cfb      	ldrb	r3, [r7, #19]
 801125e:	b299      	uxth	r1, r3
 8011260:	f107 0212 	add.w	r2, r7, #18
 8011264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	2301      	movs	r3, #1
 801126c:	6978      	ldr	r0, [r7, #20]
 801126e:	f7f2 feeb 	bl	8004048 <HAL_I2C_Master_Receive>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1f1      	bne.n	801125c <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8011278:	7cbb      	ldrb	r3, [r7, #18]
 801127a:	b25b      	sxtb	r3, r3
 801127c:	f023 0318 	bic.w	r3, r3, #24
 8011280:	b25a      	sxtb	r2, r3
 8011282:	79fb      	ldrb	r3, [r7, #7]
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	b25b      	sxtb	r3, r3
 8011288:	4313      	orrs	r3, r2
 801128a:	b25b      	sxtb	r3, r3
 801128c:	b2db      	uxtb	r3, r3
 801128e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8011290:	bf00      	nop
 8011292:	7cfb      	ldrb	r3, [r7, #19]
 8011294:	b299      	uxth	r1, r3
 8011296:	f107 0212 	add.w	r2, r7, #18
 801129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	2301      	movs	r3, #1
 80112a2:	6978      	ldr	r0, [r7, #20]
 80112a4:	f7f2 fdc3 	bl	8003e2e <HAL_I2C_Master_Transmit>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d1f1      	bne.n	8011292 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80112ae:	79fb      	ldrb	r3, [r7, #7]
 80112b0:	2b03      	cmp	r3, #3
 80112b2:	d81b      	bhi.n	80112ec <SD_MPU6050_SetGyroscope+0xcc>
 80112b4:	a201      	add	r2, pc, #4	; (adr r2, 80112bc <SD_MPU6050_SetGyroscope+0x9c>)
 80112b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ba:	bf00      	nop
 80112bc:	080112cd 	.word	0x080112cd
 80112c0:	080112d5 	.word	0x080112d5
 80112c4:	080112dd 	.word	0x080112dd
 80112c8:	080112e5 	.word	0x080112e5
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	4a0a      	ldr	r2, [pc, #40]	; (80112f8 <SD_MPU6050_SetGyroscope+0xd8>)
 80112d0:	605a      	str	r2, [r3, #4]
				break;
 80112d2:	e00c      	b.n	80112ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	4a09      	ldr	r2, [pc, #36]	; (80112fc <SD_MPU6050_SetGyroscope+0xdc>)
 80112d8:	605a      	str	r2, [r3, #4]
				break;
 80112da:	e008      	b.n	80112ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	4a08      	ldr	r2, [pc, #32]	; (8011300 <SD_MPU6050_SetGyroscope+0xe0>)
 80112e0:	605a      	str	r2, [r3, #4]
				break;
 80112e2:	e004      	b.n	80112ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	4a07      	ldr	r2, [pc, #28]	; (8011304 <SD_MPU6050_SetGyroscope+0xe4>)
 80112e8:	605a      	str	r2, [r3, #4]
				break;
 80112ea:	e000      	b.n	80112ee <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 80112ec:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80112ee:	2300      	movs	r3, #0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3718      	adds	r7, #24
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	3bfa232d 	.word	0x3bfa232d
 80112fc:	3c7a232d 	.word	0x3c7a232d
 8011300:	3cf9c190 	.word	0x3cf9c190
 8011304:	3d79c190 	.word	0x3d79c190

08011308 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b088      	sub	sp, #32
 801130c:	af02      	add	r7, sp, #8
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8011312:	233b      	movs	r3, #59	; 0x3b
 8011314:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8011320:	bf00      	nop
 8011322:	7cfb      	ldrb	r3, [r7, #19]
 8011324:	b299      	uxth	r1, r3
 8011326:	f107 020b 	add.w	r2, r7, #11
 801132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	2301      	movs	r3, #1
 8011332:	6978      	ldr	r0, [r7, #20]
 8011334:	f7f2 fd7b 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1f1      	bne.n	8011322 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 801133e:	bf00      	nop
 8011340:	7cfb      	ldrb	r3, [r7, #19]
 8011342:	b299      	uxth	r1, r3
 8011344:	f107 020c 	add.w	r2, r7, #12
 8011348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801134c:	9300      	str	r3, [sp, #0]
 801134e:	2306      	movs	r3, #6
 8011350:	6978      	ldr	r0, [r7, #20]
 8011352:	f7f2 fe79 	bl	8004048 <HAL_I2C_Master_Receive>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1f1      	bne.n	8011340 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 801135c:	7b3b      	ldrb	r3, [r7, #12]
 801135e:	021b      	lsls	r3, r3, #8
 8011360:	b21a      	sxth	r2, r3
 8011362:	7b7b      	ldrb	r3, [r7, #13]
 8011364:	b21b      	sxth	r3, r3
 8011366:	4313      	orrs	r3, r2
 8011368:	b21a      	sxth	r2, r3
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 801136e:	7bbb      	ldrb	r3, [r7, #14]
 8011370:	021b      	lsls	r3, r3, #8
 8011372:	b21a      	sxth	r2, r3
 8011374:	7bfb      	ldrb	r3, [r7, #15]
 8011376:	b21b      	sxth	r3, r3
 8011378:	4313      	orrs	r3, r2
 801137a:	b21a      	sxth	r2, r3
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8011380:	7c3b      	ldrb	r3, [r7, #16]
 8011382:	021b      	lsls	r3, r3, #8
 8011384:	b21a      	sxth	r2, r3
 8011386:	7c7b      	ldrb	r3, [r7, #17]
 8011388:	b21b      	sxth	r3, r3
 801138a:	4313      	orrs	r3, r2
 801138c:	b21a      	sxth	r2, r3
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8011392:	2300      	movs	r3, #0
}
 8011394:	4618      	mov	r0, r3
 8011396:	3718      	adds	r7, #24
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b088      	sub	sp, #32
 80113a0:	af02      	add	r7, sp, #8
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80113a6:	2343      	movs	r3, #67	; 0x43
 80113a8:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 2) != HAL_OK);
 80113b4:	bf00      	nop
 80113b6:	7cfb      	ldrb	r3, [r7, #19]
 80113b8:	b299      	uxth	r1, r3
 80113ba:	f107 020b 	add.w	r2, r7, #11
 80113be:	2302      	movs	r3, #2
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	2301      	movs	r3, #1
 80113c4:	6978      	ldr	r0, [r7, #20]
 80113c6:	f7f2 fd32 	bl	8003e2e <HAL_I2C_Master_Transmit>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1f2      	bne.n	80113b6 <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 2) != HAL_OK);
 80113d0:	bf00      	nop
 80113d2:	7cfb      	ldrb	r3, [r7, #19]
 80113d4:	b299      	uxth	r1, r3
 80113d6:	f107 020c 	add.w	r2, r7, #12
 80113da:	2302      	movs	r3, #2
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	2306      	movs	r3, #6
 80113e0:	6978      	ldr	r0, [r7, #20]
 80113e2:	f7f2 fe31 	bl	8004048 <HAL_I2C_Master_Receive>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d1f2      	bne.n	80113d2 <SD_MPU6050_ReadGyroscope+0x36>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 80113ec:	7b3b      	ldrb	r3, [r7, #12]
 80113ee:	021b      	lsls	r3, r3, #8
 80113f0:	b21a      	sxth	r2, r3
 80113f2:	7b7b      	ldrb	r3, [r7, #13]
 80113f4:	b21b      	sxth	r3, r3
 80113f6:	4313      	orrs	r3, r2
 80113f8:	b21a      	sxth	r2, r3
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 80113fe:	7bbb      	ldrb	r3, [r7, #14]
 8011400:	021b      	lsls	r3, r3, #8
 8011402:	b21a      	sxth	r2, r3
 8011404:	7bfb      	ldrb	r3, [r7, #15]
 8011406:	b21b      	sxth	r3, r3
 8011408:	4313      	orrs	r3, r2
 801140a:	b21a      	sxth	r2, r3
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8011410:	7c3b      	ldrb	r3, [r7, #16]
 8011412:	021b      	lsls	r3, r3, #8
 8011414:	b21a      	sxth	r2, r3
 8011416:	7c7b      	ldrb	r3, [r7, #17]
 8011418:	b21b      	sxth	r3, r3
 801141a:	4313      	orrs	r3, r2
 801141c:	b21a      	sxth	r2, r3
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3718      	adds	r7, #24
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <SD_MPU6050_ReadTemperature>:
SD_MPU6050_Result SD_MPU6050_ReadTemperature(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b088      	sub	sp, #32
 8011430:	af02      	add	r7, sp, #8
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
	uint8_t data[2];
	int16_t temp;
	uint8_t reg = MPU6050_TEMP_OUT_H;
 8011436:	2341      	movs	r3, #65	; 0x41
 8011438:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	74fb      	strb	r3, [r7, #19]

	/* Read temperature */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 2) != HAL_OK);
 8011444:	bf00      	nop
 8011446:	7cfb      	ldrb	r3, [r7, #19]
 8011448:	b299      	uxth	r1, r3
 801144a:	f107 020b 	add.w	r2, r7, #11
 801144e:	2302      	movs	r3, #2
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	2301      	movs	r3, #1
 8011454:	6978      	ldr	r0, [r7, #20]
 8011456:	f7f2 fcea 	bl	8003e2e <HAL_I2C_Master_Transmit>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d1f2      	bne.n	8011446 <SD_MPU6050_ReadTemperature+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 2, 2) != HAL_OK);
 8011460:	bf00      	nop
 8011462:	7cfb      	ldrb	r3, [r7, #19]
 8011464:	b299      	uxth	r1, r3
 8011466:	f107 020c 	add.w	r2, r7, #12
 801146a:	2302      	movs	r3, #2
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	2302      	movs	r3, #2
 8011470:	6978      	ldr	r0, [r7, #20]
 8011472:	f7f2 fde9 	bl	8004048 <HAL_I2C_Master_Receive>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1f2      	bne.n	8011462 <SD_MPU6050_ReadTemperature+0x36>

	/* Format temperature */
	temp = (data[0] << 8 | data[1]);
 801147c:	7b3b      	ldrb	r3, [r7, #12]
 801147e:	021b      	lsls	r3, r3, #8
 8011480:	b21a      	sxth	r2, r3
 8011482:	7b7b      	ldrb	r3, [r7, #13]
 8011484:	b21b      	sxth	r3, r3
 8011486:	4313      	orrs	r3, r2
 8011488:	823b      	strh	r3, [r7, #16]
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 801148a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801148e:	ee07 3a90 	vmov	s15, r3
 8011492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011496:	eddf 6a08 	vldr	s13, [pc, #32]	; 80114b8 <SD_MPU6050_ReadTemperature+0x8c>
 801149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801149e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80114bc <SD_MPU6050_ReadTemperature+0x90>
 80114a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	43aa0000 	.word	0x43aa0000
 80114bc:	42121eb8 	.word	0x42121eb8

080114c0 <SD_MPU6050_ReadAll>:
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b08c      	sub	sp, #48	; 0x30
 80114c4:	af02      	add	r7, sp, #8
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80114ca:	233b      	movs	r3, #59	; 0x3b
 80114cc:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 4);
 80114da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80114de:	b299      	uxth	r1, r3
 80114e0:	f107 020f 	add.w	r2, r7, #15
 80114e4:	2304      	movs	r3, #4
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	2301      	movs	r3, #1
 80114ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114ec:	f7f2 fc9f 	bl	8003e2e <HAL_I2C_Master_Transmit>
 80114f0:	4603      	mov	r3, r0
 80114f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	if (status != HAL_OK) return SD_MPU6050_Result_Error;
 80114f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d001      	beq.n	8011502 <SD_MPU6050_ReadAll+0x42>
 80114fe:	2301      	movs	r3, #1
 8011500:	e066      	b.n	80115d0 <SD_MPU6050_ReadAll+0x110>


	status = HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 4);
 8011502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011506:	b299      	uxth	r1, r3
 8011508:	f107 0210 	add.w	r2, r7, #16
 801150c:	2304      	movs	r3, #4
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	230e      	movs	r3, #14
 8011512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011514:	f7f2 fd98 	bl	8004048 <HAL_I2C_Master_Receive>
 8011518:	4603      	mov	r3, r0
 801151a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	if (status != HAL_OK) return SD_MPU6050_Result_Error;
 801151e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011522:	2b00      	cmp	r3, #0
 8011524:	d001      	beq.n	801152a <SD_MPU6050_ReadAll+0x6a>
 8011526:	2301      	movs	r3, #1
 8011528:	e052      	b.n	80115d0 <SD_MPU6050_ReadAll+0x110>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = -(int16_t)(data[0] << 8 | data[1]);
 801152a:	7c3b      	ldrb	r3, [r7, #16]
 801152c:	021b      	lsls	r3, r3, #8
 801152e:	b21a      	sxth	r2, r3
 8011530:	7c7b      	ldrb	r3, [r7, #17]
 8011532:	b21b      	sxth	r3, r3
 8011534:	4313      	orrs	r3, r2
 8011536:	b21b      	sxth	r3, r3
 8011538:	b29b      	uxth	r3, r3
 801153a:	425b      	negs	r3, r3
 801153c:	b29b      	uxth	r3, r3
 801153e:	b21a      	sxth	r2, r3
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8011544:	7cbb      	ldrb	r3, [r7, #18]
 8011546:	021b      	lsls	r3, r3, #8
 8011548:	b21a      	sxth	r2, r3
 801154a:	7cfb      	ldrb	r3, [r7, #19]
 801154c:	b21b      	sxth	r3, r3
 801154e:	4313      	orrs	r3, r2
 8011550:	b21a      	sxth	r2, r3
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8011556:	7d3b      	ldrb	r3, [r7, #20]
 8011558:	021b      	lsls	r3, r3, #8
 801155a:	b21a      	sxth	r2, r3
 801155c:	7d7b      	ldrb	r3, [r7, #21]
 801155e:	b21b      	sxth	r3, r3
 8011560:	4313      	orrs	r3, r2
 8011562:	b21a      	sxth	r2, r3
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8011568:	7dbb      	ldrb	r3, [r7, #22]
 801156a:	021b      	lsls	r3, r3, #8
 801156c:	b21a      	sxth	r2, r3
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	b21b      	sxth	r3, r3
 8011572:	4313      	orrs	r3, r2
 8011574:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8011576:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801157a:	ee07 3a90 	vmov	s15, r3
 801157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011582:	eddf 6a15 	vldr	s13, [pc, #84]	; 80115d8 <SD_MPU6050_ReadAll+0x118>
 8011586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801158a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80115dc <SD_MPU6050_ReadAll+0x11c>
 801158e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8011598:	7e3b      	ldrb	r3, [r7, #24]
 801159a:	021b      	lsls	r3, r3, #8
 801159c:	b21a      	sxth	r2, r3
 801159e:	7e7b      	ldrb	r3, [r7, #25]
 80115a0:	b21b      	sxth	r3, r3
 80115a2:	4313      	orrs	r3, r2
 80115a4:	b21a      	sxth	r2, r3
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 80115aa:	7ebb      	ldrb	r3, [r7, #26]
 80115ac:	021b      	lsls	r3, r3, #8
 80115ae:	b21a      	sxth	r2, r3
 80115b0:	7efb      	ldrb	r3, [r7, #27]
 80115b2:	b21b      	sxth	r3, r3
 80115b4:	4313      	orrs	r3, r2
 80115b6:	b21a      	sxth	r2, r3
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 80115bc:	7f3b      	ldrb	r3, [r7, #28]
 80115be:	021b      	lsls	r3, r3, #8
 80115c0:	b21a      	sxth	r2, r3
 80115c2:	7f7b      	ldrb	r3, [r7, #29]
 80115c4:	b21b      	sxth	r3, r3
 80115c6:	4313      	orrs	r3, r2
 80115c8:	b21a      	sxth	r2, r3
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80115ce:	2300      	movs	r3, #0
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3728      	adds	r7, #40	; 0x28
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	43aa0000 	.word	0x43aa0000
 80115dc:	42121eb8 	.word	0x42121eb8

080115e0 <SD_MPU6050_EnableInterrupts>:
SD_MPU6050_Result SD_MPU6050_EnableInterrupts(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b088      	sub	sp, #32
 80115e4:	af02      	add	r7, sp, #8
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
	uint8_t reg[2] = {MPU6050_INT_ENABLE,0x21};
 80115ea:	4b17      	ldr	r3, [pc, #92]	; (8011648 <SD_MPU6050_EnableInterrupts+0x68>)
 80115ec:	881b      	ldrh	r3, [r3, #0]
 80115ee:	823b      	strh	r3, [r7, #16]
	I2C_HandleTypeDef* Handle = I2Cx;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	74fb      	strb	r3, [r7, #19]

	/* Enable interrupts for data ready and motion detect */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, reg, 2, 1000) != HAL_OK);
 80115fa:	bf00      	nop
 80115fc:	7cfb      	ldrb	r3, [r7, #19]
 80115fe:	b299      	uxth	r1, r3
 8011600:	f107 0210 	add.w	r2, r7, #16
 8011604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	2302      	movs	r3, #2
 801160c:	6978      	ldr	r0, [r7, #20]
 801160e:	f7f2 fc0e 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d1f1      	bne.n	80115fc <SD_MPU6050_EnableInterrupts+0x1c>

	uint8_t mpu_reg[2]= {MPU6050_INT_PIN_CFG, 48};
 8011618:	4b0c      	ldr	r3, [pc, #48]	; (801164c <SD_MPU6050_EnableInterrupts+0x6c>)
 801161a:	881b      	ldrh	r3, [r3, #0]
 801161c:	81bb      	strh	r3, [r7, #12]

//	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 14, 1000) != HAL_OK);
//	temp |= 0x10;
//	reg[0] = MPU6050_INT_PIN_CFG;
//	reg[1] = temp;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, mpu_reg, 2, 1000) != HAL_OK);
 801161e:	bf00      	nop
 8011620:	7cfb      	ldrb	r3, [r7, #19]
 8011622:	b299      	uxth	r1, r3
 8011624:	f107 020c 	add.w	r2, r7, #12
 8011628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	2302      	movs	r3, #2
 8011630:	6978      	ldr	r0, [r7, #20]
 8011632:	f7f2 fbfc 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1f1      	bne.n	8011620 <SD_MPU6050_EnableInterrupts+0x40>
//	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 14, 1000) != HAL_OK);

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	3718      	adds	r7, #24
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	0801355c 	.word	0x0801355c
 801164c:	08013560 	.word	0x08013560

08011650 <SD_MPU6050_DisableInterrupts>:
SD_MPU6050_Result SD_MPU6050_DisableInterrupts(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af02      	add	r7, sp, #8
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
	uint8_t reg[2] = {MPU6050_INT_ENABLE,0x00};
 801165a:	2338      	movs	r3, #56	; 0x38
 801165c:	723b      	strb	r3, [r7, #8]
 801165e:	2300      	movs	r3, #0
 8011660:	727b      	strb	r3, [r7, #9]
	I2C_HandleTypeDef* Handle = I2Cx;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	60fb      	str	r3, [r7, #12]
	uint8_t address = DataStruct->Address;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	72fb      	strb	r3, [r7, #11]

	/* Disable interrupts */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,reg,2,1000)!=HAL_OK);
 801166c:	bf00      	nop
 801166e:	7afb      	ldrb	r3, [r7, #11]
 8011670:	b299      	uxth	r1, r3
 8011672:	f107 0208 	add.w	r2, r7, #8
 8011676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	2302      	movs	r3, #2
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f7f2 fbd5 	bl	8003e2e <HAL_I2C_Master_Transmit>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1f1      	bne.n	801166e <SD_MPU6050_DisableInterrupts+0x1e>
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <SD_MPU6050_ReadInterrupts>:
SD_MPU6050_Result SD_MPU6050_ReadInterrupts(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Interrupt* InterruptsStruct)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af02      	add	r7, sp, #8
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
	uint8_t read;

	/* Reset structure */
	InterruptsStruct->Status = 0;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	701a      	strb	r2, [r3, #0]
	uint8_t reg = MPU6050_INT_STATUS;
 80116a6:	233a      	movs	r3, #58	; 0x3a
 80116a8:	747b      	strb	r3, [r7, #17]
	I2C_HandleTypeDef* Handle = I2Cx;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	74fb      	strb	r3, [r7, #19]

	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80116b4:	bf00      	nop
 80116b6:	7cfb      	ldrb	r3, [r7, #19]
 80116b8:	b299      	uxth	r1, r3
 80116ba:	f107 0211 	add.w	r2, r7, #17
 80116be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	2301      	movs	r3, #1
 80116c6:	6978      	ldr	r0, [r7, #20]
 80116c8:	f7f2 fbb1 	bl	8003e2e <HAL_I2C_Master_Transmit>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1f1      	bne.n	80116b6 <SD_MPU6050_ReadInterrupts+0x22>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &read, 14, 1000) != HAL_OK);
 80116d2:	bf00      	nop
 80116d4:	7cfb      	ldrb	r3, [r7, #19]
 80116d6:	b299      	uxth	r1, r3
 80116d8:	f107 0212 	add.w	r2, r7, #18
 80116dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	230e      	movs	r3, #14
 80116e4:	6978      	ldr	r0, [r7, #20]
 80116e6:	f7f2 fcaf 	bl	8004048 <HAL_I2C_Master_Receive>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1f1      	bne.n	80116d4 <SD_MPU6050_ReadInterrupts+0x40>

	/* Fill value */
	InterruptsStruct->Status = read;
 80116f0:	7cba      	ldrb	r2, [r7, #18]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	701a      	strb	r2, [r3, #0]
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3718      	adds	r7, #24
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <initState>:

/************************Quadcopter State variables******************************/

/*initialize state variables*/
void initState()
{
 8011700:	b580      	push	{r7, lr}
 8011702:	af00      	add	r7, sp, #0
	quad_state.pitch=0;
 8011704:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <initState+0x44>)
 8011706:	f04f 0200 	mov.w	r2, #0
 801170a:	655a      	str	r2, [r3, #84]	; 0x54
	quad_state.roll=0;
 801170c:	4b0d      	ldr	r3, [pc, #52]	; (8011744 <initState+0x44>)
 801170e:	f04f 0200 	mov.w	r2, #0
 8011712:	651a      	str	r2, [r3, #80]	; 0x50
	quad_state.yaw=0;
 8011714:	4b0b      	ldr	r3, [pc, #44]	; (8011744 <initState+0x44>)
 8011716:	f04f 0200 	mov.w	r2, #0
 801171a:	659a      	str	r2, [r3, #88]	; 0x58
	quad_state.gyro_pitch=0;
 801171c:	4b09      	ldr	r3, [pc, #36]	; (8011744 <initState+0x44>)
 801171e:	f04f 0200 	mov.w	r2, #0
 8011722:	661a      	str	r2, [r3, #96]	; 0x60
	quad_state.gyro_roll=0;
 8011724:	4b07      	ldr	r3, [pc, #28]	; (8011744 <initState+0x44>)
 8011726:	f04f 0200 	mov.w	r2, #0
 801172a:	65da      	str	r2, [r3, #92]	; 0x5c
	quad_state.gyro_yaw=0;
 801172c:	4b05      	ldr	r3, [pc, #20]	; (8011744 <initState+0x44>)
 801172e:	f04f 0200 	mov.w	r2, #0
 8011732:	665a      	str	r2, [r3, #100]	; 0x64

	initKalman(&(quad_state.roll_filter));
 8011734:	4803      	ldr	r0, [pc, #12]	; (8011744 <initState+0x44>)
 8011736:	f7ff fa0d 	bl	8010b54 <initKalman>
	initKalman(&(quad_state.pitch_filter));
 801173a:	4803      	ldr	r0, [pc, #12]	; (8011748 <initState+0x48>)
 801173c:	f7ff fa0a 	bl	8010b54 <initKalman>
}
 8011740:	bf00      	nop
 8011742:	bd80      	pop	{r7, pc}
 8011744:	200001e0 	.word	0x200001e0
 8011748:	20000208 	.word	0x20000208

0801174c <updateState>:

/*Update variables*/
void updateState(float new_roll, float new_gyro_roll, float new_pitch, float new_gyro_pitch, float new_gyro_yaw, float dt)
{
 801174c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011750:	b088      	sub	sp, #32
 8011752:	af00      	add	r7, sp, #0
 8011754:	ed87 0a05 	vstr	s0, [r7, #20]
 8011758:	edc7 0a04 	vstr	s1, [r7, #16]
 801175c:	ed87 1a03 	vstr	s2, [r7, #12]
 8011760:	edc7 1a02 	vstr	s3, [r7, #8]
 8011764:	ed87 2a01 	vstr	s4, [r7, #4]
 8011768:	edc7 2a00 	vstr	s5, [r7]
	/*Update roll*/
	float temp_roll = quad_state.roll;
 801176c:	4b59      	ldr	r3, [pc, #356]	; (80118d4 <updateState+0x188>)
 801176e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011770:	61fb      	str	r3, [r7, #28]
	quad_state.roll = getAngle(&(quad_state.roll_filter), new_roll, new_gyro_roll, dt);
 8011772:	ed97 1a00 	vldr	s2, [r7]
 8011776:	edd7 0a04 	vldr	s1, [r7, #16]
 801177a:	ed97 0a05 	vldr	s0, [r7, #20]
 801177e:	4855      	ldr	r0, [pc, #340]	; (80118d4 <updateState+0x188>)
 8011780:	f7ff fa1a 	bl	8010bb8 <getAngle>
 8011784:	eef0 7a40 	vmov.f32	s15, s0
 8011788:	4b52      	ldr	r3, [pc, #328]	; (80118d4 <updateState+0x188>)
 801178a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	/*Update pitch*/
	float temp_pitch = quad_state.pitch;
 801178e:	4b51      	ldr	r3, [pc, #324]	; (80118d4 <updateState+0x188>)
 8011790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011792:	61bb      	str	r3, [r7, #24]
	quad_state.pitch = getAngle(&(quad_state.pitch_filter), new_pitch, new_gyro_pitch, dt);
 8011794:	ed97 1a00 	vldr	s2, [r7]
 8011798:	edd7 0a02 	vldr	s1, [r7, #8]
 801179c:	ed97 0a03 	vldr	s0, [r7, #12]
 80117a0:	484d      	ldr	r0, [pc, #308]	; (80118d8 <updateState+0x18c>)
 80117a2:	f7ff fa09 	bl	8010bb8 <getAngle>
 80117a6:	eef0 7a40 	vmov.f32	s15, s0
 80117aa:	4b4a      	ldr	r3, [pc, #296]	; (80118d4 <updateState+0x188>)
 80117ac:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	/*Update yaw*/
	quad_state.yaw += new_gyro_yaw*dt;
 80117b0:	4b48      	ldr	r3, [pc, #288]	; (80118d4 <updateState+0x188>)
 80117b2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80117b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80117ba:	edd7 7a00 	vldr	s15, [r7]
 80117be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117c6:	4b43      	ldr	r3, [pc, #268]	; (80118d4 <updateState+0x188>)
 80117c8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	/*Update angular speeds*/
	if (dt>0)
 80117cc:	edd7 7a00 	vldr	s15, [r7]
 80117d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80117d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d8:	dc00      	bgt.n	80117dc <updateState+0x90>
		quad_state.gyro_roll = 0.5*quad_state.gyro_roll + 0.5*(quad_state.roll - temp_roll)/dt;
		quad_state.gyro_pitch = 0.5*quad_state.gyro_pitch + 0.5*(quad_state.pitch - temp_pitch)/dt;
		quad_state.gyro_yaw = new_gyro_yaw;

	}
}
 80117da:	e076      	b.n	80118ca <updateState+0x17e>
		quad_state.gyro_roll = 0.5*quad_state.gyro_roll + 0.5*(quad_state.roll - temp_roll)/dt;
 80117dc:	4b3d      	ldr	r3, [pc, #244]	; (80118d4 <updateState+0x188>)
 80117de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117e0:	4618      	mov	r0, r3
 80117e2:	f001 f821 	bl	8012828 <__aeabi_f2d>
 80117e6:	f04f 0200 	mov.w	r2, #0
 80117ea:	4b3c      	ldr	r3, [pc, #240]	; (80118dc <updateState+0x190>)
 80117ec:	f001 f870 	bl	80128d0 <__aeabi_dmul>
 80117f0:	4603      	mov	r3, r0
 80117f2:	460c      	mov	r4, r1
 80117f4:	4625      	mov	r5, r4
 80117f6:	461c      	mov	r4, r3
 80117f8:	4b36      	ldr	r3, [pc, #216]	; (80118d4 <updateState+0x188>)
 80117fa:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80117fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8011802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011806:	ee17 0a90 	vmov	r0, s15
 801180a:	f001 f80d 	bl	8012828 <__aeabi_f2d>
 801180e:	f04f 0200 	mov.w	r2, #0
 8011812:	4b32      	ldr	r3, [pc, #200]	; (80118dc <updateState+0x190>)
 8011814:	f001 f85c 	bl	80128d0 <__aeabi_dmul>
 8011818:	4602      	mov	r2, r0
 801181a:	460b      	mov	r3, r1
 801181c:	4690      	mov	r8, r2
 801181e:	4699      	mov	r9, r3
 8011820:	6838      	ldr	r0, [r7, #0]
 8011822:	f001 f801 	bl	8012828 <__aeabi_f2d>
 8011826:	4602      	mov	r2, r0
 8011828:	460b      	mov	r3, r1
 801182a:	4640      	mov	r0, r8
 801182c:	4649      	mov	r1, r9
 801182e:	f001 f979 	bl	8012b24 <__aeabi_ddiv>
 8011832:	4602      	mov	r2, r0
 8011834:	460b      	mov	r3, r1
 8011836:	4620      	mov	r0, r4
 8011838:	4629      	mov	r1, r5
 801183a:	f000 fe97 	bl	801256c <__adddf3>
 801183e:	4603      	mov	r3, r0
 8011840:	460c      	mov	r4, r1
 8011842:	4618      	mov	r0, r3
 8011844:	4621      	mov	r1, r4
 8011846:	f001 fafd 	bl	8012e44 <__aeabi_d2f>
 801184a:	4602      	mov	r2, r0
 801184c:	4b21      	ldr	r3, [pc, #132]	; (80118d4 <updateState+0x188>)
 801184e:	65da      	str	r2, [r3, #92]	; 0x5c
		quad_state.gyro_pitch = 0.5*quad_state.gyro_pitch + 0.5*(quad_state.pitch - temp_pitch)/dt;
 8011850:	4b20      	ldr	r3, [pc, #128]	; (80118d4 <updateState+0x188>)
 8011852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011854:	4618      	mov	r0, r3
 8011856:	f000 ffe7 	bl	8012828 <__aeabi_f2d>
 801185a:	f04f 0200 	mov.w	r2, #0
 801185e:	4b1f      	ldr	r3, [pc, #124]	; (80118dc <updateState+0x190>)
 8011860:	f001 f836 	bl	80128d0 <__aeabi_dmul>
 8011864:	4603      	mov	r3, r0
 8011866:	460c      	mov	r4, r1
 8011868:	4625      	mov	r5, r4
 801186a:	461c      	mov	r4, r3
 801186c:	4b19      	ldr	r3, [pc, #100]	; (80118d4 <updateState+0x188>)
 801186e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8011872:	edd7 7a06 	vldr	s15, [r7, #24]
 8011876:	ee77 7a67 	vsub.f32	s15, s14, s15
 801187a:	ee17 0a90 	vmov	r0, s15
 801187e:	f000 ffd3 	bl	8012828 <__aeabi_f2d>
 8011882:	f04f 0200 	mov.w	r2, #0
 8011886:	4b15      	ldr	r3, [pc, #84]	; (80118dc <updateState+0x190>)
 8011888:	f001 f822 	bl	80128d0 <__aeabi_dmul>
 801188c:	4602      	mov	r2, r0
 801188e:	460b      	mov	r3, r1
 8011890:	4690      	mov	r8, r2
 8011892:	4699      	mov	r9, r3
 8011894:	6838      	ldr	r0, [r7, #0]
 8011896:	f000 ffc7 	bl	8012828 <__aeabi_f2d>
 801189a:	4602      	mov	r2, r0
 801189c:	460b      	mov	r3, r1
 801189e:	4640      	mov	r0, r8
 80118a0:	4649      	mov	r1, r9
 80118a2:	f001 f93f 	bl	8012b24 <__aeabi_ddiv>
 80118a6:	4602      	mov	r2, r0
 80118a8:	460b      	mov	r3, r1
 80118aa:	4620      	mov	r0, r4
 80118ac:	4629      	mov	r1, r5
 80118ae:	f000 fe5d 	bl	801256c <__adddf3>
 80118b2:	4603      	mov	r3, r0
 80118b4:	460c      	mov	r4, r1
 80118b6:	4618      	mov	r0, r3
 80118b8:	4621      	mov	r1, r4
 80118ba:	f001 fac3 	bl	8012e44 <__aeabi_d2f>
 80118be:	4602      	mov	r2, r0
 80118c0:	4b04      	ldr	r3, [pc, #16]	; (80118d4 <updateState+0x188>)
 80118c2:	661a      	str	r2, [r3, #96]	; 0x60
		quad_state.gyro_yaw = new_gyro_yaw;
 80118c4:	4a03      	ldr	r2, [pc, #12]	; (80118d4 <updateState+0x188>)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6653      	str	r3, [r2, #100]	; 0x64
}
 80118ca:	bf00      	nop
 80118cc:	3720      	adds	r7, #32
 80118ce:	46bd      	mov	sp, r7
 80118d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80118d4:	200001e0 	.word	0x200001e0
 80118d8:	20000208 	.word	0x20000208
 80118dc:	3fe00000 	.word	0x3fe00000

080118e0 <MPU6050_getData>:


/*************************MPU 6050*********************************/

SensorErrorType MPU6050_getData(){
 80118e0:	b5b0      	push	{r4, r5, r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0

	SD_MPU6050_Result result = SD_MPU6050_Result_Ok;
 80118e6:	2300      	movs	r3, #0
 80118e8:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(MPU6050_PORT, MPU6050_INT_PIN) == GPIO_PIN_SET)
 80118ea:	2110      	movs	r1, #16
 80118ec:	488c      	ldr	r0, [pc, #560]	; (8011b20 <MPU6050_getData+0x240>)
 80118ee:	f7f2 f8eb 	bl	8003ac8 <HAL_GPIO_ReadPin>
 80118f2:	4603      	mov	r3, r0
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	f040 80fd 	bne.w	8011af4 <MPU6050_getData+0x214>
		{
			result = SD_MPU6050_ReadAll(&hi2c1, &mpu1);
 80118fa:	498a      	ldr	r1, [pc, #552]	; (8011b24 <MPU6050_getData+0x244>)
 80118fc:	488a      	ldr	r0, [pc, #552]	; (8011b28 <MPU6050_getData+0x248>)
 80118fe:	f7ff fddf 	bl	80114c0 <SD_MPU6050_ReadAll>
 8011902:	4603      	mov	r3, r0
 8011904:	71fb      	strb	r3, [r7, #7]
			if (result != SD_MPU6050_Result_Ok) return SENSOR_ERROR;
 8011906:	79fb      	ldrb	r3, [r7, #7]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d001      	beq.n	8011910 <MPU6050_getData+0x30>
 801190c:	2301      	movs	r3, #1
 801190e:	e0f2      	b.n	8011af6 <MPU6050_getData+0x216>

			/* Convert values to real values */
			mpu1.Accelerometer_X_conv = 0.00059855041*mpu1.Accelerometer_X;
 8011910:	4b84      	ldr	r3, [pc, #528]	; (8011b24 <MPU6050_getData+0x244>)
 8011912:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011916:	4618      	mov	r0, r3
 8011918:	f000 ff74 	bl	8012804 <__aeabi_i2d>
 801191c:	a378      	add	r3, pc, #480	; (adr r3, 8011b00 <MPU6050_getData+0x220>)
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	f000 ffd5 	bl	80128d0 <__aeabi_dmul>
 8011926:	4603      	mov	r3, r0
 8011928:	460c      	mov	r4, r1
 801192a:	4618      	mov	r0, r3
 801192c:	4621      	mov	r1, r4
 801192e:	f001 fa89 	bl	8012e44 <__aeabi_d2f>
 8011932:	4602      	mov	r2, r0
 8011934:	4b7b      	ldr	r3, [pc, #492]	; (8011b24 <MPU6050_getData+0x244>)
 8011936:	61da      	str	r2, [r3, #28]
			mpu1.Accelerometer_Y_conv = 0.00059855041*mpu1.Accelerometer_Y;
 8011938:	4b7a      	ldr	r3, [pc, #488]	; (8011b24 <MPU6050_getData+0x244>)
 801193a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801193e:	4618      	mov	r0, r3
 8011940:	f000 ff60 	bl	8012804 <__aeabi_i2d>
 8011944:	a36e      	add	r3, pc, #440	; (adr r3, 8011b00 <MPU6050_getData+0x220>)
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	f000 ffc1 	bl	80128d0 <__aeabi_dmul>
 801194e:	4603      	mov	r3, r0
 8011950:	460c      	mov	r4, r1
 8011952:	4618      	mov	r0, r3
 8011954:	4621      	mov	r1, r4
 8011956:	f001 fa75 	bl	8012e44 <__aeabi_d2f>
 801195a:	4602      	mov	r2, r0
 801195c:	4b71      	ldr	r3, [pc, #452]	; (8011b24 <MPU6050_getData+0x244>)
 801195e:	621a      	str	r2, [r3, #32]
			mpu1.Accelerometer_Z_conv = 0.00059855041*mpu1.Accelerometer_Z;
 8011960:	4b70      	ldr	r3, [pc, #448]	; (8011b24 <MPU6050_getData+0x244>)
 8011962:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011966:	4618      	mov	r0, r3
 8011968:	f000 ff4c 	bl	8012804 <__aeabi_i2d>
 801196c:	a364      	add	r3, pc, #400	; (adr r3, 8011b00 <MPU6050_getData+0x220>)
 801196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011972:	f000 ffad 	bl	80128d0 <__aeabi_dmul>
 8011976:	4603      	mov	r3, r0
 8011978:	460c      	mov	r4, r1
 801197a:	4618      	mov	r0, r3
 801197c:	4621      	mov	r1, r4
 801197e:	f001 fa61 	bl	8012e44 <__aeabi_d2f>
 8011982:	4602      	mov	r2, r0
 8011984:	4b67      	ldr	r3, [pc, #412]	; (8011b24 <MPU6050_getData+0x244>)
 8011986:	625a      	str	r2, [r3, #36]	; 0x24

			mpu1.Gyroscope_X_conv = (0.00026630827*mpu1.Gyroscope_X);
 8011988:	4b66      	ldr	r3, [pc, #408]	; (8011b24 <MPU6050_getData+0x244>)
 801198a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801198e:	4618      	mov	r0, r3
 8011990:	f000 ff38 	bl	8012804 <__aeabi_i2d>
 8011994:	a35c      	add	r3, pc, #368	; (adr r3, 8011b08 <MPU6050_getData+0x228>)
 8011996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199a:	f000 ff99 	bl	80128d0 <__aeabi_dmul>
 801199e:	4603      	mov	r3, r0
 80119a0:	460c      	mov	r4, r1
 80119a2:	4618      	mov	r0, r3
 80119a4:	4621      	mov	r1, r4
 80119a6:	f001 fa4d 	bl	8012e44 <__aeabi_d2f>
 80119aa:	4602      	mov	r2, r0
 80119ac:	4b5d      	ldr	r3, [pc, #372]	; (8011b24 <MPU6050_getData+0x244>)
 80119ae:	629a      	str	r2, [r3, #40]	; 0x28
			mpu1.Gyroscope_Y_conv = (-0.00026630827*mpu1.Gyroscope_Y);
 80119b0:	4b5c      	ldr	r3, [pc, #368]	; (8011b24 <MPU6050_getData+0x244>)
 80119b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f000 ff24 	bl	8012804 <__aeabi_i2d>
 80119bc:	a354      	add	r3, pc, #336	; (adr r3, 8011b10 <MPU6050_getData+0x230>)
 80119be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c2:	f000 ff85 	bl	80128d0 <__aeabi_dmul>
 80119c6:	4603      	mov	r3, r0
 80119c8:	460c      	mov	r4, r1
 80119ca:	4618      	mov	r0, r3
 80119cc:	4621      	mov	r1, r4
 80119ce:	f001 fa39 	bl	8012e44 <__aeabi_d2f>
 80119d2:	4602      	mov	r2, r0
 80119d4:	4b53      	ldr	r3, [pc, #332]	; (8011b24 <MPU6050_getData+0x244>)
 80119d6:	62da      	str	r2, [r3, #44]	; 0x2c
			mpu1.Gyroscope_Z_conv = -0.00026630827*mpu1.Gyroscope_Z;
 80119d8:	4b52      	ldr	r3, [pc, #328]	; (8011b24 <MPU6050_getData+0x244>)
 80119da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80119de:	4618      	mov	r0, r3
 80119e0:	f000 ff10 	bl	8012804 <__aeabi_i2d>
 80119e4:	a34a      	add	r3, pc, #296	; (adr r3, 8011b10 <MPU6050_getData+0x230>)
 80119e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ea:	f000 ff71 	bl	80128d0 <__aeabi_dmul>
 80119ee:	4603      	mov	r3, r0
 80119f0:	460c      	mov	r4, r1
 80119f2:	4618      	mov	r0, r3
 80119f4:	4621      	mov	r1, r4
 80119f6:	f001 fa25 	bl	8012e44 <__aeabi_d2f>
 80119fa:	4602      	mov	r2, r0
 80119fc:	4b49      	ldr	r3, [pc, #292]	; (8011b24 <MPU6050_getData+0x244>)
 80119fe:	631a      	str	r2, [r3, #48]	; 0x30


			float T = (HAL_GetTick()- tick)*0.001;
 8011a00:	f7ee fc70 	bl	80002e4 <HAL_GetTick>
 8011a04:	4602      	mov	r2, r0
 8011a06:	4b49      	ldr	r3, [pc, #292]	; (8011b2c <MPU6050_getData+0x24c>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f000 fee9 	bl	80127e4 <__aeabi_ui2d>
 8011a12:	a341      	add	r3, pc, #260	; (adr r3, 8011b18 <MPU6050_getData+0x238>)
 8011a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a18:	f000 ff5a 	bl	80128d0 <__aeabi_dmul>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	460c      	mov	r4, r1
 8011a20:	4618      	mov	r0, r3
 8011a22:	4621      	mov	r1, r4
 8011a24:	f001 fa0e 	bl	8012e44 <__aeabi_d2f>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	603b      	str	r3, [r7, #0]

			/*Get angles from accelerometer*/
			mpu1.rpy[1] = atan2((float)(-mpu1.Accelerometer_X), (float)(mpu1.Accelerometer_Z));
 8011a2c:	4b3d      	ldr	r3, [pc, #244]	; (8011b24 <MPU6050_getData+0x244>)
 8011a2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011a32:	425b      	negs	r3, r3
 8011a34:	ee07 3a90 	vmov	s15, r3
 8011a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a3c:	ee17 0a90 	vmov	r0, s15
 8011a40:	f000 fef2 	bl	8012828 <__aeabi_f2d>
 8011a44:	4604      	mov	r4, r0
 8011a46:	460d      	mov	r5, r1
 8011a48:	4b36      	ldr	r3, [pc, #216]	; (8011b24 <MPU6050_getData+0x244>)
 8011a4a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011a4e:	ee07 3a90 	vmov	s15, r3
 8011a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a56:	ee17 0a90 	vmov	r0, s15
 8011a5a:	f000 fee5 	bl	8012828 <__aeabi_f2d>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	ec43 2b11 	vmov	d1, r2, r3
 8011a66:	ec45 4b10 	vmov	d0, r4, r5
 8011a6a:	f001 facf 	bl	801300c <atan2>
 8011a6e:	ec54 3b10 	vmov	r3, r4, d0
 8011a72:	4618      	mov	r0, r3
 8011a74:	4621      	mov	r1, r4
 8011a76:	f001 f9e5 	bl	8012e44 <__aeabi_d2f>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	4b29      	ldr	r3, [pc, #164]	; (8011b24 <MPU6050_getData+0x244>)
 8011a7e:	639a      	str	r2, [r3, #56]	; 0x38
			mpu1.rpy[0] = atan2((float)(mpu1.Accelerometer_Y), (float)(mpu1.Accelerometer_Z));
 8011a80:	4b28      	ldr	r3, [pc, #160]	; (8011b24 <MPU6050_getData+0x244>)
 8011a82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a86:	ee07 3a90 	vmov	s15, r3
 8011a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a8e:	ee17 0a90 	vmov	r0, s15
 8011a92:	f000 fec9 	bl	8012828 <__aeabi_f2d>
 8011a96:	4604      	mov	r4, r0
 8011a98:	460d      	mov	r5, r1
 8011a9a:	4b22      	ldr	r3, [pc, #136]	; (8011b24 <MPU6050_getData+0x244>)
 8011a9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011aa0:	ee07 3a90 	vmov	s15, r3
 8011aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011aa8:	ee17 0a90 	vmov	r0, s15
 8011aac:	f000 febc 	bl	8012828 <__aeabi_f2d>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	ec43 2b11 	vmov	d1, r2, r3
 8011ab8:	ec45 4b10 	vmov	d0, r4, r5
 8011abc:	f001 faa6 	bl	801300c <atan2>
 8011ac0:	ec54 3b10 	vmov	r3, r4, d0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	f001 f9bc 	bl	8012e44 <__aeabi_d2f>
 8011acc:	4602      	mov	r2, r0
 8011ace:	4b15      	ldr	r3, [pc, #84]	; (8011b24 <MPU6050_getData+0x244>)
 8011ad0:	635a      	str	r2, [r3, #52]	; 0x34
			mpu1.rpy[2] = mpu1.rpy[2]+ mpu1.Gyroscope_Z_conv*T;
 8011ad2:	4b14      	ldr	r3, [pc, #80]	; (8011b24 <MPU6050_getData+0x244>)
 8011ad4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8011ad8:	4b12      	ldr	r3, [pc, #72]	; (8011b24 <MPU6050_getData+0x244>)
 8011ada:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8011ade:	edd7 7a00 	vldr	s15, [r7]
 8011ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011aea:	4b0e      	ldr	r3, [pc, #56]	; (8011b24 <MPU6050_getData+0x244>)
 8011aec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
//					0.00026630827*mpu1.Gyroscope_Z*sin(mpu1.rpy[0]);
//
//			mpu1.Gyroscope_Z_conv = -0.00026630827*mpu1.Gyroscope_Y*sin(mpu1.rpy[0])/cos(mpu1.rpy[1]) +
//					0.00026630827*mpu1.Gyroscope_Z*cos(mpu1.rpy[0])/cos(mpu1.rpy[1]);

			return SENSOR_OK;
 8011af0:	2300      	movs	r3, #0
 8011af2:	e000      	b.n	8011af6 <MPU6050_getData+0x216>

		}
	else return SENSOR_OK;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bdb0      	pop	{r4, r5, r7, pc}
 8011afe:	bf00      	nop
 8011b00:	37cd73a9 	.word	0x37cd73a9
 8011b04:	3f439d01 	.word	0x3f439d01
 8011b08:	4f701ae7 	.word	0x4f701ae7
 8011b0c:	3f3173e9 	.word	0x3f3173e9
 8011b10:	4f701ae7 	.word	0x4f701ae7
 8011b14:	bf3173e9 	.word	0xbf3173e9
 8011b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8011b1c:	3f50624d 	.word	0x3f50624d
 8011b20:	40020400 	.word	0x40020400
 8011b24:	20000194 	.word	0x20000194
 8011b28:	20000024 	.word	0x20000024
 8011b2c:	20000248 	.word	0x20000248

08011b30 <NVIC_DisableIRQ>:
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	4603      	mov	r3, r0
 8011b38:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8011b3a:	4909      	ldr	r1, [pc, #36]	; (8011b60 <NVIC_DisableIRQ+0x30>)
 8011b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b40:	095b      	lsrs	r3, r3, #5
 8011b42:	79fa      	ldrb	r2, [r7, #7]
 8011b44:	f002 021f 	and.w	r2, r2, #31
 8011b48:	2001      	movs	r0, #1
 8011b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8011b4e:	3320      	adds	r3, #32
 8011b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011b54:	bf00      	nop
 8011b56:	370c      	adds	r7, #12
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr
 8011b60:	e000e100 	.word	0xe000e100

08011b64 <ReceiveIT>:
extern __IO uint32_t input_4;

/* Low Level functions*/

SerialErrorType ReceiveIT(UART_HandleTypeDef* huart, uint8_t* buffer)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(huart, buffer, sizeof(master_message));
 8011b6e:	220a      	movs	r2, #10
 8011b70:	6839      	ldr	r1, [r7, #0]
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7fd f8d7 	bl	800ed26 <HAL_UART_Receive_IT>
	return SERIAL_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <CheckReceive>:

SerialErrorType CheckReceive(UART_HandleTypeDef* huart)
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b082      	sub	sp, #8
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
	return (HAL_UART_GetState(huart) == HAL_UART_STATE_READY ? SERIAL_OK : SERIAL_WAIT);
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7fd ff64 	bl	800fa58 <HAL_UART_GetState>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b20      	cmp	r3, #32
 8011b94:	bf14      	ite	ne
 8011b96:	2301      	movne	r3, #1
 8011b98:	2300      	moveq	r3, #0
 8011b9a:	b2db      	uxtb	r3, r3
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <Transmit>:

SerialErrorType Transmit(UART_HandleTypeDef* huart, uint8_t* buffer)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, buffer, sizeof(serial_message), 4);
 8011bae:	2304      	movs	r3, #4
 8011bb0:	2228      	movs	r2, #40	; 0x28
 8011bb2:	6839      	ldr	r1, [r7, #0]
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7fc ff33 	bl	800ea20 <HAL_UART_Transmit>
	return SERIAL_OK;
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <listen>:


/*API*/

SerialErrorType listen()
{
 8011bc4:	b590      	push	{r4, r7, lr}
 8011bc6:	b08b      	sub	sp, #44	; 0x2c
 8011bc8:	af00      	add	r7, sp, #0
	uint8_t rxbuffer[sizeof(master_message)];
	ReceiveIT(&huart2, rxbuffer);
 8011bca:	f107 0310 	add.w	r3, r7, #16
 8011bce:	4619      	mov	r1, r3
 8011bd0:	484f      	ldr	r0, [pc, #316]	; (8011d10 <listen+0x14c>)
 8011bd2:	f7ff ffc7 	bl	8011b64 <ReceiveIT>
	uint32_t safety_timer= HAL_GetTick();
 8011bd6:	f7ee fb85 	bl	80002e4 <HAL_GetTick>
 8011bda:	6238      	str	r0, [r7, #32]

	while(CheckReceive(&huart2) != SERIAL_OK)
 8011bdc:	e076      	b.n	8011ccc <listen+0x108>
	{
		/* Get data from MPU6050 sensor*/
		SensorErrorType status = MPU6050_getData();
 8011bde:	f7ff fe7f 	bl	80118e0 <MPU6050_getData>
 8011be2:	4603      	mov	r3, r0
 8011be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/*If MPU stops working, cut off power*/
		while (status == SENSOR_ERROR)
 8011be8:	e014      	b.n	8011c14 <listen+0x50>
		{
			motor_output(MOTOR_1, 0);
 8011bea:	2100      	movs	r1, #0
 8011bec:	2001      	movs	r0, #1
 8011bee:	f7ff f993 	bl	8010f18 <motor_output>
			motor_output(MOTOR_2, 0);
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	2002      	movs	r0, #2
 8011bf6:	f7ff f98f 	bl	8010f18 <motor_output>
			motor_output(MOTOR_3, 0);
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	2003      	movs	r0, #3
 8011bfe:	f7ff f98b 	bl	8010f18 <motor_output>
			motor_output(MOTOR_4, 0);
 8011c02:	2100      	movs	r1, #0
 8011c04:	2004      	movs	r0, #4
 8011c06:	f7ff f987 	bl	8010f18 <motor_output>

			status = MPU6050_getData();
 8011c0a:	f7ff fe69 	bl	80118e0 <MPU6050_getData>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (status == SENSOR_ERROR)
 8011c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d0e6      	beq.n	8011bea <listen+0x26>
		}

		/*Update Kalman filter*/
		float T = (HAL_GetTick() - tick)*0.001;
 8011c1c:	f7ee fb62 	bl	80002e4 <HAL_GetTick>
 8011c20:	4602      	mov	r2, r0
 8011c22:	4b3c      	ldr	r3, [pc, #240]	; (8011d14 <listen+0x150>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f000 fddb 	bl	80127e4 <__aeabi_ui2d>
 8011c2e:	a336      	add	r3, pc, #216	; (adr r3, 8011d08 <listen+0x144>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	f000 fe4c 	bl	80128d0 <__aeabi_dmul>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	460c      	mov	r4, r1
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	4621      	mov	r1, r4
 8011c40:	f001 f900 	bl	8012e44 <__aeabi_d2f>
 8011c44:	4603      	mov	r3, r0
 8011c46:	61fb      	str	r3, [r7, #28]
		updateState(mpu1.rpy[0], mpu1.Gyroscope_X_conv, mpu1.rpy[1], mpu1.Gyroscope_Y_conv, mpu1.Gyroscope_Z_conv, T);
 8011c48:	4b33      	ldr	r3, [pc, #204]	; (8011d18 <listen+0x154>)
 8011c4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011c4e:	4b32      	ldr	r3, [pc, #200]	; (8011d18 <listen+0x154>)
 8011c50:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8011c54:	4b30      	ldr	r3, [pc, #192]	; (8011d18 <listen+0x154>)
 8011c56:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8011c5a:	4b2f      	ldr	r3, [pc, #188]	; (8011d18 <listen+0x154>)
 8011c5c:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8011c60:	4b2d      	ldr	r3, [pc, #180]	; (8011d18 <listen+0x154>)
 8011c62:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
 8011c66:	edd7 2a07 	vldr	s5, [r7, #28]
 8011c6a:	eeb0 2a65 	vmov.f32	s4, s11
 8011c6e:	eef0 1a46 	vmov.f32	s3, s12
 8011c72:	eeb0 1a66 	vmov.f32	s2, s13
 8011c76:	eef0 0a47 	vmov.f32	s1, s14
 8011c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c7e:	f7ff fd65 	bl	801174c <updateState>
		tick = HAL_GetTick();
 8011c82:	f7ee fb2f 	bl	80002e4 <HAL_GetTick>
 8011c86:	4602      	mov	r2, r0
 8011c88:	4b22      	ldr	r3, [pc, #136]	; (8011d14 <listen+0x150>)
 8011c8a:	601a      	str	r2, [r3, #0]

		if (status != SENSOR_OK) HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8011c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d003      	beq.n	8011c9c <listen+0xd8>
 8011c94:	2120      	movs	r1, #32
 8011c96:	4821      	ldr	r0, [pc, #132]	; (8011d1c <listen+0x158>)
 8011c98:	f7f1 ff47 	bl	8003b2a <HAL_GPIO_TogglePin>

		/*If the user's application does not send data within 2 seconds,
		 * shut off the motors.
		 */
		if (HAL_GetTick() - safety_timer > 2000)
 8011c9c:	f7ee fb22 	bl	80002e4 <HAL_GetTick>
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	6a3b      	ldr	r3, [r7, #32]
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011caa:	d90f      	bls.n	8011ccc <listen+0x108>
		{
			motor_output(MOTOR_1, 0);
 8011cac:	2100      	movs	r1, #0
 8011cae:	2001      	movs	r0, #1
 8011cb0:	f7ff f932 	bl	8010f18 <motor_output>
			motor_output(MOTOR_2, 0);
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	2002      	movs	r0, #2
 8011cb8:	f7ff f92e 	bl	8010f18 <motor_output>
			motor_output(MOTOR_3, 0);
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	2003      	movs	r0, #3
 8011cc0:	f7ff f92a 	bl	8010f18 <motor_output>
			motor_output(MOTOR_4, 0);
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	2004      	movs	r0, #4
 8011cc8:	f7ff f926 	bl	8010f18 <motor_output>
	while(CheckReceive(&huart2) != SERIAL_OK)
 8011ccc:	4810      	ldr	r0, [pc, #64]	; (8011d10 <listen+0x14c>)
 8011cce:	f7ff ff58 	bl	8011b82 <CheckReceive>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d182      	bne.n	8011bde <listen+0x1a>
		}
	}

	/*Update safety timer*/
	safety_timer = HAL_GetTick();
 8011cd8:	f7ee fb04 	bl	80002e4 <HAL_GetTick>
 8011cdc:	6238      	str	r0, [r7, #32]

	/*Disable timer 3 interrupt*/
	NVIC_DisableIRQ(TIM3_IRQn);
 8011cde:	201d      	movs	r0, #29
 8011ce0:	f7ff ff26 	bl	8011b30 <NVIC_DisableIRQ>

	master_message recv_msg = *(master_message*)rxbuffer;
 8011ce4:	f107 0210 	add.w	r2, r7, #16
 8011ce8:	1d3b      	adds	r3, r7, #4
 8011cea:	6810      	ldr	r0, [r2, #0]
 8011cec:	6851      	ldr	r1, [r2, #4]
 8011cee:	c303      	stmia	r3!, {r0, r1}
 8011cf0:	8912      	ldrh	r2, [r2, #8]
 8011cf2:	801a      	strh	r2, [r3, #0]
	return message_handler(&recv_msg);
 8011cf4:	1d3b      	adds	r3, r7, #4
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f000 f812 	bl	8011d20 <message_handler>
 8011cfc:	4603      	mov	r3, r0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	372c      	adds	r7, #44	; 0x2c
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd90      	pop	{r4, r7, pc}
 8011d06:	bf00      	nop
 8011d08:	d2f1a9fc 	.word	0xd2f1a9fc
 8011d0c:	3f50624d 	.word	0x3f50624d
 8011d10:	20000138 	.word	0x20000138
 8011d14:	20000248 	.word	0x20000248
 8011d18:	20000194 	.word	0x20000194
 8011d1c:	40020000 	.word	0x40020000

08011d20 <message_handler>:


SerialErrorType message_handler(master_message* recv_message)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
	if (recv_message->message_header.en == SERIAL_READ)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d103      	bne.n	8011d38 <message_handler+0x18>
	{
		return readResponse();
 8011d30:	f000 f810 	bl	8011d54 <readResponse>
 8011d34:	4603      	mov	r3, r0
 8011d36:	e009      	b.n	8011d4c <message_handler+0x2c>
	}
	else if (recv_message->message_header.en == SERIAL_WRITE)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d104      	bne.n	8011d4a <message_handler+0x2a>
	{
		return writeResponse(recv_message);
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f000 f83f 	bl	8011dc4 <writeResponse>
 8011d46:	4603      	mov	r3, r0
 8011d48:	e000      	b.n	8011d4c <message_handler+0x2c>
	}
	else return SERIAL_ERROR;
 8011d4a:	2302      	movs	r3, #2
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <readResponse>:


SerialErrorType readResponse()
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b08a      	sub	sp, #40	; 0x28
 8011d58:	af00      	add	r7, sp, #0

	serial_message new_message;

	new_message.MPUData[0] = quad_state.roll;
 8011d5a:	4b14      	ldr	r3, [pc, #80]	; (8011dac <readResponse+0x58>)
 8011d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d5e:	603b      	str	r3, [r7, #0]
	new_message.MPUData[1] = quad_state.pitch;
 8011d60:	4b12      	ldr	r3, [pc, #72]	; (8011dac <readResponse+0x58>)
 8011d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d64:	607b      	str	r3, [r7, #4]
	new_message.MPUData[2] = quad_state.yaw;
 8011d66:	4b11      	ldr	r3, [pc, #68]	; (8011dac <readResponse+0x58>)
 8011d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d6a:	60bb      	str	r3, [r7, #8]
	new_message.MPUData[3] = quad_state.gyro_roll;
 8011d6c:	4b0f      	ldr	r3, [pc, #60]	; (8011dac <readResponse+0x58>)
 8011d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d70:	60fb      	str	r3, [r7, #12]
	new_message.MPUData[4] = quad_state.gyro_pitch;
 8011d72:	4b0e      	ldr	r3, [pc, #56]	; (8011dac <readResponse+0x58>)
 8011d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d76:	613b      	str	r3, [r7, #16]
	new_message.MPUData[5] = quad_state.gyro_yaw;
 8011d78:	4b0c      	ldr	r3, [pc, #48]	; (8011dac <readResponse+0x58>)
 8011d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d7c:	617b      	str	r3, [r7, #20]

	new_message.inputs[0] = input_1;
 8011d7e:	4b0c      	ldr	r3, [pc, #48]	; (8011db0 <readResponse+0x5c>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	61bb      	str	r3, [r7, #24]
	new_message.inputs[1] = input_2;
 8011d84:	4b0b      	ldr	r3, [pc, #44]	; (8011db4 <readResponse+0x60>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	61fb      	str	r3, [r7, #28]
	new_message.inputs[2] = input_3;
 8011d8a:	4b0b      	ldr	r3, [pc, #44]	; (8011db8 <readResponse+0x64>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	623b      	str	r3, [r7, #32]
	new_message.inputs[3] = input_4;
 8011d90:	4b0a      	ldr	r3, [pc, #40]	; (8011dbc <readResponse+0x68>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	627b      	str	r3, [r7, #36]	; 0x24

	return Transmit(&huart2, (uint8_t*)&new_message);
 8011d96:	463b      	mov	r3, r7
 8011d98:	4619      	mov	r1, r3
 8011d9a:	4809      	ldr	r0, [pc, #36]	; (8011dc0 <readResponse+0x6c>)
 8011d9c:	f7ff ff02 	bl	8011ba4 <Transmit>
 8011da0:	4603      	mov	r3, r0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3728      	adds	r7, #40	; 0x28
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	200001e0 	.word	0x200001e0
 8011db0:	20000190 	.word	0x20000190
 8011db4:	20000184 	.word	0x20000184
 8011db8:	2000018c 	.word	0x2000018c
 8011dbc:	20000180 	.word	0x20000180
 8011dc0:	20000138 	.word	0x20000138

08011dc4 <writeResponse>:


SerialErrorType writeResponse(master_message* recv_message)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  	/* Output desired power to motors */
    motor_output(MOTOR_1, recv_message->motor_1);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	885b      	ldrh	r3, [r3, #2]
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	f7ff f8a0 	bl	8010f18 <motor_output>
    motor_output(MOTOR_2, recv_message->motor_2);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	889b      	ldrh	r3, [r3, #4]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	2002      	movs	r0, #2
 8011de0:	f7ff f89a 	bl	8010f18 <motor_output>
    motor_output(MOTOR_3, recv_message->motor_3);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	88db      	ldrh	r3, [r3, #6]
 8011de8:	4619      	mov	r1, r3
 8011dea:	2003      	movs	r0, #3
 8011dec:	f7ff f894 	bl	8010f18 <motor_output>
    motor_output(MOTOR_4, recv_message->motor_4);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	891b      	ldrh	r3, [r3, #8]
 8011df4:	4619      	mov	r1, r3
 8011df6:	2004      	movs	r0, #4
 8011df8:	f7ff f88e 	bl	8010f18 <motor_output>

    return SERIAL_OK;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop

08011e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8011e0c:	2007      	movs	r0, #7
 8011e0e:	f7f0 fc57 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8011e12:	2200      	movs	r2, #0
 8011e14:	2100      	movs	r1, #0
 8011e16:	f06f 000b 	mvn.w	r0, #11
 8011e1a:	f7f0 fc5c 	bl	80026d6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8011e1e:	2200      	movs	r2, #0
 8011e20:	2100      	movs	r1, #0
 8011e22:	f06f 000a 	mvn.w	r0, #10
 8011e26:	f7f0 fc56 	bl	80026d6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	f06f 0009 	mvn.w	r0, #9
 8011e32:	f7f0 fc50 	bl	80026d6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8011e36:	2200      	movs	r2, #0
 8011e38:	2100      	movs	r1, #0
 8011e3a:	f06f 0004 	mvn.w	r0, #4
 8011e3e:	f7f0 fc4a 	bl	80026d6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8011e42:	2200      	movs	r2, #0
 8011e44:	2100      	movs	r1, #0
 8011e46:	f06f 0003 	mvn.w	r0, #3
 8011e4a:	f7f0 fc44 	bl	80026d6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8011e4e:	2200      	movs	r2, #0
 8011e50:	2100      	movs	r1, #0
 8011e52:	f06f 0001 	mvn.w	r0, #1
 8011e56:	f7f0 fc3e 	bl	80026d6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e62:	f7f0 fc38 	bl	80026d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011e66:	bf00      	nop
 8011e68:	bd80      	pop	{r7, pc}

08011e6a <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b088      	sub	sp, #32
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	4a14      	ldr	r2, [pc, #80]	; (8011ec8 <HAL_ADC_MspInit+0x5e>)
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d121      	bne.n	8011ec0 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	60bb      	str	r3, [r7, #8]
 8011e80:	4a12      	ldr	r2, [pc, #72]	; (8011ecc <HAL_ADC_MspInit+0x62>)
 8011e82:	4b12      	ldr	r3, [pc, #72]	; (8011ecc <HAL_ADC_MspInit+0x62>)
 8011e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e8a:	6453      	str	r3, [r2, #68]	; 0x44
 8011e8c:	4b0f      	ldr	r3, [pc, #60]	; (8011ecc <HAL_ADC_MspInit+0x62>)
 8011e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e94:	60bb      	str	r3, [r7, #8]
 8011e96:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = P_GAIN_Pin|I_GAIN_Pin|INPUT_2_Pin;
 8011e98:	2383      	movs	r3, #131	; 0x83
 8011e9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ea4:	f107 030c 	add.w	r3, r7, #12
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	4809      	ldr	r0, [pc, #36]	; (8011ed0 <HAL_ADC_MspInit+0x66>)
 8011eac:	f7f1 fba6 	bl	80035fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INPUT_Pin;
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011eb4:	f107 030c 	add.w	r3, r7, #12
 8011eb8:	4619      	mov	r1, r3
 8011eba:	4806      	ldr	r0, [pc, #24]	; (8011ed4 <HAL_ADC_MspInit+0x6a>)
 8011ebc:	f7f1 fb9e 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011ec0:	bf00      	nop
 8011ec2:	3720      	adds	r7, #32
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	40012000 	.word	0x40012000
 8011ecc:	40023800 	.word	0x40023800
 8011ed0:	40020000 	.word	0x40020000
 8011ed4:	40020400 	.word	0x40020400

08011ed8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4a08      	ldr	r2, [pc, #32]	; (8011f08 <HAL_ADC_MspDeInit+0x30>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d109      	bne.n	8011efe <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8011eea:	4a08      	ldr	r2, [pc, #32]	; (8011f0c <HAL_ADC_MspDeInit+0x34>)
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <HAL_ADC_MspDeInit+0x34>)
 8011eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ef4:	6453      	str	r3, [r2, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    HAL_GPIO_DeInit(GPIOA, P_GAIN_Pin|I_GAIN_Pin|INPUT_Pin|INPUT_2_Pin);
 8011ef6:	2183      	movs	r1, #131	; 0x83
 8011ef8:	4805      	ldr	r0, [pc, #20]	; (8011f10 <HAL_ADC_MspDeInit+0x38>)
 8011efa:	f7f1 fd01 	bl	8003900 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8011efe:	bf00      	nop
 8011f00:	3708      	adds	r7, #8
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	40012000 	.word	0x40012000
 8011f0c:	40023800 	.word	0x40023800
 8011f10:	40020000 	.word	0x40020000

08011f14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b088      	sub	sp, #32
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a12      	ldr	r2, [pc, #72]	; (8011f6c <HAL_I2C_MspInit+0x58>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d11d      	bne.n	8011f62 <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011f26:	23c0      	movs	r3, #192	; 0xc0
 8011f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011f2a:	2312      	movs	r3, #18
 8011f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f32:	2303      	movs	r3, #3
 8011f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011f36:	2304      	movs	r3, #4
 8011f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f3a:	f107 030c 	add.w	r3, r7, #12
 8011f3e:	4619      	mov	r1, r3
 8011f40:	480b      	ldr	r0, [pc, #44]	; (8011f70 <HAL_I2C_MspInit+0x5c>)
 8011f42:	f7f1 fb5b 	bl	80035fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011f46:	2300      	movs	r3, #0
 8011f48:	60bb      	str	r3, [r7, #8]
 8011f4a:	4a0a      	ldr	r2, [pc, #40]	; (8011f74 <HAL_I2C_MspInit+0x60>)
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <HAL_I2C_MspInit+0x60>)
 8011f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011f54:	6413      	str	r3, [r2, #64]	; 0x40
 8011f56:	4b07      	ldr	r3, [pc, #28]	; (8011f74 <HAL_I2C_MspInit+0x60>)
 8011f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f5e:	60bb      	str	r3, [r7, #8]
 8011f60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8011f62:	bf00      	nop
 8011f64:	3720      	adds	r7, #32
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	40005400 	.word	0x40005400
 8011f70:	40020400 	.word	0x40020400
 8011f74:	40023800 	.word	0x40023800

08011f78 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a08      	ldr	r2, [pc, #32]	; (8011fa8 <HAL_I2C_MspDeInit+0x30>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d109      	bne.n	8011f9e <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011f8a:	4a08      	ldr	r2, [pc, #32]	; (8011fac <HAL_I2C_MspDeInit+0x34>)
 8011f8c:	4b07      	ldr	r3, [pc, #28]	; (8011fac <HAL_I2C_MspDeInit+0x34>)
 8011f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f94:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8011f96:	21c0      	movs	r1, #192	; 0xc0
 8011f98:	4805      	ldr	r0, [pc, #20]	; (8011fb0 <HAL_I2C_MspDeInit+0x38>)
 8011f9a:	f7f1 fcb1 	bl	8003900 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8011f9e:	bf00      	nop
 8011fa0:	3708      	adds	r7, #8
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	40005400 	.word	0x40005400
 8011fac:	40023800 	.word	0x40023800
 8011fb0:	40020400 	.word	0x40020400

08011fb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a18      	ldr	r2, [pc, #96]	; (8012024 <HAL_TIM_Base_MspInit+0x70>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d10e      	bne.n	8011fe4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	60fb      	str	r3, [r7, #12]
 8011fca:	4a17      	ldr	r2, [pc, #92]	; (8012028 <HAL_TIM_Base_MspInit+0x74>)
 8011fcc:	4b16      	ldr	r3, [pc, #88]	; (8012028 <HAL_TIM_Base_MspInit+0x74>)
 8011fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fd0:	f043 0301 	orr.w	r3, r3, #1
 8011fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8011fd6:	4b14      	ldr	r3, [pc, #80]	; (8012028 <HAL_TIM_Base_MspInit+0x74>)
 8011fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fda:	f003 0301 	and.w	r3, r3, #1
 8011fde:	60fb      	str	r3, [r7, #12]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8011fe2:	e01a      	b.n	801201a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4a10      	ldr	r2, [pc, #64]	; (801202c <HAL_TIM_Base_MspInit+0x78>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d115      	bne.n	801201a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60bb      	str	r3, [r7, #8]
 8011ff2:	4a0d      	ldr	r2, [pc, #52]	; (8012028 <HAL_TIM_Base_MspInit+0x74>)
 8011ff4:	4b0c      	ldr	r3, [pc, #48]	; (8012028 <HAL_TIM_Base_MspInit+0x74>)
 8011ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff8:	f043 0302 	orr.w	r3, r3, #2
 8011ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8011ffe:	4b0a      	ldr	r3, [pc, #40]	; (8012028 <HAL_TIM_Base_MspInit+0x74>)
 8012000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012002:	f003 0302 	and.w	r3, r3, #2
 8012006:	60bb      	str	r3, [r7, #8]
 8012008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 2);
 801200a:	2202      	movs	r2, #2
 801200c:	2102      	movs	r1, #2
 801200e:	201d      	movs	r0, #29
 8012010:	f7f0 fb61 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012014:	201d      	movs	r0, #29
 8012016:	f7f0 fb7a 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 801201a:	bf00      	nop
 801201c:	3710      	adds	r7, #16
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
 8012022:	bf00      	nop
 8012024:	40010000 	.word	0x40010000
 8012028:	40023800 	.word	0x40023800
 801202c:	40000400 	.word	0x40000400

08012030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a0b      	ldr	r2, [pc, #44]	; (801206c <HAL_TIM_MspPostInit+0x3c>)
 801203e:	4293      	cmp	r3, r2
 8012040:	d110      	bne.n	8012064 <HAL_TIM_MspPostInit+0x34>
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin|MOTOR4_Pin;
 8012042:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8012046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012048:	2302      	movs	r3, #2
 801204a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801204c:	2300      	movs	r3, #0
 801204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012050:	2300      	movs	r3, #0
 8012052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012054:	2301      	movs	r3, #1
 8012056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012058:	f107 030c 	add.w	r3, r7, #12
 801205c:	4619      	mov	r1, r3
 801205e:	4804      	ldr	r0, [pc, #16]	; (8012070 <HAL_TIM_MspPostInit+0x40>)
 8012060:	f7f1 facc 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8012064:	bf00      	nop
 8012066:	3720      	adds	r7, #32
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	40010000 	.word	0x40010000
 8012070:	40020000 	.word	0x40020000

08012074 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a0d      	ldr	r2, [pc, #52]	; (80120b8 <HAL_TIM_Base_MspDeInit+0x44>)
 8012082:	4293      	cmp	r3, r2
 8012084:	d106      	bne.n	8012094 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8012086:	4a0d      	ldr	r2, [pc, #52]	; (80120bc <HAL_TIM_Base_MspDeInit+0x48>)
 8012088:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <HAL_TIM_Base_MspDeInit+0x48>)
 801208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801208c:	f023 0301 	bic.w	r3, r3, #1
 8012090:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8012092:	e00d      	b.n	80120b0 <HAL_TIM_Base_MspDeInit+0x3c>
  else if(htim_base->Instance==TIM3)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4a09      	ldr	r2, [pc, #36]	; (80120c0 <HAL_TIM_Base_MspDeInit+0x4c>)
 801209a:	4293      	cmp	r3, r2
 801209c:	d108      	bne.n	80120b0 <HAL_TIM_Base_MspDeInit+0x3c>
    __HAL_RCC_TIM3_CLK_DISABLE();
 801209e:	4a07      	ldr	r2, [pc, #28]	; (80120bc <HAL_TIM_Base_MspDeInit+0x48>)
 80120a0:	4b06      	ldr	r3, [pc, #24]	; (80120bc <HAL_TIM_Base_MspDeInit+0x48>)
 80120a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120a4:	f023 0302 	bic.w	r3, r3, #2
 80120a8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80120aa:	201d      	movs	r0, #29
 80120ac:	f7f0 fb3d 	bl	800272a <HAL_NVIC_DisableIRQ>
}
 80120b0:	bf00      	nop
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	40010000 	.word	0x40010000
 80120bc:	40023800 	.word	0x40023800
 80120c0:	40000400 	.word	0x40000400

080120c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b088      	sub	sp, #32
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a16      	ldr	r2, [pc, #88]	; (801212c <HAL_UART_MspInit+0x68>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d125      	bne.n	8012122 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80120d6:	2300      	movs	r3, #0
 80120d8:	60bb      	str	r3, [r7, #8]
 80120da:	4a15      	ldr	r2, [pc, #84]	; (8012130 <HAL_UART_MspInit+0x6c>)
 80120dc:	4b14      	ldr	r3, [pc, #80]	; (8012130 <HAL_UART_MspInit+0x6c>)
 80120de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80120e4:	6413      	str	r3, [r2, #64]	; 0x40
 80120e6:	4b12      	ldr	r3, [pc, #72]	; (8012130 <HAL_UART_MspInit+0x6c>)
 80120e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120ee:	60bb      	str	r3, [r7, #8]
 80120f0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80120f2:	230c      	movs	r3, #12
 80120f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120f6:	2302      	movs	r3, #2
 80120f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120fa:	2300      	movs	r3, #0
 80120fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80120fe:	2300      	movs	r3, #0
 8012100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012102:	2307      	movs	r3, #7
 8012104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012106:	f107 030c 	add.w	r3, r7, #12
 801210a:	4619      	mov	r1, r3
 801210c:	4809      	ldr	r0, [pc, #36]	; (8012134 <HAL_UART_MspInit+0x70>)
 801210e:	f7f1 fa75 	bl	80035fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8012112:	2200      	movs	r2, #0
 8012114:	2101      	movs	r1, #1
 8012116:	2026      	movs	r0, #38	; 0x26
 8012118:	f7f0 fadd 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801211c:	2026      	movs	r0, #38	; 0x26
 801211e:	f7f0 faf6 	bl	800270e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012122:	bf00      	nop
 8012124:	3720      	adds	r7, #32
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	40004400 	.word	0x40004400
 8012130:	40023800 	.word	0x40023800
 8012134:	40020000 	.word	0x40020000

08012138 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]

  if(huart->Instance==USART2)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4a09      	ldr	r2, [pc, #36]	; (801216c <HAL_UART_MspDeInit+0x34>)
 8012146:	4293      	cmp	r3, r2
 8012148:	d10c      	bne.n	8012164 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 801214a:	4a09      	ldr	r2, [pc, #36]	; (8012170 <HAL_UART_MspDeInit+0x38>)
 801214c:	4b08      	ldr	r3, [pc, #32]	; (8012170 <HAL_UART_MspDeInit+0x38>)
 801214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012154:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8012156:	210c      	movs	r1, #12
 8012158:	4806      	ldr	r0, [pc, #24]	; (8012174 <HAL_UART_MspDeInit+0x3c>)
 801215a:	f7f1 fbd1 	bl	8003900 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 801215e:	2026      	movs	r0, #38	; 0x26
 8012160:	f7f0 fae3 	bl	800272a <HAL_NVIC_DisableIRQ>
  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	40004400 	.word	0x40004400
 8012170:	40023800 	.word	0x40023800
 8012174:	40020000 	.word	0x40020000

08012178 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801217c:	f7ee f8a4 	bl	80002c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8012180:	f7f0 fbe0 	bl	8002944 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012184:	bf00      	nop
 8012186:	bd80      	pop	{r7, pc}

08012188 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 801218c:	4802      	ldr	r0, [pc, #8]	; (8012198 <TIM3_IRQHandler+0x10>)
 801218e:	f7f9 f9b7 	bl	800b500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012192:	bf00      	nop
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	20000078 	.word	0x20000078

0801219c <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801219c:	b5b0      	push	{r4, r5, r7, lr}
 801219e:	b092      	sub	sp, #72	; 0x48
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4a87      	ldr	r2, [pc, #540]	; (80123c8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80121aa:	4293      	cmp	r3, r2
 80121ac:	f040 80fe 	bne.w	80123ac <HAL_TIM_PeriodElapsedCallback+0x210>

		/*Get Channel 0 data */
		__ADC_CHOOSE_CHANNEL__(hadc1, ADC_CHANNEL_0);
 80121b0:	2300      	movs	r3, #0
 80121b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80121b4:	2301      	movs	r3, #1
 80121b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121b8:	2300      	movs	r3, #0
 80121ba:	643b      	str	r3, [r7, #64]	; 0x40
 80121bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80121c0:	4619      	mov	r1, r3
 80121c2:	4882      	ldr	r0, [pc, #520]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80121c4:	f7ee ff65 	bl	8001092 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80121c8:	4880      	ldr	r0, [pc, #512]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80121ca:	f7ee fa36 	bl	800063a <HAL_ADC_Start>
		while(!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) ) {} //Wait for conversion
 80121ce:	bf00      	nop
 80121d0:	4b7e      	ldr	r3, [pc, #504]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f003 0302 	and.w	r3, r3, #2
 80121da:	2b02      	cmp	r3, #2
 80121dc:	d1f8      	bne.n	80121d0 <HAL_TIM_PeriodElapsedCallback+0x34>
		input_1 = round(0.9*(double)input_1 + 0.1*(double)HAL_ADC_GetValue(&hadc1));
 80121de:	4b7c      	ldr	r3, [pc, #496]	; (80123d0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f000 fafe 	bl	80127e4 <__aeabi_ui2d>
 80121e8:	a373      	add	r3, pc, #460	; (adr r3, 80123b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80121ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ee:	f000 fb6f 	bl	80128d0 <__aeabi_dmul>
 80121f2:	4603      	mov	r3, r0
 80121f4:	460c      	mov	r4, r1
 80121f6:	4625      	mov	r5, r4
 80121f8:	461c      	mov	r4, r3
 80121fa:	4874      	ldr	r0, [pc, #464]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80121fc:	f7ee ff14 	bl	8001028 <HAL_ADC_GetValue>
 8012200:	4603      	mov	r3, r0
 8012202:	4618      	mov	r0, r3
 8012204:	f000 faee 	bl	80127e4 <__aeabi_ui2d>
 8012208:	a36d      	add	r3, pc, #436	; (adr r3, 80123c0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f000 fb5f 	bl	80128d0 <__aeabi_dmul>
 8012212:	4602      	mov	r2, r0
 8012214:	460b      	mov	r3, r1
 8012216:	4620      	mov	r0, r4
 8012218:	4629      	mov	r1, r5
 801221a:	f000 f9a7 	bl	801256c <__adddf3>
 801221e:	4603      	mov	r3, r0
 8012220:	460c      	mov	r4, r1
 8012222:	ec44 3b17 	vmov	d7, r3, r4
 8012226:	eeb0 0a47 	vmov.f32	s0, s14
 801222a:	eef0 0a67 	vmov.f32	s1, s15
 801222e:	f000 fea7 	bl	8012f80 <round>
 8012232:	ec54 3b10 	vmov	r3, r4, d0
 8012236:	4618      	mov	r0, r3
 8012238:	4621      	mov	r1, r4
 801223a:	f000 fde3 	bl	8012e04 <__aeabi_d2uiz>
 801223e:	4602      	mov	r2, r0
 8012240:	4b63      	ldr	r3, [pc, #396]	; (80123d0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8012242:	601a      	str	r2, [r3, #0]

		/*Get Channel 1 data */
		__ADC_CHOOSE_CHANNEL__(hadc1, ADC_CHANNEL_1);
 8012244:	2301      	movs	r3, #1
 8012246:	62bb      	str	r3, [r7, #40]	; 0x28
 8012248:	2301      	movs	r3, #1
 801224a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801224c:	2300      	movs	r3, #0
 801224e:	633b      	str	r3, [r7, #48]	; 0x30
 8012250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012254:	4619      	mov	r1, r3
 8012256:	485d      	ldr	r0, [pc, #372]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012258:	f7ee ff1b 	bl	8001092 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 801225c:	485b      	ldr	r0, [pc, #364]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 801225e:	f7ee f9ec 	bl	800063a <HAL_ADC_Start>
		while(!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) ) {}
 8012262:	bf00      	nop
 8012264:	4b59      	ldr	r3, [pc, #356]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f003 0302 	and.w	r3, r3, #2
 801226e:	2b02      	cmp	r3, #2
 8012270:	d1f8      	bne.n	8012264 <HAL_TIM_PeriodElapsedCallback+0xc8>
		input_2 = round(0.9*(double)input_2 + 0.1*(double)HAL_ADC_GetValue(&hadc1));
 8012272:	4b58      	ldr	r3, [pc, #352]	; (80123d4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	4618      	mov	r0, r3
 8012278:	f000 fab4 	bl	80127e4 <__aeabi_ui2d>
 801227c:	a34e      	add	r3, pc, #312	; (adr r3, 80123b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	f000 fb25 	bl	80128d0 <__aeabi_dmul>
 8012286:	4603      	mov	r3, r0
 8012288:	460c      	mov	r4, r1
 801228a:	4625      	mov	r5, r4
 801228c:	461c      	mov	r4, r3
 801228e:	484f      	ldr	r0, [pc, #316]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012290:	f7ee feca 	bl	8001028 <HAL_ADC_GetValue>
 8012294:	4603      	mov	r3, r0
 8012296:	4618      	mov	r0, r3
 8012298:	f000 faa4 	bl	80127e4 <__aeabi_ui2d>
 801229c:	a348      	add	r3, pc, #288	; (adr r3, 80123c0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f000 fb15 	bl	80128d0 <__aeabi_dmul>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4620      	mov	r0, r4
 80122ac:	4629      	mov	r1, r5
 80122ae:	f000 f95d 	bl	801256c <__adddf3>
 80122b2:	4603      	mov	r3, r0
 80122b4:	460c      	mov	r4, r1
 80122b6:	ec44 3b17 	vmov	d7, r3, r4
 80122ba:	eeb0 0a47 	vmov.f32	s0, s14
 80122be:	eef0 0a67 	vmov.f32	s1, s15
 80122c2:	f000 fe5d 	bl	8012f80 <round>
 80122c6:	ec54 3b10 	vmov	r3, r4, d0
 80122ca:	4618      	mov	r0, r3
 80122cc:	4621      	mov	r1, r4
 80122ce:	f000 fd99 	bl	8012e04 <__aeabi_d2uiz>
 80122d2:	4602      	mov	r2, r0
 80122d4:	4b3f      	ldr	r3, [pc, #252]	; (80123d4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80122d6:	601a      	str	r2, [r3, #0]

		/*Get Channel 6 data */
		__ADC_CHOOSE_CHANNEL__(hadc1, ADC_CHANNEL_7);
 80122d8:	2307      	movs	r3, #7
 80122da:	61bb      	str	r3, [r7, #24]
 80122dc:	2301      	movs	r3, #1
 80122de:	61fb      	str	r3, [r7, #28]
 80122e0:	2300      	movs	r3, #0
 80122e2:	623b      	str	r3, [r7, #32]
 80122e4:	f107 0318 	add.w	r3, r7, #24
 80122e8:	4619      	mov	r1, r3
 80122ea:	4838      	ldr	r0, [pc, #224]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80122ec:	f7ee fed1 	bl	8001092 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80122f0:	4836      	ldr	r0, [pc, #216]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80122f2:	f7ee f9a2 	bl	800063a <HAL_ADC_Start>
		while(!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) ) {}
 80122f6:	bf00      	nop
 80122f8:	4b34      	ldr	r3, [pc, #208]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f003 0302 	and.w	r3, r3, #2
 8012302:	2b02      	cmp	r3, #2
 8012304:	d1f8      	bne.n	80122f8 <HAL_TIM_PeriodElapsedCallback+0x15c>
		input_3 = HAL_ADC_GetValue(&hadc1);
 8012306:	4831      	ldr	r0, [pc, #196]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012308:	f7ee fe8e 	bl	8001028 <HAL_ADC_GetValue>
 801230c:	4602      	mov	r2, r0
 801230e:	4b32      	ldr	r3, [pc, #200]	; (80123d8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8012310:	601a      	str	r2, [r3, #0]

		//convert inpt 3 based on circuit topology
		input_3 = (4040/(float)input_3 - 1)*2048;
 8012312:	4b31      	ldr	r3, [pc, #196]	; (80123d8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	ee07 3a90 	vmov	s15, r3
 801231a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801231e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80123dc <HAL_TIM_PeriodElapsedCallback+0x240>
 8012322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801232a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801232e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80123e0 <HAL_TIM_PeriodElapsedCallback+0x244>
 8012332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801233a:	ee17 2a90 	vmov	r2, s15
 801233e:	4b26      	ldr	r3, [pc, #152]	; (80123d8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8012340:	601a      	str	r2, [r3, #0]

		/*Get Channel 7 data */
		__ADC_CHOOSE_CHANNEL__(hadc1, ADC_CHANNEL_8);
 8012342:	2308      	movs	r3, #8
 8012344:	60bb      	str	r3, [r7, #8]
 8012346:	2301      	movs	r3, #1
 8012348:	60fb      	str	r3, [r7, #12]
 801234a:	2300      	movs	r3, #0
 801234c:	613b      	str	r3, [r7, #16]
 801234e:	f107 0308 	add.w	r3, r7, #8
 8012352:	4619      	mov	r1, r3
 8012354:	481d      	ldr	r0, [pc, #116]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012356:	f7ee fe9c 	bl	8001092 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 801235a:	481c      	ldr	r0, [pc, #112]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 801235c:	f7ee f96d 	bl	800063a <HAL_ADC_Start>
		while(!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) ) {}
 8012360:	bf00      	nop
 8012362:	4b1a      	ldr	r3, [pc, #104]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f003 0302 	and.w	r3, r3, #2
 801236c:	2b02      	cmp	r3, #2
 801236e:	d1f8      	bne.n	8012362 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		input_4 = HAL_ADC_GetValue(&hadc1);
 8012370:	4816      	ldr	r0, [pc, #88]	; (80123cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8012372:	f7ee fe59 	bl	8001028 <HAL_ADC_GetValue>
 8012376:	4602      	mov	r2, r0
 8012378:	4b1a      	ldr	r3, [pc, #104]	; (80123e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 801237a:	601a      	str	r2, [r3, #0]

		input_4 = (3800/(float)input_4 - 1)*2048;
 801237c:	4b19      	ldr	r3, [pc, #100]	; (80123e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	ee07 3a90 	vmov	s15, r3
 8012384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012388:	eddf 6a17 	vldr	s13, [pc, #92]	; 80123e8 <HAL_TIM_PeriodElapsedCallback+0x24c>
 801238c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012398:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80123e0 <HAL_TIM_PeriodElapsedCallback+0x244>
 801239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123a4:	ee17 2a90 	vmov	r2, s15
 80123a8:	4b0e      	ldr	r3, [pc, #56]	; (80123e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80123aa:	601a      	str	r2, [r3, #0]

	}
}
 80123ac:	bf00      	nop
 80123ae:	3748      	adds	r7, #72	; 0x48
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bdb0      	pop	{r4, r5, r7, pc}
 80123b4:	f3af 8000 	nop.w
 80123b8:	cccccccd 	.word	0xcccccccd
 80123bc:	3feccccc 	.word	0x3feccccc
 80123c0:	9999999a 	.word	0x9999999a
 80123c4:	3fb99999 	.word	0x3fb99999
 80123c8:	40000400 	.word	0x40000400
 80123cc:	200000b4 	.word	0x200000b4
 80123d0:	20000190 	.word	0x20000190
 80123d4:	20000184 	.word	0x20000184
 80123d8:	2000018c 	.word	0x2000018c
 80123dc:	457c8000 	.word	0x457c8000
 80123e0:	45000000 	.word	0x45000000
 80123e4:	20000180 	.word	0x20000180
 80123e8:	456d8000 	.word	0x456d8000

080123ec <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80123f0:	4802      	ldr	r0, [pc, #8]	; (80123fc <USART2_IRQHandler+0x10>)
 80123f2:	f7fd f8ff 	bl	800f5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80123f6:	bf00      	nop
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	20000138 	.word	0x20000138

08012400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012400:	b480      	push	{r7}
 8012402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012404:	4a16      	ldr	r2, [pc, #88]	; (8012460 <SystemInit+0x60>)
 8012406:	4b16      	ldr	r3, [pc, #88]	; (8012460 <SystemInit+0x60>)
 8012408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012414:	4a13      	ldr	r2, [pc, #76]	; (8012464 <SystemInit+0x64>)
 8012416:	4b13      	ldr	r3, [pc, #76]	; (8012464 <SystemInit+0x64>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f043 0301 	orr.w	r3, r3, #1
 801241e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012420:	4b10      	ldr	r3, [pc, #64]	; (8012464 <SystemInit+0x64>)
 8012422:	2200      	movs	r2, #0
 8012424:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012426:	4a0f      	ldr	r2, [pc, #60]	; (8012464 <SystemInit+0x64>)
 8012428:	4b0e      	ldr	r3, [pc, #56]	; (8012464 <SystemInit+0x64>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012434:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012436:	4b0b      	ldr	r3, [pc, #44]	; (8012464 <SystemInit+0x64>)
 8012438:	4a0b      	ldr	r2, [pc, #44]	; (8012468 <SystemInit+0x68>)
 801243a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801243c:	4a09      	ldr	r2, [pc, #36]	; (8012464 <SystemInit+0x64>)
 801243e:	4b09      	ldr	r3, [pc, #36]	; (8012464 <SystemInit+0x64>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012448:	4b06      	ldr	r3, [pc, #24]	; (8012464 <SystemInit+0x64>)
 801244a:	2200      	movs	r2, #0
 801244c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801244e:	4b04      	ldr	r3, [pc, #16]	; (8012460 <SystemInit+0x60>)
 8012450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012454:	609a      	str	r2, [r3, #8]
#endif
}
 8012456:	bf00      	nop
 8012458:	46bd      	mov	sp, r7
 801245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245e:	4770      	bx	lr
 8012460:	e000ed00 	.word	0xe000ed00
 8012464:	40023800 	.word	0x40023800
 8012468:	24003010 	.word	0x24003010

0801246c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 801246c:	b480      	push	{r7}
 801246e:	b087      	sub	sp, #28
 8012470:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8012472:	2300      	movs	r3, #0
 8012474:	613b      	str	r3, [r7, #16]
 8012476:	2300      	movs	r3, #0
 8012478:	617b      	str	r3, [r7, #20]
 801247a:	2302      	movs	r3, #2
 801247c:	60fb      	str	r3, [r7, #12]
 801247e:	2300      	movs	r3, #0
 8012480:	60bb      	str	r3, [r7, #8]
 8012482:	2302      	movs	r3, #2
 8012484:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8012486:	4b31      	ldr	r3, [pc, #196]	; (801254c <SystemCoreClockUpdate+0xe0>)
 8012488:	689b      	ldr	r3, [r3, #8]
 801248a:	f003 030c 	and.w	r3, r3, #12
 801248e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	2b04      	cmp	r3, #4
 8012494:	d007      	beq.n	80124a6 <SystemCoreClockUpdate+0x3a>
 8012496:	2b08      	cmp	r3, #8
 8012498:	d009      	beq.n	80124ae <SystemCoreClockUpdate+0x42>
 801249a:	2b00      	cmp	r3, #0
 801249c:	d13d      	bne.n	801251a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 801249e:	4b2c      	ldr	r3, [pc, #176]	; (8012550 <SystemCoreClockUpdate+0xe4>)
 80124a0:	4a2c      	ldr	r2, [pc, #176]	; (8012554 <SystemCoreClockUpdate+0xe8>)
 80124a2:	601a      	str	r2, [r3, #0]
      break;
 80124a4:	e03d      	b.n	8012522 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80124a6:	4b2a      	ldr	r3, [pc, #168]	; (8012550 <SystemCoreClockUpdate+0xe4>)
 80124a8:	4a2b      	ldr	r2, [pc, #172]	; (8012558 <SystemCoreClockUpdate+0xec>)
 80124aa:	601a      	str	r2, [r3, #0]
      break;
 80124ac:	e039      	b.n	8012522 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80124ae:	4b27      	ldr	r3, [pc, #156]	; (801254c <SystemCoreClockUpdate+0xe0>)
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	0d9b      	lsrs	r3, r3, #22
 80124b4:	f003 0301 	and.w	r3, r3, #1
 80124b8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80124ba:	4b24      	ldr	r3, [pc, #144]	; (801254c <SystemCoreClockUpdate+0xe0>)
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80124c2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00c      	beq.n	80124e4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80124ca:	4a23      	ldr	r2, [pc, #140]	; (8012558 <SystemCoreClockUpdate+0xec>)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80124d2:	4a1e      	ldr	r2, [pc, #120]	; (801254c <SystemCoreClockUpdate+0xe0>)
 80124d4:	6852      	ldr	r2, [r2, #4]
 80124d6:	0992      	lsrs	r2, r2, #6
 80124d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80124dc:	fb02 f303 	mul.w	r3, r2, r3
 80124e0:	617b      	str	r3, [r7, #20]
 80124e2:	e00b      	b.n	80124fc <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80124e4:	4a1b      	ldr	r2, [pc, #108]	; (8012554 <SystemCoreClockUpdate+0xe8>)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80124ec:	4a17      	ldr	r2, [pc, #92]	; (801254c <SystemCoreClockUpdate+0xe0>)
 80124ee:	6852      	ldr	r2, [r2, #4]
 80124f0:	0992      	lsrs	r2, r2, #6
 80124f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80124f6:	fb02 f303 	mul.w	r3, r2, r3
 80124fa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80124fc:	4b13      	ldr	r3, [pc, #76]	; (801254c <SystemCoreClockUpdate+0xe0>)
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	0c1b      	lsrs	r3, r3, #16
 8012502:	f003 0303 	and.w	r3, r3, #3
 8012506:	3301      	adds	r3, #1
 8012508:	005b      	lsls	r3, r3, #1
 801250a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 801250c:	697a      	ldr	r2, [r7, #20]
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	fbb2 f3f3 	udiv	r3, r2, r3
 8012514:	4a0e      	ldr	r2, [pc, #56]	; (8012550 <SystemCoreClockUpdate+0xe4>)
 8012516:	6013      	str	r3, [r2, #0]
      break;
 8012518:	e003      	b.n	8012522 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 801251a:	4b0d      	ldr	r3, [pc, #52]	; (8012550 <SystemCoreClockUpdate+0xe4>)
 801251c:	4a0d      	ldr	r2, [pc, #52]	; (8012554 <SystemCoreClockUpdate+0xe8>)
 801251e:	601a      	str	r2, [r3, #0]
      break;
 8012520:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8012522:	4b0a      	ldr	r3, [pc, #40]	; (801254c <SystemCoreClockUpdate+0xe0>)
 8012524:	689b      	ldr	r3, [r3, #8]
 8012526:	091b      	lsrs	r3, r3, #4
 8012528:	f003 030f 	and.w	r3, r3, #15
 801252c:	4a0b      	ldr	r2, [pc, #44]	; (801255c <SystemCoreClockUpdate+0xf0>)
 801252e:	5cd3      	ldrb	r3, [r2, r3]
 8012530:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8012532:	4b07      	ldr	r3, [pc, #28]	; (8012550 <SystemCoreClockUpdate+0xe4>)
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	fa22 f303 	lsr.w	r3, r2, r3
 801253c:	4a04      	ldr	r2, [pc, #16]	; (8012550 <SystemCoreClockUpdate+0xe4>)
 801253e:	6013      	str	r3, [r2, #0]
}
 8012540:	bf00      	nop
 8012542:	371c      	adds	r7, #28
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr
 801254c:	40023800 	.word	0x40023800
 8012550:	20000000 	.word	0x20000000
 8012554:	00f42400 	.word	0x00f42400
 8012558:	007a1200 	.word	0x007a1200
 801255c:	08013564 	.word	0x08013564

08012560 <__aeabi_drsub>:
 8012560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8012564:	e002      	b.n	801256c <__adddf3>
 8012566:	bf00      	nop

08012568 <__aeabi_dsub>:
 8012568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801256c <__adddf3>:
 801256c:	b530      	push	{r4, r5, lr}
 801256e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8012572:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8012576:	ea94 0f05 	teq	r4, r5
 801257a:	bf08      	it	eq
 801257c:	ea90 0f02 	teqeq	r0, r2
 8012580:	bf1f      	itttt	ne
 8012582:	ea54 0c00 	orrsne.w	ip, r4, r0
 8012586:	ea55 0c02 	orrsne.w	ip, r5, r2
 801258a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801258e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8012592:	f000 80e2 	beq.w	801275a <__adddf3+0x1ee>
 8012596:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801259a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801259e:	bfb8      	it	lt
 80125a0:	426d      	neglt	r5, r5
 80125a2:	dd0c      	ble.n	80125be <__adddf3+0x52>
 80125a4:	442c      	add	r4, r5
 80125a6:	ea80 0202 	eor.w	r2, r0, r2
 80125aa:	ea81 0303 	eor.w	r3, r1, r3
 80125ae:	ea82 0000 	eor.w	r0, r2, r0
 80125b2:	ea83 0101 	eor.w	r1, r3, r1
 80125b6:	ea80 0202 	eor.w	r2, r0, r2
 80125ba:	ea81 0303 	eor.w	r3, r1, r3
 80125be:	2d36      	cmp	r5, #54	; 0x36
 80125c0:	bf88      	it	hi
 80125c2:	bd30      	pophi	{r4, r5, pc}
 80125c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80125c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80125cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80125d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80125d4:	d002      	beq.n	80125dc <__adddf3+0x70>
 80125d6:	4240      	negs	r0, r0
 80125d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80125dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80125e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80125e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80125e8:	d002      	beq.n	80125f0 <__adddf3+0x84>
 80125ea:	4252      	negs	r2, r2
 80125ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80125f0:	ea94 0f05 	teq	r4, r5
 80125f4:	f000 80a7 	beq.w	8012746 <__adddf3+0x1da>
 80125f8:	f1a4 0401 	sub.w	r4, r4, #1
 80125fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8012600:	db0d      	blt.n	801261e <__adddf3+0xb2>
 8012602:	fa02 fc0e 	lsl.w	ip, r2, lr
 8012606:	fa22 f205 	lsr.w	r2, r2, r5
 801260a:	1880      	adds	r0, r0, r2
 801260c:	f141 0100 	adc.w	r1, r1, #0
 8012610:	fa03 f20e 	lsl.w	r2, r3, lr
 8012614:	1880      	adds	r0, r0, r2
 8012616:	fa43 f305 	asr.w	r3, r3, r5
 801261a:	4159      	adcs	r1, r3
 801261c:	e00e      	b.n	801263c <__adddf3+0xd0>
 801261e:	f1a5 0520 	sub.w	r5, r5, #32
 8012622:	f10e 0e20 	add.w	lr, lr, #32
 8012626:	2a01      	cmp	r2, #1
 8012628:	fa03 fc0e 	lsl.w	ip, r3, lr
 801262c:	bf28      	it	cs
 801262e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8012632:	fa43 f305 	asr.w	r3, r3, r5
 8012636:	18c0      	adds	r0, r0, r3
 8012638:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801263c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8012640:	d507      	bpl.n	8012652 <__adddf3+0xe6>
 8012642:	f04f 0e00 	mov.w	lr, #0
 8012646:	f1dc 0c00 	rsbs	ip, ip, #0
 801264a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801264e:	eb6e 0101 	sbc.w	r1, lr, r1
 8012652:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012656:	d31b      	bcc.n	8012690 <__adddf3+0x124>
 8012658:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801265c:	d30c      	bcc.n	8012678 <__adddf3+0x10c>
 801265e:	0849      	lsrs	r1, r1, #1
 8012660:	ea5f 0030 	movs.w	r0, r0, rrx
 8012664:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8012668:	f104 0401 	add.w	r4, r4, #1
 801266c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8012670:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8012674:	f080 809a 	bcs.w	80127ac <__adddf3+0x240>
 8012678:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801267c:	bf08      	it	eq
 801267e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8012682:	f150 0000 	adcs.w	r0, r0, #0
 8012686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801268a:	ea41 0105 	orr.w	r1, r1, r5
 801268e:	bd30      	pop	{r4, r5, pc}
 8012690:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8012694:	4140      	adcs	r0, r0
 8012696:	eb41 0101 	adc.w	r1, r1, r1
 801269a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801269e:	f1a4 0401 	sub.w	r4, r4, #1
 80126a2:	d1e9      	bne.n	8012678 <__adddf3+0x10c>
 80126a4:	f091 0f00 	teq	r1, #0
 80126a8:	bf04      	itt	eq
 80126aa:	4601      	moveq	r1, r0
 80126ac:	2000      	moveq	r0, #0
 80126ae:	fab1 f381 	clz	r3, r1
 80126b2:	bf08      	it	eq
 80126b4:	3320      	addeq	r3, #32
 80126b6:	f1a3 030b 	sub.w	r3, r3, #11
 80126ba:	f1b3 0220 	subs.w	r2, r3, #32
 80126be:	da0c      	bge.n	80126da <__adddf3+0x16e>
 80126c0:	320c      	adds	r2, #12
 80126c2:	dd08      	ble.n	80126d6 <__adddf3+0x16a>
 80126c4:	f102 0c14 	add.w	ip, r2, #20
 80126c8:	f1c2 020c 	rsb	r2, r2, #12
 80126cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80126d0:	fa21 f102 	lsr.w	r1, r1, r2
 80126d4:	e00c      	b.n	80126f0 <__adddf3+0x184>
 80126d6:	f102 0214 	add.w	r2, r2, #20
 80126da:	bfd8      	it	le
 80126dc:	f1c2 0c20 	rsble	ip, r2, #32
 80126e0:	fa01 f102 	lsl.w	r1, r1, r2
 80126e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80126e8:	bfdc      	itt	le
 80126ea:	ea41 010c 	orrle.w	r1, r1, ip
 80126ee:	4090      	lslle	r0, r2
 80126f0:	1ae4      	subs	r4, r4, r3
 80126f2:	bfa2      	ittt	ge
 80126f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80126f8:	4329      	orrge	r1, r5
 80126fa:	bd30      	popge	{r4, r5, pc}
 80126fc:	ea6f 0404 	mvn.w	r4, r4
 8012700:	3c1f      	subs	r4, #31
 8012702:	da1c      	bge.n	801273e <__adddf3+0x1d2>
 8012704:	340c      	adds	r4, #12
 8012706:	dc0e      	bgt.n	8012726 <__adddf3+0x1ba>
 8012708:	f104 0414 	add.w	r4, r4, #20
 801270c:	f1c4 0220 	rsb	r2, r4, #32
 8012710:	fa20 f004 	lsr.w	r0, r0, r4
 8012714:	fa01 f302 	lsl.w	r3, r1, r2
 8012718:	ea40 0003 	orr.w	r0, r0, r3
 801271c:	fa21 f304 	lsr.w	r3, r1, r4
 8012720:	ea45 0103 	orr.w	r1, r5, r3
 8012724:	bd30      	pop	{r4, r5, pc}
 8012726:	f1c4 040c 	rsb	r4, r4, #12
 801272a:	f1c4 0220 	rsb	r2, r4, #32
 801272e:	fa20 f002 	lsr.w	r0, r0, r2
 8012732:	fa01 f304 	lsl.w	r3, r1, r4
 8012736:	ea40 0003 	orr.w	r0, r0, r3
 801273a:	4629      	mov	r1, r5
 801273c:	bd30      	pop	{r4, r5, pc}
 801273e:	fa21 f004 	lsr.w	r0, r1, r4
 8012742:	4629      	mov	r1, r5
 8012744:	bd30      	pop	{r4, r5, pc}
 8012746:	f094 0f00 	teq	r4, #0
 801274a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801274e:	bf06      	itte	eq
 8012750:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8012754:	3401      	addeq	r4, #1
 8012756:	3d01      	subne	r5, #1
 8012758:	e74e      	b.n	80125f8 <__adddf3+0x8c>
 801275a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801275e:	bf18      	it	ne
 8012760:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8012764:	d029      	beq.n	80127ba <__adddf3+0x24e>
 8012766:	ea94 0f05 	teq	r4, r5
 801276a:	bf08      	it	eq
 801276c:	ea90 0f02 	teqeq	r0, r2
 8012770:	d005      	beq.n	801277e <__adddf3+0x212>
 8012772:	ea54 0c00 	orrs.w	ip, r4, r0
 8012776:	bf04      	itt	eq
 8012778:	4619      	moveq	r1, r3
 801277a:	4610      	moveq	r0, r2
 801277c:	bd30      	pop	{r4, r5, pc}
 801277e:	ea91 0f03 	teq	r1, r3
 8012782:	bf1e      	ittt	ne
 8012784:	2100      	movne	r1, #0
 8012786:	2000      	movne	r0, #0
 8012788:	bd30      	popne	{r4, r5, pc}
 801278a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801278e:	d105      	bne.n	801279c <__adddf3+0x230>
 8012790:	0040      	lsls	r0, r0, #1
 8012792:	4149      	adcs	r1, r1
 8012794:	bf28      	it	cs
 8012796:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801279a:	bd30      	pop	{r4, r5, pc}
 801279c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80127a0:	bf3c      	itt	cc
 80127a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80127a6:	bd30      	popcc	{r4, r5, pc}
 80127a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80127ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80127b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80127b4:	f04f 0000 	mov.w	r0, #0
 80127b8:	bd30      	pop	{r4, r5, pc}
 80127ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80127be:	bf1a      	itte	ne
 80127c0:	4619      	movne	r1, r3
 80127c2:	4610      	movne	r0, r2
 80127c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80127c8:	bf1c      	itt	ne
 80127ca:	460b      	movne	r3, r1
 80127cc:	4602      	movne	r2, r0
 80127ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80127d2:	bf06      	itte	eq
 80127d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80127d8:	ea91 0f03 	teqeq	r1, r3
 80127dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80127e0:	bd30      	pop	{r4, r5, pc}
 80127e2:	bf00      	nop

080127e4 <__aeabi_ui2d>:
 80127e4:	f090 0f00 	teq	r0, #0
 80127e8:	bf04      	itt	eq
 80127ea:	2100      	moveq	r1, #0
 80127ec:	4770      	bxeq	lr
 80127ee:	b530      	push	{r4, r5, lr}
 80127f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80127f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80127f8:	f04f 0500 	mov.w	r5, #0
 80127fc:	f04f 0100 	mov.w	r1, #0
 8012800:	e750      	b.n	80126a4 <__adddf3+0x138>
 8012802:	bf00      	nop

08012804 <__aeabi_i2d>:
 8012804:	f090 0f00 	teq	r0, #0
 8012808:	bf04      	itt	eq
 801280a:	2100      	moveq	r1, #0
 801280c:	4770      	bxeq	lr
 801280e:	b530      	push	{r4, r5, lr}
 8012810:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8012814:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8012818:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801281c:	bf48      	it	mi
 801281e:	4240      	negmi	r0, r0
 8012820:	f04f 0100 	mov.w	r1, #0
 8012824:	e73e      	b.n	80126a4 <__adddf3+0x138>
 8012826:	bf00      	nop

08012828 <__aeabi_f2d>:
 8012828:	0042      	lsls	r2, r0, #1
 801282a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801282e:	ea4f 0131 	mov.w	r1, r1, rrx
 8012832:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8012836:	bf1f      	itttt	ne
 8012838:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801283c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8012840:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8012844:	4770      	bxne	lr
 8012846:	f092 0f00 	teq	r2, #0
 801284a:	bf14      	ite	ne
 801284c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8012850:	4770      	bxeq	lr
 8012852:	b530      	push	{r4, r5, lr}
 8012854:	f44f 7460 	mov.w	r4, #896	; 0x380
 8012858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801285c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012860:	e720      	b.n	80126a4 <__adddf3+0x138>
 8012862:	bf00      	nop

08012864 <__aeabi_ul2d>:
 8012864:	ea50 0201 	orrs.w	r2, r0, r1
 8012868:	bf08      	it	eq
 801286a:	4770      	bxeq	lr
 801286c:	b530      	push	{r4, r5, lr}
 801286e:	f04f 0500 	mov.w	r5, #0
 8012872:	e00a      	b.n	801288a <__aeabi_l2d+0x16>

08012874 <__aeabi_l2d>:
 8012874:	ea50 0201 	orrs.w	r2, r0, r1
 8012878:	bf08      	it	eq
 801287a:	4770      	bxeq	lr
 801287c:	b530      	push	{r4, r5, lr}
 801287e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8012882:	d502      	bpl.n	801288a <__aeabi_l2d+0x16>
 8012884:	4240      	negs	r0, r0
 8012886:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801288a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801288e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8012892:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8012896:	f43f aedc 	beq.w	8012652 <__adddf3+0xe6>
 801289a:	f04f 0203 	mov.w	r2, #3
 801289e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80128a2:	bf18      	it	ne
 80128a4:	3203      	addne	r2, #3
 80128a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80128aa:	bf18      	it	ne
 80128ac:	3203      	addne	r2, #3
 80128ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80128b2:	f1c2 0320 	rsb	r3, r2, #32
 80128b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80128ba:	fa20 f002 	lsr.w	r0, r0, r2
 80128be:	fa01 fe03 	lsl.w	lr, r1, r3
 80128c2:	ea40 000e 	orr.w	r0, r0, lr
 80128c6:	fa21 f102 	lsr.w	r1, r1, r2
 80128ca:	4414      	add	r4, r2
 80128cc:	e6c1      	b.n	8012652 <__adddf3+0xe6>
 80128ce:	bf00      	nop

080128d0 <__aeabi_dmul>:
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80128d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80128da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80128de:	bf1d      	ittte	ne
 80128e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80128e4:	ea94 0f0c 	teqne	r4, ip
 80128e8:	ea95 0f0c 	teqne	r5, ip
 80128ec:	f000 f8de 	bleq	8012aac <__aeabi_dmul+0x1dc>
 80128f0:	442c      	add	r4, r5
 80128f2:	ea81 0603 	eor.w	r6, r1, r3
 80128f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80128fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80128fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8012902:	bf18      	it	ne
 8012904:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8012908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801290c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012910:	d038      	beq.n	8012984 <__aeabi_dmul+0xb4>
 8012912:	fba0 ce02 	umull	ip, lr, r0, r2
 8012916:	f04f 0500 	mov.w	r5, #0
 801291a:	fbe1 e502 	umlal	lr, r5, r1, r2
 801291e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8012922:	fbe0 e503 	umlal	lr, r5, r0, r3
 8012926:	f04f 0600 	mov.w	r6, #0
 801292a:	fbe1 5603 	umlal	r5, r6, r1, r3
 801292e:	f09c 0f00 	teq	ip, #0
 8012932:	bf18      	it	ne
 8012934:	f04e 0e01 	orrne.w	lr, lr, #1
 8012938:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 801293c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8012940:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8012944:	d204      	bcs.n	8012950 <__aeabi_dmul+0x80>
 8012946:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801294a:	416d      	adcs	r5, r5
 801294c:	eb46 0606 	adc.w	r6, r6, r6
 8012950:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8012954:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8012958:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801295c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8012960:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8012964:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8012968:	bf88      	it	hi
 801296a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801296e:	d81e      	bhi.n	80129ae <__aeabi_dmul+0xde>
 8012970:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8012974:	bf08      	it	eq
 8012976:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801297a:	f150 0000 	adcs.w	r0, r0, #0
 801297e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8012982:	bd70      	pop	{r4, r5, r6, pc}
 8012984:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8012988:	ea46 0101 	orr.w	r1, r6, r1
 801298c:	ea40 0002 	orr.w	r0, r0, r2
 8012990:	ea81 0103 	eor.w	r1, r1, r3
 8012994:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8012998:	bfc2      	ittt	gt
 801299a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801299e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80129a2:	bd70      	popgt	{r4, r5, r6, pc}
 80129a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80129a8:	f04f 0e00 	mov.w	lr, #0
 80129ac:	3c01      	subs	r4, #1
 80129ae:	f300 80ab 	bgt.w	8012b08 <__aeabi_dmul+0x238>
 80129b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80129b6:	bfde      	ittt	le
 80129b8:	2000      	movle	r0, #0
 80129ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80129be:	bd70      	pople	{r4, r5, r6, pc}
 80129c0:	f1c4 0400 	rsb	r4, r4, #0
 80129c4:	3c20      	subs	r4, #32
 80129c6:	da35      	bge.n	8012a34 <__aeabi_dmul+0x164>
 80129c8:	340c      	adds	r4, #12
 80129ca:	dc1b      	bgt.n	8012a04 <__aeabi_dmul+0x134>
 80129cc:	f104 0414 	add.w	r4, r4, #20
 80129d0:	f1c4 0520 	rsb	r5, r4, #32
 80129d4:	fa00 f305 	lsl.w	r3, r0, r5
 80129d8:	fa20 f004 	lsr.w	r0, r0, r4
 80129dc:	fa01 f205 	lsl.w	r2, r1, r5
 80129e0:	ea40 0002 	orr.w	r0, r0, r2
 80129e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80129e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80129ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80129f0:	fa21 f604 	lsr.w	r6, r1, r4
 80129f4:	eb42 0106 	adc.w	r1, r2, r6
 80129f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80129fc:	bf08      	it	eq
 80129fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8012a02:	bd70      	pop	{r4, r5, r6, pc}
 8012a04:	f1c4 040c 	rsb	r4, r4, #12
 8012a08:	f1c4 0520 	rsb	r5, r4, #32
 8012a0c:	fa00 f304 	lsl.w	r3, r0, r4
 8012a10:	fa20 f005 	lsr.w	r0, r0, r5
 8012a14:	fa01 f204 	lsl.w	r2, r1, r4
 8012a18:	ea40 0002 	orr.w	r0, r0, r2
 8012a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012a20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8012a24:	f141 0100 	adc.w	r1, r1, #0
 8012a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012a2c:	bf08      	it	eq
 8012a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8012a32:	bd70      	pop	{r4, r5, r6, pc}
 8012a34:	f1c4 0520 	rsb	r5, r4, #32
 8012a38:	fa00 f205 	lsl.w	r2, r0, r5
 8012a3c:	ea4e 0e02 	orr.w	lr, lr, r2
 8012a40:	fa20 f304 	lsr.w	r3, r0, r4
 8012a44:	fa01 f205 	lsl.w	r2, r1, r5
 8012a48:	ea43 0302 	orr.w	r3, r3, r2
 8012a4c:	fa21 f004 	lsr.w	r0, r1, r4
 8012a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012a54:	fa21 f204 	lsr.w	r2, r1, r4
 8012a58:	ea20 0002 	bic.w	r0, r0, r2
 8012a5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8012a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012a64:	bf08      	it	eq
 8012a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8012a6a:	bd70      	pop	{r4, r5, r6, pc}
 8012a6c:	f094 0f00 	teq	r4, #0
 8012a70:	d10f      	bne.n	8012a92 <__aeabi_dmul+0x1c2>
 8012a72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8012a76:	0040      	lsls	r0, r0, #1
 8012a78:	eb41 0101 	adc.w	r1, r1, r1
 8012a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012a80:	bf08      	it	eq
 8012a82:	3c01      	subeq	r4, #1
 8012a84:	d0f7      	beq.n	8012a76 <__aeabi_dmul+0x1a6>
 8012a86:	ea41 0106 	orr.w	r1, r1, r6
 8012a8a:	f095 0f00 	teq	r5, #0
 8012a8e:	bf18      	it	ne
 8012a90:	4770      	bxne	lr
 8012a92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8012a96:	0052      	lsls	r2, r2, #1
 8012a98:	eb43 0303 	adc.w	r3, r3, r3
 8012a9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8012aa0:	bf08      	it	eq
 8012aa2:	3d01      	subeq	r5, #1
 8012aa4:	d0f7      	beq.n	8012a96 <__aeabi_dmul+0x1c6>
 8012aa6:	ea43 0306 	orr.w	r3, r3, r6
 8012aaa:	4770      	bx	lr
 8012aac:	ea94 0f0c 	teq	r4, ip
 8012ab0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8012ab4:	bf18      	it	ne
 8012ab6:	ea95 0f0c 	teqne	r5, ip
 8012aba:	d00c      	beq.n	8012ad6 <__aeabi_dmul+0x206>
 8012abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8012ac0:	bf18      	it	ne
 8012ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8012ac6:	d1d1      	bne.n	8012a6c <__aeabi_dmul+0x19c>
 8012ac8:	ea81 0103 	eor.w	r1, r1, r3
 8012acc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012ad0:	f04f 0000 	mov.w	r0, #0
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8012ada:	bf06      	itte	eq
 8012adc:	4610      	moveq	r0, r2
 8012ade:	4619      	moveq	r1, r3
 8012ae0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8012ae4:	d019      	beq.n	8012b1a <__aeabi_dmul+0x24a>
 8012ae6:	ea94 0f0c 	teq	r4, ip
 8012aea:	d102      	bne.n	8012af2 <__aeabi_dmul+0x222>
 8012aec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8012af0:	d113      	bne.n	8012b1a <__aeabi_dmul+0x24a>
 8012af2:	ea95 0f0c 	teq	r5, ip
 8012af6:	d105      	bne.n	8012b04 <__aeabi_dmul+0x234>
 8012af8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8012afc:	bf1c      	itt	ne
 8012afe:	4610      	movne	r0, r2
 8012b00:	4619      	movne	r1, r3
 8012b02:	d10a      	bne.n	8012b1a <__aeabi_dmul+0x24a>
 8012b04:	ea81 0103 	eor.w	r1, r1, r3
 8012b08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012b0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8012b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b14:	f04f 0000 	mov.w	r0, #0
 8012b18:	bd70      	pop	{r4, r5, r6, pc}
 8012b1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8012b1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8012b22:	bd70      	pop	{r4, r5, r6, pc}

08012b24 <__aeabi_ddiv>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8012b2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8012b2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8012b32:	bf1d      	ittte	ne
 8012b34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8012b38:	ea94 0f0c 	teqne	r4, ip
 8012b3c:	ea95 0f0c 	teqne	r5, ip
 8012b40:	f000 f8a7 	bleq	8012c92 <__aeabi_ddiv+0x16e>
 8012b44:	eba4 0405 	sub.w	r4, r4, r5
 8012b48:	ea81 0e03 	eor.w	lr, r1, r3
 8012b4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8012b50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8012b54:	f000 8088 	beq.w	8012c68 <__aeabi_ddiv+0x144>
 8012b58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8012b5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8012b60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8012b64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8012b68:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8012b6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8012b70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8012b74:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8012b78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8012b7c:	429d      	cmp	r5, r3
 8012b7e:	bf08      	it	eq
 8012b80:	4296      	cmpeq	r6, r2
 8012b82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8012b86:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8012b8a:	d202      	bcs.n	8012b92 <__aeabi_ddiv+0x6e>
 8012b8c:	085b      	lsrs	r3, r3, #1
 8012b8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8012b92:	1ab6      	subs	r6, r6, r2
 8012b94:	eb65 0503 	sbc.w	r5, r5, r3
 8012b98:	085b      	lsrs	r3, r3, #1
 8012b9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8012b9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012ba2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8012ba6:	ebb6 0e02 	subs.w	lr, r6, r2
 8012baa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8012bae:	bf22      	ittt	cs
 8012bb0:	1ab6      	subcs	r6, r6, r2
 8012bb2:	4675      	movcs	r5, lr
 8012bb4:	ea40 000c 	orrcs.w	r0, r0, ip
 8012bb8:	085b      	lsrs	r3, r3, #1
 8012bba:	ea4f 0232 	mov.w	r2, r2, rrx
 8012bbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8012bc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8012bc6:	bf22      	ittt	cs
 8012bc8:	1ab6      	subcs	r6, r6, r2
 8012bca:	4675      	movcs	r5, lr
 8012bcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8012bd0:	085b      	lsrs	r3, r3, #1
 8012bd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8012bd6:	ebb6 0e02 	subs.w	lr, r6, r2
 8012bda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8012bde:	bf22      	ittt	cs
 8012be0:	1ab6      	subcs	r6, r6, r2
 8012be2:	4675      	movcs	r5, lr
 8012be4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8012be8:	085b      	lsrs	r3, r3, #1
 8012bea:	ea4f 0232 	mov.w	r2, r2, rrx
 8012bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8012bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8012bf6:	bf22      	ittt	cs
 8012bf8:	1ab6      	subcs	r6, r6, r2
 8012bfa:	4675      	movcs	r5, lr
 8012bfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8012c00:	ea55 0e06 	orrs.w	lr, r5, r6
 8012c04:	d018      	beq.n	8012c38 <__aeabi_ddiv+0x114>
 8012c06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8012c0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8012c0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8012c12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8012c16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8012c1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012c1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8012c22:	d1c0      	bne.n	8012ba6 <__aeabi_ddiv+0x82>
 8012c24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012c28:	d10b      	bne.n	8012c42 <__aeabi_ddiv+0x11e>
 8012c2a:	ea41 0100 	orr.w	r1, r1, r0
 8012c2e:	f04f 0000 	mov.w	r0, #0
 8012c32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8012c36:	e7b6      	b.n	8012ba6 <__aeabi_ddiv+0x82>
 8012c38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012c3c:	bf04      	itt	eq
 8012c3e:	4301      	orreq	r1, r0
 8012c40:	2000      	moveq	r0, #0
 8012c42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8012c46:	bf88      	it	hi
 8012c48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8012c4c:	f63f aeaf 	bhi.w	80129ae <__aeabi_dmul+0xde>
 8012c50:	ebb5 0c03 	subs.w	ip, r5, r3
 8012c54:	bf04      	itt	eq
 8012c56:	ebb6 0c02 	subseq.w	ip, r6, r2
 8012c5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8012c5e:	f150 0000 	adcs.w	r0, r0, #0
 8012c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8012c66:	bd70      	pop	{r4, r5, r6, pc}
 8012c68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8012c6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8012c70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8012c74:	bfc2      	ittt	gt
 8012c76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8012c7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8012c7e:	bd70      	popgt	{r4, r5, r6, pc}
 8012c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012c84:	f04f 0e00 	mov.w	lr, #0
 8012c88:	3c01      	subs	r4, #1
 8012c8a:	e690      	b.n	80129ae <__aeabi_dmul+0xde>
 8012c8c:	ea45 0e06 	orr.w	lr, r5, r6
 8012c90:	e68d      	b.n	80129ae <__aeabi_dmul+0xde>
 8012c92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8012c96:	ea94 0f0c 	teq	r4, ip
 8012c9a:	bf08      	it	eq
 8012c9c:	ea95 0f0c 	teqeq	r5, ip
 8012ca0:	f43f af3b 	beq.w	8012b1a <__aeabi_dmul+0x24a>
 8012ca4:	ea94 0f0c 	teq	r4, ip
 8012ca8:	d10a      	bne.n	8012cc0 <__aeabi_ddiv+0x19c>
 8012caa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8012cae:	f47f af34 	bne.w	8012b1a <__aeabi_dmul+0x24a>
 8012cb2:	ea95 0f0c 	teq	r5, ip
 8012cb6:	f47f af25 	bne.w	8012b04 <__aeabi_dmul+0x234>
 8012cba:	4610      	mov	r0, r2
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	e72c      	b.n	8012b1a <__aeabi_dmul+0x24a>
 8012cc0:	ea95 0f0c 	teq	r5, ip
 8012cc4:	d106      	bne.n	8012cd4 <__aeabi_ddiv+0x1b0>
 8012cc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8012cca:	f43f aefd 	beq.w	8012ac8 <__aeabi_dmul+0x1f8>
 8012cce:	4610      	mov	r0, r2
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	e722      	b.n	8012b1a <__aeabi_dmul+0x24a>
 8012cd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8012cd8:	bf18      	it	ne
 8012cda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8012cde:	f47f aec5 	bne.w	8012a6c <__aeabi_dmul+0x19c>
 8012ce2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8012ce6:	f47f af0d 	bne.w	8012b04 <__aeabi_dmul+0x234>
 8012cea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8012cee:	f47f aeeb 	bne.w	8012ac8 <__aeabi_dmul+0x1f8>
 8012cf2:	e712      	b.n	8012b1a <__aeabi_dmul+0x24a>

08012cf4 <__gedf2>:
 8012cf4:	f04f 3cff 	mov.w	ip, #4294967295
 8012cf8:	e006      	b.n	8012d08 <__cmpdf2+0x4>
 8012cfa:	bf00      	nop

08012cfc <__ledf2>:
 8012cfc:	f04f 0c01 	mov.w	ip, #1
 8012d00:	e002      	b.n	8012d08 <__cmpdf2+0x4>
 8012d02:	bf00      	nop

08012d04 <__cmpdf2>:
 8012d04:	f04f 0c01 	mov.w	ip, #1
 8012d08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8012d0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8012d18:	bf18      	it	ne
 8012d1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8012d1e:	d01b      	beq.n	8012d58 <__cmpdf2+0x54>
 8012d20:	b001      	add	sp, #4
 8012d22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8012d26:	bf0c      	ite	eq
 8012d28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8012d2c:	ea91 0f03 	teqne	r1, r3
 8012d30:	bf02      	ittt	eq
 8012d32:	ea90 0f02 	teqeq	r0, r2
 8012d36:	2000      	moveq	r0, #0
 8012d38:	4770      	bxeq	lr
 8012d3a:	f110 0f00 	cmn.w	r0, #0
 8012d3e:	ea91 0f03 	teq	r1, r3
 8012d42:	bf58      	it	pl
 8012d44:	4299      	cmppl	r1, r3
 8012d46:	bf08      	it	eq
 8012d48:	4290      	cmpeq	r0, r2
 8012d4a:	bf2c      	ite	cs
 8012d4c:	17d8      	asrcs	r0, r3, #31
 8012d4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8012d52:	f040 0001 	orr.w	r0, r0, #1
 8012d56:	4770      	bx	lr
 8012d58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012d5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012d60:	d102      	bne.n	8012d68 <__cmpdf2+0x64>
 8012d62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8012d66:	d107      	bne.n	8012d78 <__cmpdf2+0x74>
 8012d68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8012d6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012d70:	d1d6      	bne.n	8012d20 <__cmpdf2+0x1c>
 8012d72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8012d76:	d0d3      	beq.n	8012d20 <__cmpdf2+0x1c>
 8012d78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8012d7c:	4770      	bx	lr
 8012d7e:	bf00      	nop

08012d80 <__aeabi_cdrcmple>:
 8012d80:	4684      	mov	ip, r0
 8012d82:	4610      	mov	r0, r2
 8012d84:	4662      	mov	r2, ip
 8012d86:	468c      	mov	ip, r1
 8012d88:	4619      	mov	r1, r3
 8012d8a:	4663      	mov	r3, ip
 8012d8c:	e000      	b.n	8012d90 <__aeabi_cdcmpeq>
 8012d8e:	bf00      	nop

08012d90 <__aeabi_cdcmpeq>:
 8012d90:	b501      	push	{r0, lr}
 8012d92:	f7ff ffb7 	bl	8012d04 <__cmpdf2>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	bf48      	it	mi
 8012d9a:	f110 0f00 	cmnmi.w	r0, #0
 8012d9e:	bd01      	pop	{r0, pc}

08012da0 <__aeabi_dcmpeq>:
 8012da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012da4:	f7ff fff4 	bl	8012d90 <__aeabi_cdcmpeq>
 8012da8:	bf0c      	ite	eq
 8012daa:	2001      	moveq	r0, #1
 8012dac:	2000      	movne	r0, #0
 8012dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8012db2:	bf00      	nop

08012db4 <__aeabi_dcmplt>:
 8012db4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012db8:	f7ff ffea 	bl	8012d90 <__aeabi_cdcmpeq>
 8012dbc:	bf34      	ite	cc
 8012dbe:	2001      	movcc	r0, #1
 8012dc0:	2000      	movcs	r0, #0
 8012dc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8012dc6:	bf00      	nop

08012dc8 <__aeabi_dcmple>:
 8012dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012dcc:	f7ff ffe0 	bl	8012d90 <__aeabi_cdcmpeq>
 8012dd0:	bf94      	ite	ls
 8012dd2:	2001      	movls	r0, #1
 8012dd4:	2000      	movhi	r0, #0
 8012dd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8012dda:	bf00      	nop

08012ddc <__aeabi_dcmpge>:
 8012ddc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012de0:	f7ff ffce 	bl	8012d80 <__aeabi_cdrcmple>
 8012de4:	bf94      	ite	ls
 8012de6:	2001      	movls	r0, #1
 8012de8:	2000      	movhi	r0, #0
 8012dea:	f85d fb08 	ldr.w	pc, [sp], #8
 8012dee:	bf00      	nop

08012df0 <__aeabi_dcmpgt>:
 8012df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012df4:	f7ff ffc4 	bl	8012d80 <__aeabi_cdrcmple>
 8012df8:	bf34      	ite	cc
 8012dfa:	2001      	movcc	r0, #1
 8012dfc:	2000      	movcs	r0, #0
 8012dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8012e02:	bf00      	nop

08012e04 <__aeabi_d2uiz>:
 8012e04:	004a      	lsls	r2, r1, #1
 8012e06:	d211      	bcs.n	8012e2c <__aeabi_d2uiz+0x28>
 8012e08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8012e0c:	d211      	bcs.n	8012e32 <__aeabi_d2uiz+0x2e>
 8012e0e:	d50d      	bpl.n	8012e2c <__aeabi_d2uiz+0x28>
 8012e10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8012e14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8012e18:	d40e      	bmi.n	8012e38 <__aeabi_d2uiz+0x34>
 8012e1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8012e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012e22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8012e26:	fa23 f002 	lsr.w	r0, r3, r2
 8012e2a:	4770      	bx	lr
 8012e2c:	f04f 0000 	mov.w	r0, #0
 8012e30:	4770      	bx	lr
 8012e32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8012e36:	d102      	bne.n	8012e3e <__aeabi_d2uiz+0x3a>
 8012e38:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3c:	4770      	bx	lr
 8012e3e:	f04f 0000 	mov.w	r0, #0
 8012e42:	4770      	bx	lr

08012e44 <__aeabi_d2f>:
 8012e44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8012e48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8012e4c:	bf24      	itt	cs
 8012e4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8012e52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8012e56:	d90d      	bls.n	8012e74 <__aeabi_d2f+0x30>
 8012e58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8012e5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8012e60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8012e64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8012e68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8012e6c:	bf08      	it	eq
 8012e6e:	f020 0001 	biceq.w	r0, r0, #1
 8012e72:	4770      	bx	lr
 8012e74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8012e78:	d121      	bne.n	8012ebe <__aeabi_d2f+0x7a>
 8012e7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8012e7e:	bfbc      	itt	lt
 8012e80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8012e84:	4770      	bxlt	lr
 8012e86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012e8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8012e8e:	f1c2 0218 	rsb	r2, r2, #24
 8012e92:	f1c2 0c20 	rsb	ip, r2, #32
 8012e96:	fa10 f30c 	lsls.w	r3, r0, ip
 8012e9a:	fa20 f002 	lsr.w	r0, r0, r2
 8012e9e:	bf18      	it	ne
 8012ea0:	f040 0001 	orrne.w	r0, r0, #1
 8012ea4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8012ea8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8012eac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8012eb0:	ea40 000c 	orr.w	r0, r0, ip
 8012eb4:	fa23 f302 	lsr.w	r3, r3, r2
 8012eb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ebc:	e7cc      	b.n	8012e58 <__aeabi_d2f+0x14>
 8012ebe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8012ec2:	d107      	bne.n	8012ed4 <__aeabi_d2f+0x90>
 8012ec4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8012ec8:	bf1e      	ittt	ne
 8012eca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8012ece:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8012ed2:	4770      	bxne	lr
 8012ed4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8012ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8012edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop

08012ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012eea:	e003      	b.n	8012ef4 <LoopCopyDataInit>

08012eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012eec:	4b0c      	ldr	r3, [pc, #48]	; (8012f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012ef2:	3104      	adds	r1, #4

08012ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012ef4:	480b      	ldr	r0, [pc, #44]	; (8012f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012ef6:	4b0c      	ldr	r3, [pc, #48]	; (8012f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012efc:	d3f6      	bcc.n	8012eec <CopyDataInit>
  ldr  r2, =_sbss
 8012efe:	4a0b      	ldr	r2, [pc, #44]	; (8012f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012f00:	e002      	b.n	8012f08 <LoopFillZerobss>

08012f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012f04:	f842 3b04 	str.w	r3, [r2], #4

08012f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012f08:	4b09      	ldr	r3, [pc, #36]	; (8012f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012f0c:	d3f9      	bcc.n	8012f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012f0e:	f7ff fa77 	bl	8012400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012f12:	f000 f811 	bl	8012f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012f16:	f7fd ffdd 	bl	8010ed4 <main>
  bx  lr    
 8012f1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012f1c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8012f20:	080135c8 	.word	0x080135c8
  ldr  r0, =_sdata
 8012f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012f28:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8012f2c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8012f30:	2000024c 	.word	0x2000024c

08012f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012f34:	e7fe      	b.n	8012f34 <ADC_IRQHandler>
	...

08012f38 <__libc_init_array>:
 8012f38:	b570      	push	{r4, r5, r6, lr}
 8012f3a:	4e0d      	ldr	r6, [pc, #52]	; (8012f70 <__libc_init_array+0x38>)
 8012f3c:	4c0d      	ldr	r4, [pc, #52]	; (8012f74 <__libc_init_array+0x3c>)
 8012f3e:	1ba4      	subs	r4, r4, r6
 8012f40:	10a4      	asrs	r4, r4, #2
 8012f42:	2500      	movs	r5, #0
 8012f44:	42a5      	cmp	r5, r4
 8012f46:	d109      	bne.n	8012f5c <__libc_init_array+0x24>
 8012f48:	4e0b      	ldr	r6, [pc, #44]	; (8012f78 <__libc_init_array+0x40>)
 8012f4a:	4c0c      	ldr	r4, [pc, #48]	; (8012f7c <__libc_init_array+0x44>)
 8012f4c:	f000 faec 	bl	8013528 <_init>
 8012f50:	1ba4      	subs	r4, r4, r6
 8012f52:	10a4      	asrs	r4, r4, #2
 8012f54:	2500      	movs	r5, #0
 8012f56:	42a5      	cmp	r5, r4
 8012f58:	d105      	bne.n	8012f66 <__libc_init_array+0x2e>
 8012f5a:	bd70      	pop	{r4, r5, r6, pc}
 8012f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012f60:	4798      	blx	r3
 8012f62:	3501      	adds	r5, #1
 8012f64:	e7ee      	b.n	8012f44 <__libc_init_array+0xc>
 8012f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012f6a:	4798      	blx	r3
 8012f6c:	3501      	adds	r5, #1
 8012f6e:	e7f2      	b.n	8012f56 <__libc_init_array+0x1e>
 8012f70:	080135c0 	.word	0x080135c0
 8012f74:	080135c0 	.word	0x080135c0
 8012f78:	080135c0 	.word	0x080135c0
 8012f7c:	080135c4 	.word	0x080135c4

08012f80 <round>:
 8012f80:	ec51 0b10 	vmov	r0, r1, d0
 8012f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f86:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8012f8a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8012f8e:	2c13      	cmp	r4, #19
 8012f90:	460b      	mov	r3, r1
 8012f92:	460f      	mov	r7, r1
 8012f94:	dc17      	bgt.n	8012fc6 <round+0x46>
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	da09      	bge.n	8012fae <round+0x2e>
 8012f9a:	3401      	adds	r4, #1
 8012f9c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012fa0:	d103      	bne.n	8012faa <round+0x2a>
 8012fa2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012fa6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012faa:	2100      	movs	r1, #0
 8012fac:	e028      	b.n	8013000 <round+0x80>
 8012fae:	4a16      	ldr	r2, [pc, #88]	; (8013008 <round+0x88>)
 8012fb0:	4122      	asrs	r2, r4
 8012fb2:	4211      	tst	r1, r2
 8012fb4:	d100      	bne.n	8012fb8 <round+0x38>
 8012fb6:	b180      	cbz	r0, 8012fda <round+0x5a>
 8012fb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012fbc:	4123      	asrs	r3, r4
 8012fbe:	443b      	add	r3, r7
 8012fc0:	ea23 0302 	bic.w	r3, r3, r2
 8012fc4:	e7f1      	b.n	8012faa <round+0x2a>
 8012fc6:	2c33      	cmp	r4, #51	; 0x33
 8012fc8:	dd0a      	ble.n	8012fe0 <round+0x60>
 8012fca:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012fce:	d104      	bne.n	8012fda <round+0x5a>
 8012fd0:	ee10 2a10 	vmov	r2, s0
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	f7ff fac9 	bl	801256c <__adddf3>
 8012fda:	ec41 0b10 	vmov	d0, r0, r1
 8012fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe0:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 8012fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8012fe8:	40d5      	lsrs	r5, r2
 8012fea:	4228      	tst	r0, r5
 8012fec:	d0f5      	beq.n	8012fda <round+0x5a>
 8012fee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	40a2      	lsls	r2, r4
 8012ff6:	1812      	adds	r2, r2, r0
 8012ff8:	bf28      	it	cs
 8012ffa:	3301      	addcs	r3, #1
 8012ffc:	ea22 0105 	bic.w	r1, r2, r5
 8013000:	4608      	mov	r0, r1
 8013002:	4619      	mov	r1, r3
 8013004:	e7e9      	b.n	8012fda <round+0x5a>
 8013006:	bf00      	nop
 8013008:	000fffff 	.word	0x000fffff

0801300c <atan2>:
 801300c:	f000 b800 	b.w	8013010 <__ieee754_atan2>

08013010 <__ieee754_atan2>:
 8013010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013014:	ec57 6b11 	vmov	r6, r7, d1
 8013018:	4273      	negs	r3, r6
 801301a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801301e:	4333      	orrs	r3, r6
 8013020:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80131c0 <__ieee754_atan2+0x1b0>
 8013024:	ec51 0b10 	vmov	r0, r1, d0
 8013028:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801302c:	4563      	cmp	r3, ip
 801302e:	ee11 8a10 	vmov	r8, s2
 8013032:	ee10 9a10 	vmov	r9, s0
 8013036:	468e      	mov	lr, r1
 8013038:	d807      	bhi.n	801304a <__ieee754_atan2+0x3a>
 801303a:	4244      	negs	r4, r0
 801303c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013040:	4304      	orrs	r4, r0
 8013042:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013046:	4564      	cmp	r4, ip
 8013048:	d907      	bls.n	801305a <__ieee754_atan2+0x4a>
 801304a:	4632      	mov	r2, r6
 801304c:	463b      	mov	r3, r7
 801304e:	f7ff fa8d 	bl	801256c <__adddf3>
 8013052:	ec41 0b10 	vmov	d0, r0, r1
 8013056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801305a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801305e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013062:	4334      	orrs	r4, r6
 8013064:	d103      	bne.n	801306e <__ieee754_atan2+0x5e>
 8013066:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801306a:	f000 b8ad 	b.w	80131c8 <atan>
 801306e:	17bc      	asrs	r4, r7, #30
 8013070:	f004 0402 	and.w	r4, r4, #2
 8013074:	ea59 0903 	orrs.w	r9, r9, r3
 8013078:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801307c:	d107      	bne.n	801308e <__ieee754_atan2+0x7e>
 801307e:	2c02      	cmp	r4, #2
 8013080:	d030      	beq.n	80130e4 <__ieee754_atan2+0xd4>
 8013082:	2c03      	cmp	r4, #3
 8013084:	d1e5      	bne.n	8013052 <__ieee754_atan2+0x42>
 8013086:	a13c      	add	r1, pc, #240	; (adr r1, 8013178 <__ieee754_atan2+0x168>)
 8013088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801308c:	e7e1      	b.n	8013052 <__ieee754_atan2+0x42>
 801308e:	ea58 0802 	orrs.w	r8, r8, r2
 8013092:	d106      	bne.n	80130a2 <__ieee754_atan2+0x92>
 8013094:	f1be 0f00 	cmp.w	lr, #0
 8013098:	da6a      	bge.n	8013170 <__ieee754_atan2+0x160>
 801309a:	a139      	add	r1, pc, #228	; (adr r1, 8013180 <__ieee754_atan2+0x170>)
 801309c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130a0:	e7d7      	b.n	8013052 <__ieee754_atan2+0x42>
 80130a2:	4562      	cmp	r2, ip
 80130a4:	d122      	bne.n	80130ec <__ieee754_atan2+0xdc>
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d111      	bne.n	80130ce <__ieee754_atan2+0xbe>
 80130aa:	2c02      	cmp	r4, #2
 80130ac:	d007      	beq.n	80130be <__ieee754_atan2+0xae>
 80130ae:	2c03      	cmp	r4, #3
 80130b0:	d009      	beq.n	80130c6 <__ieee754_atan2+0xb6>
 80130b2:	2c01      	cmp	r4, #1
 80130b4:	d156      	bne.n	8013164 <__ieee754_atan2+0x154>
 80130b6:	a134      	add	r1, pc, #208	; (adr r1, 8013188 <__ieee754_atan2+0x178>)
 80130b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130bc:	e7c9      	b.n	8013052 <__ieee754_atan2+0x42>
 80130be:	a134      	add	r1, pc, #208	; (adr r1, 8013190 <__ieee754_atan2+0x180>)
 80130c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130c4:	e7c5      	b.n	8013052 <__ieee754_atan2+0x42>
 80130c6:	a134      	add	r1, pc, #208	; (adr r1, 8013198 <__ieee754_atan2+0x188>)
 80130c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130cc:	e7c1      	b.n	8013052 <__ieee754_atan2+0x42>
 80130ce:	2c02      	cmp	r4, #2
 80130d0:	d008      	beq.n	80130e4 <__ieee754_atan2+0xd4>
 80130d2:	2c03      	cmp	r4, #3
 80130d4:	d0d7      	beq.n	8013086 <__ieee754_atan2+0x76>
 80130d6:	2c01      	cmp	r4, #1
 80130d8:	f04f 0000 	mov.w	r0, #0
 80130dc:	d146      	bne.n	801316c <__ieee754_atan2+0x15c>
 80130de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80130e2:	e7b6      	b.n	8013052 <__ieee754_atan2+0x42>
 80130e4:	a12e      	add	r1, pc, #184	; (adr r1, 80131a0 <__ieee754_atan2+0x190>)
 80130e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130ea:	e7b2      	b.n	8013052 <__ieee754_atan2+0x42>
 80130ec:	4563      	cmp	r3, ip
 80130ee:	d0d1      	beq.n	8013094 <__ieee754_atan2+0x84>
 80130f0:	1a9b      	subs	r3, r3, r2
 80130f2:	151b      	asrs	r3, r3, #20
 80130f4:	2b3c      	cmp	r3, #60	; 0x3c
 80130f6:	dc1e      	bgt.n	8013136 <__ieee754_atan2+0x126>
 80130f8:	2f00      	cmp	r7, #0
 80130fa:	da01      	bge.n	8013100 <__ieee754_atan2+0xf0>
 80130fc:	333c      	adds	r3, #60	; 0x3c
 80130fe:	db1e      	blt.n	801313e <__ieee754_atan2+0x12e>
 8013100:	4632      	mov	r2, r6
 8013102:	463b      	mov	r3, r7
 8013104:	f7ff fd0e 	bl	8012b24 <__aeabi_ddiv>
 8013108:	ec41 0b10 	vmov	d0, r0, r1
 801310c:	f000 fa04 	bl	8013518 <fabs>
 8013110:	f000 f85a 	bl	80131c8 <atan>
 8013114:	ec51 0b10 	vmov	r0, r1, d0
 8013118:	2c01      	cmp	r4, #1
 801311a:	d013      	beq.n	8013144 <__ieee754_atan2+0x134>
 801311c:	2c02      	cmp	r4, #2
 801311e:	d014      	beq.n	801314a <__ieee754_atan2+0x13a>
 8013120:	2c00      	cmp	r4, #0
 8013122:	d096      	beq.n	8013052 <__ieee754_atan2+0x42>
 8013124:	a320      	add	r3, pc, #128	; (adr r3, 80131a8 <__ieee754_atan2+0x198>)
 8013126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312a:	f7ff fa1d 	bl	8012568 <__aeabi_dsub>
 801312e:	a31c      	add	r3, pc, #112	; (adr r3, 80131a0 <__ieee754_atan2+0x190>)
 8013130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013134:	e013      	b.n	801315e <__ieee754_atan2+0x14e>
 8013136:	a11e      	add	r1, pc, #120	; (adr r1, 80131b0 <__ieee754_atan2+0x1a0>)
 8013138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801313c:	e7ec      	b.n	8013118 <__ieee754_atan2+0x108>
 801313e:	2000      	movs	r0, #0
 8013140:	2100      	movs	r1, #0
 8013142:	e7e9      	b.n	8013118 <__ieee754_atan2+0x108>
 8013144:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8013148:	e783      	b.n	8013052 <__ieee754_atan2+0x42>
 801314a:	a317      	add	r3, pc, #92	; (adr r3, 80131a8 <__ieee754_atan2+0x198>)
 801314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013150:	f7ff fa0a 	bl	8012568 <__aeabi_dsub>
 8013154:	4602      	mov	r2, r0
 8013156:	460b      	mov	r3, r1
 8013158:	a111      	add	r1, pc, #68	; (adr r1, 80131a0 <__ieee754_atan2+0x190>)
 801315a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801315e:	f7ff fa03 	bl	8012568 <__aeabi_dsub>
 8013162:	e776      	b.n	8013052 <__ieee754_atan2+0x42>
 8013164:	a114      	add	r1, pc, #80	; (adr r1, 80131b8 <__ieee754_atan2+0x1a8>)
 8013166:	e9d1 0100 	ldrd	r0, r1, [r1]
 801316a:	e772      	b.n	8013052 <__ieee754_atan2+0x42>
 801316c:	2100      	movs	r1, #0
 801316e:	e770      	b.n	8013052 <__ieee754_atan2+0x42>
 8013170:	a10f      	add	r1, pc, #60	; (adr r1, 80131b0 <__ieee754_atan2+0x1a0>)
 8013172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013176:	e76c      	b.n	8013052 <__ieee754_atan2+0x42>
 8013178:	54442d18 	.word	0x54442d18
 801317c:	c00921fb 	.word	0xc00921fb
 8013180:	54442d18 	.word	0x54442d18
 8013184:	bff921fb 	.word	0xbff921fb
 8013188:	54442d18 	.word	0x54442d18
 801318c:	bfe921fb 	.word	0xbfe921fb
 8013190:	7f3321d2 	.word	0x7f3321d2
 8013194:	4002d97c 	.word	0x4002d97c
 8013198:	7f3321d2 	.word	0x7f3321d2
 801319c:	c002d97c 	.word	0xc002d97c
 80131a0:	54442d18 	.word	0x54442d18
 80131a4:	400921fb 	.word	0x400921fb
 80131a8:	33145c07 	.word	0x33145c07
 80131ac:	3ca1a626 	.word	0x3ca1a626
 80131b0:	54442d18 	.word	0x54442d18
 80131b4:	3ff921fb 	.word	0x3ff921fb
 80131b8:	54442d18 	.word	0x54442d18
 80131bc:	3fe921fb 	.word	0x3fe921fb
 80131c0:	7ff00000 	.word	0x7ff00000
 80131c4:	00000000 	.word	0x00000000

080131c8 <atan>:
 80131c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131cc:	ec55 4b10 	vmov	r4, r5, d0
 80131d0:	4bc7      	ldr	r3, [pc, #796]	; (80134f0 <atan+0x328>)
 80131d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80131d6:	429e      	cmp	r6, r3
 80131d8:	46ab      	mov	fp, r5
 80131da:	dd18      	ble.n	801320e <atan+0x46>
 80131dc:	4ac5      	ldr	r2, [pc, #788]	; (80134f4 <atan+0x32c>)
 80131de:	4296      	cmp	r6, r2
 80131e0:	dc01      	bgt.n	80131e6 <atan+0x1e>
 80131e2:	d109      	bne.n	80131f8 <atan+0x30>
 80131e4:	b144      	cbz	r4, 80131f8 <atan+0x30>
 80131e6:	4622      	mov	r2, r4
 80131e8:	462b      	mov	r3, r5
 80131ea:	4620      	mov	r0, r4
 80131ec:	4629      	mov	r1, r5
 80131ee:	f7ff f9bd 	bl	801256c <__adddf3>
 80131f2:	4604      	mov	r4, r0
 80131f4:	460d      	mov	r5, r1
 80131f6:	e006      	b.n	8013206 <atan+0x3e>
 80131f8:	f1bb 0f00 	cmp.w	fp, #0
 80131fc:	f300 813a 	bgt.w	8013474 <atan+0x2ac>
 8013200:	a59f      	add	r5, pc, #636	; (adr r5, 8013480 <atan+0x2b8>)
 8013202:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013206:	ec45 4b10 	vmov	d0, r4, r5
 801320a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801320e:	4bba      	ldr	r3, [pc, #744]	; (80134f8 <atan+0x330>)
 8013210:	429e      	cmp	r6, r3
 8013212:	dc14      	bgt.n	801323e <atan+0x76>
 8013214:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013218:	429e      	cmp	r6, r3
 801321a:	dc0d      	bgt.n	8013238 <atan+0x70>
 801321c:	a39a      	add	r3, pc, #616	; (adr r3, 8013488 <atan+0x2c0>)
 801321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013222:	ee10 0a10 	vmov	r0, s0
 8013226:	4629      	mov	r1, r5
 8013228:	f7ff f9a0 	bl	801256c <__adddf3>
 801322c:	2200      	movs	r2, #0
 801322e:	4bb3      	ldr	r3, [pc, #716]	; (80134fc <atan+0x334>)
 8013230:	f7ff fdde 	bl	8012df0 <__aeabi_dcmpgt>
 8013234:	2800      	cmp	r0, #0
 8013236:	d1e6      	bne.n	8013206 <atan+0x3e>
 8013238:	f04f 3aff 	mov.w	sl, #4294967295
 801323c:	e02b      	b.n	8013296 <atan+0xce>
 801323e:	f000 f96b 	bl	8013518 <fabs>
 8013242:	4baf      	ldr	r3, [pc, #700]	; (8013500 <atan+0x338>)
 8013244:	429e      	cmp	r6, r3
 8013246:	ec55 4b10 	vmov	r4, r5, d0
 801324a:	f300 80bf 	bgt.w	80133cc <atan+0x204>
 801324e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013252:	429e      	cmp	r6, r3
 8013254:	f300 80a0 	bgt.w	8013398 <atan+0x1d0>
 8013258:	ee10 2a10 	vmov	r2, s0
 801325c:	ee10 0a10 	vmov	r0, s0
 8013260:	462b      	mov	r3, r5
 8013262:	4629      	mov	r1, r5
 8013264:	f7ff f982 	bl	801256c <__adddf3>
 8013268:	2200      	movs	r2, #0
 801326a:	4ba4      	ldr	r3, [pc, #656]	; (80134fc <atan+0x334>)
 801326c:	f7ff f97c 	bl	8012568 <__aeabi_dsub>
 8013270:	2200      	movs	r2, #0
 8013272:	4606      	mov	r6, r0
 8013274:	460f      	mov	r7, r1
 8013276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801327a:	4620      	mov	r0, r4
 801327c:	4629      	mov	r1, r5
 801327e:	f7ff f975 	bl	801256c <__adddf3>
 8013282:	4602      	mov	r2, r0
 8013284:	460b      	mov	r3, r1
 8013286:	4630      	mov	r0, r6
 8013288:	4639      	mov	r1, r7
 801328a:	f7ff fc4b 	bl	8012b24 <__aeabi_ddiv>
 801328e:	f04f 0a00 	mov.w	sl, #0
 8013292:	4604      	mov	r4, r0
 8013294:	460d      	mov	r5, r1
 8013296:	4622      	mov	r2, r4
 8013298:	462b      	mov	r3, r5
 801329a:	4620      	mov	r0, r4
 801329c:	4629      	mov	r1, r5
 801329e:	f7ff fb17 	bl	80128d0 <__aeabi_dmul>
 80132a2:	4602      	mov	r2, r0
 80132a4:	460b      	mov	r3, r1
 80132a6:	4680      	mov	r8, r0
 80132a8:	4689      	mov	r9, r1
 80132aa:	f7ff fb11 	bl	80128d0 <__aeabi_dmul>
 80132ae:	a378      	add	r3, pc, #480	; (adr r3, 8013490 <atan+0x2c8>)
 80132b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b4:	4606      	mov	r6, r0
 80132b6:	460f      	mov	r7, r1
 80132b8:	f7ff fb0a 	bl	80128d0 <__aeabi_dmul>
 80132bc:	a376      	add	r3, pc, #472	; (adr r3, 8013498 <atan+0x2d0>)
 80132be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c2:	f7ff f953 	bl	801256c <__adddf3>
 80132c6:	4632      	mov	r2, r6
 80132c8:	463b      	mov	r3, r7
 80132ca:	f7ff fb01 	bl	80128d0 <__aeabi_dmul>
 80132ce:	a374      	add	r3, pc, #464	; (adr r3, 80134a0 <atan+0x2d8>)
 80132d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d4:	f7ff f94a 	bl	801256c <__adddf3>
 80132d8:	4632      	mov	r2, r6
 80132da:	463b      	mov	r3, r7
 80132dc:	f7ff faf8 	bl	80128d0 <__aeabi_dmul>
 80132e0:	a371      	add	r3, pc, #452	; (adr r3, 80134a8 <atan+0x2e0>)
 80132e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e6:	f7ff f941 	bl	801256c <__adddf3>
 80132ea:	4632      	mov	r2, r6
 80132ec:	463b      	mov	r3, r7
 80132ee:	f7ff faef 	bl	80128d0 <__aeabi_dmul>
 80132f2:	a36f      	add	r3, pc, #444	; (adr r3, 80134b0 <atan+0x2e8>)
 80132f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f8:	f7ff f938 	bl	801256c <__adddf3>
 80132fc:	4632      	mov	r2, r6
 80132fe:	463b      	mov	r3, r7
 8013300:	f7ff fae6 	bl	80128d0 <__aeabi_dmul>
 8013304:	a36c      	add	r3, pc, #432	; (adr r3, 80134b8 <atan+0x2f0>)
 8013306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330a:	f7ff f92f 	bl	801256c <__adddf3>
 801330e:	4642      	mov	r2, r8
 8013310:	464b      	mov	r3, r9
 8013312:	f7ff fadd 	bl	80128d0 <__aeabi_dmul>
 8013316:	a36a      	add	r3, pc, #424	; (adr r3, 80134c0 <atan+0x2f8>)
 8013318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331c:	4680      	mov	r8, r0
 801331e:	4689      	mov	r9, r1
 8013320:	4630      	mov	r0, r6
 8013322:	4639      	mov	r1, r7
 8013324:	f7ff fad4 	bl	80128d0 <__aeabi_dmul>
 8013328:	a367      	add	r3, pc, #412	; (adr r3, 80134c8 <atan+0x300>)
 801332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332e:	f7ff f91b 	bl	8012568 <__aeabi_dsub>
 8013332:	4632      	mov	r2, r6
 8013334:	463b      	mov	r3, r7
 8013336:	f7ff facb 	bl	80128d0 <__aeabi_dmul>
 801333a:	a365      	add	r3, pc, #404	; (adr r3, 80134d0 <atan+0x308>)
 801333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013340:	f7ff f912 	bl	8012568 <__aeabi_dsub>
 8013344:	4632      	mov	r2, r6
 8013346:	463b      	mov	r3, r7
 8013348:	f7ff fac2 	bl	80128d0 <__aeabi_dmul>
 801334c:	a362      	add	r3, pc, #392	; (adr r3, 80134d8 <atan+0x310>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	f7ff f909 	bl	8012568 <__aeabi_dsub>
 8013356:	4632      	mov	r2, r6
 8013358:	463b      	mov	r3, r7
 801335a:	f7ff fab9 	bl	80128d0 <__aeabi_dmul>
 801335e:	a360      	add	r3, pc, #384	; (adr r3, 80134e0 <atan+0x318>)
 8013360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013364:	f7ff f900 	bl	8012568 <__aeabi_dsub>
 8013368:	4632      	mov	r2, r6
 801336a:	463b      	mov	r3, r7
 801336c:	f7ff fab0 	bl	80128d0 <__aeabi_dmul>
 8013370:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013374:	4602      	mov	r2, r0
 8013376:	460b      	mov	r3, r1
 8013378:	d155      	bne.n	8013426 <atan+0x25e>
 801337a:	4640      	mov	r0, r8
 801337c:	4649      	mov	r1, r9
 801337e:	f7ff f8f5 	bl	801256c <__adddf3>
 8013382:	4622      	mov	r2, r4
 8013384:	462b      	mov	r3, r5
 8013386:	f7ff faa3 	bl	80128d0 <__aeabi_dmul>
 801338a:	4602      	mov	r2, r0
 801338c:	460b      	mov	r3, r1
 801338e:	4620      	mov	r0, r4
 8013390:	4629      	mov	r1, r5
 8013392:	f7ff f8e9 	bl	8012568 <__aeabi_dsub>
 8013396:	e72c      	b.n	80131f2 <atan+0x2a>
 8013398:	ee10 0a10 	vmov	r0, s0
 801339c:	2200      	movs	r2, #0
 801339e:	4b57      	ldr	r3, [pc, #348]	; (80134fc <atan+0x334>)
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ff f8e1 	bl	8012568 <__aeabi_dsub>
 80133a6:	2200      	movs	r2, #0
 80133a8:	4606      	mov	r6, r0
 80133aa:	460f      	mov	r7, r1
 80133ac:	4b53      	ldr	r3, [pc, #332]	; (80134fc <atan+0x334>)
 80133ae:	4620      	mov	r0, r4
 80133b0:	4629      	mov	r1, r5
 80133b2:	f7ff f8db 	bl	801256c <__adddf3>
 80133b6:	4602      	mov	r2, r0
 80133b8:	460b      	mov	r3, r1
 80133ba:	4630      	mov	r0, r6
 80133bc:	4639      	mov	r1, r7
 80133be:	f7ff fbb1 	bl	8012b24 <__aeabi_ddiv>
 80133c2:	f04f 0a01 	mov.w	sl, #1
 80133c6:	4604      	mov	r4, r0
 80133c8:	460d      	mov	r5, r1
 80133ca:	e764      	b.n	8013296 <atan+0xce>
 80133cc:	4b4d      	ldr	r3, [pc, #308]	; (8013504 <atan+0x33c>)
 80133ce:	429e      	cmp	r6, r3
 80133d0:	dc1d      	bgt.n	801340e <atan+0x246>
 80133d2:	ee10 0a10 	vmov	r0, s0
 80133d6:	2200      	movs	r2, #0
 80133d8:	4b4b      	ldr	r3, [pc, #300]	; (8013508 <atan+0x340>)
 80133da:	4629      	mov	r1, r5
 80133dc:	f7ff f8c4 	bl	8012568 <__aeabi_dsub>
 80133e0:	2200      	movs	r2, #0
 80133e2:	4606      	mov	r6, r0
 80133e4:	460f      	mov	r7, r1
 80133e6:	4b48      	ldr	r3, [pc, #288]	; (8013508 <atan+0x340>)
 80133e8:	4620      	mov	r0, r4
 80133ea:	4629      	mov	r1, r5
 80133ec:	f7ff fa70 	bl	80128d0 <__aeabi_dmul>
 80133f0:	2200      	movs	r2, #0
 80133f2:	4b42      	ldr	r3, [pc, #264]	; (80134fc <atan+0x334>)
 80133f4:	f7ff f8ba 	bl	801256c <__adddf3>
 80133f8:	4602      	mov	r2, r0
 80133fa:	460b      	mov	r3, r1
 80133fc:	4630      	mov	r0, r6
 80133fe:	4639      	mov	r1, r7
 8013400:	f7ff fb90 	bl	8012b24 <__aeabi_ddiv>
 8013404:	f04f 0a02 	mov.w	sl, #2
 8013408:	4604      	mov	r4, r0
 801340a:	460d      	mov	r5, r1
 801340c:	e743      	b.n	8013296 <atan+0xce>
 801340e:	462b      	mov	r3, r5
 8013410:	ee10 2a10 	vmov	r2, s0
 8013414:	2000      	movs	r0, #0
 8013416:	493d      	ldr	r1, [pc, #244]	; (801350c <atan+0x344>)
 8013418:	f7ff fb84 	bl	8012b24 <__aeabi_ddiv>
 801341c:	f04f 0a03 	mov.w	sl, #3
 8013420:	4604      	mov	r4, r0
 8013422:	460d      	mov	r5, r1
 8013424:	e737      	b.n	8013296 <atan+0xce>
 8013426:	4640      	mov	r0, r8
 8013428:	4649      	mov	r1, r9
 801342a:	f7ff f89f 	bl	801256c <__adddf3>
 801342e:	4622      	mov	r2, r4
 8013430:	462b      	mov	r3, r5
 8013432:	f7ff fa4d 	bl	80128d0 <__aeabi_dmul>
 8013436:	4e36      	ldr	r6, [pc, #216]	; (8013510 <atan+0x348>)
 8013438:	4b36      	ldr	r3, [pc, #216]	; (8013514 <atan+0x34c>)
 801343a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801343e:	4456      	add	r6, sl
 8013440:	449a      	add	sl, r3
 8013442:	e9da 2300 	ldrd	r2, r3, [sl]
 8013446:	f7ff f88f 	bl	8012568 <__aeabi_dsub>
 801344a:	4622      	mov	r2, r4
 801344c:	462b      	mov	r3, r5
 801344e:	f7ff f88b 	bl	8012568 <__aeabi_dsub>
 8013452:	4602      	mov	r2, r0
 8013454:	460b      	mov	r3, r1
 8013456:	e9d6 0100 	ldrd	r0, r1, [r6]
 801345a:	f7ff f885 	bl	8012568 <__aeabi_dsub>
 801345e:	f1bb 0f00 	cmp.w	fp, #0
 8013462:	4604      	mov	r4, r0
 8013464:	460d      	mov	r5, r1
 8013466:	f6bf aece 	bge.w	8013206 <atan+0x3e>
 801346a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801346e:	4604      	mov	r4, r0
 8013470:	461d      	mov	r5, r3
 8013472:	e6c8      	b.n	8013206 <atan+0x3e>
 8013474:	a51c      	add	r5, pc, #112	; (adr r5, 80134e8 <atan+0x320>)
 8013476:	e9d5 4500 	ldrd	r4, r5, [r5]
 801347a:	e6c4      	b.n	8013206 <atan+0x3e>
 801347c:	f3af 8000 	nop.w
 8013480:	54442d18 	.word	0x54442d18
 8013484:	bff921fb 	.word	0xbff921fb
 8013488:	8800759c 	.word	0x8800759c
 801348c:	7e37e43c 	.word	0x7e37e43c
 8013490:	e322da11 	.word	0xe322da11
 8013494:	3f90ad3a 	.word	0x3f90ad3a
 8013498:	24760deb 	.word	0x24760deb
 801349c:	3fa97b4b 	.word	0x3fa97b4b
 80134a0:	a0d03d51 	.word	0xa0d03d51
 80134a4:	3fb10d66 	.word	0x3fb10d66
 80134a8:	c54c206e 	.word	0xc54c206e
 80134ac:	3fb745cd 	.word	0x3fb745cd
 80134b0:	920083ff 	.word	0x920083ff
 80134b4:	3fc24924 	.word	0x3fc24924
 80134b8:	5555550d 	.word	0x5555550d
 80134bc:	3fd55555 	.word	0x3fd55555
 80134c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80134c4:	bfa2b444 	.word	0xbfa2b444
 80134c8:	52defd9a 	.word	0x52defd9a
 80134cc:	3fadde2d 	.word	0x3fadde2d
 80134d0:	af749a6d 	.word	0xaf749a6d
 80134d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80134d8:	fe231671 	.word	0xfe231671
 80134dc:	3fbc71c6 	.word	0x3fbc71c6
 80134e0:	9998ebc4 	.word	0x9998ebc4
 80134e4:	3fc99999 	.word	0x3fc99999
 80134e8:	54442d18 	.word	0x54442d18
 80134ec:	3ff921fb 	.word	0x3ff921fb
 80134f0:	440fffff 	.word	0x440fffff
 80134f4:	7ff00000 	.word	0x7ff00000
 80134f8:	3fdbffff 	.word	0x3fdbffff
 80134fc:	3ff00000 	.word	0x3ff00000
 8013500:	3ff2ffff 	.word	0x3ff2ffff
 8013504:	40037fff 	.word	0x40037fff
 8013508:	3ff80000 	.word	0x3ff80000
 801350c:	bff00000 	.word	0xbff00000
 8013510:	08013580 	.word	0x08013580
 8013514:	080135a0 	.word	0x080135a0

08013518 <fabs>:
 8013518:	ec53 2b10 	vmov	r2, r3, d0
 801351c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013520:	ec43 2b10 	vmov	d0, r2, r3
 8013524:	4770      	bx	lr
	...

08013528 <_init>:
 8013528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352a:	bf00      	nop
 801352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801352e:	bc08      	pop	{r3}
 8013530:	469e      	mov	lr, r3
 8013532:	4770      	bx	lr

08013534 <_fini>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	bf00      	nop
 8013538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801353a:	bc08      	pop	{r3}
 801353c:	469e      	mov	lr, r3
 801353e:	4770      	bx	lr
